/* 
 *
 * 
 *
 *
 * Less painful Android development with Scala
 *
 * http://scaloid.org
 *
 *
 *
 *
 *
 *
 * Copyright 2013 Sung-Ho Lee and Scaloid team
 *
 * Sung-Ho Lee and Scaloid team licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
 * This file is automatically generated. Any changes on this file will be OVERWRITTEN!
 * To learn how to contribute, please refer to:
 * https://github.com/pocorall/scaloid/wiki/Inside-Scaloid
 */

package org.scaloid.common

import android.app._
import android.content._
import android.view._
import android.view.View._
import android.widget._
import scala.collection.mutable.ArrayBuffer
import scala.language.implicitConversions
import WidgetImplicits._


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/PopupWindow.html android.widget.PopupWindow]]`.
 */
class RichPopupWindow[V <: android.widget.PopupWindow](val basis: V) extends TraitPopupWindow[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/PopupWindow.html android.widget.PopupWindow]]`. This contains several property accessors.
 */
trait TraitPopupWindow[V <: android.widget.PopupWindow] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getAnimationStyle() getAnimationStyle()]]`
   */
  @inline def animationStyle = basis.getAnimationStyle

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setAnimationStyle(int) setAnimationStyle(int)]]`
   */
  @inline def animationStyle  (p: Int) =            animationStyle_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setAnimationStyle(int) setAnimationStyle(int)]]`
   */
  @inline def animationStyle_=(p: Int) = { basis.setAnimationStyle(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getBackground() getBackground()]]`
   */
  @inline def background = basis.getBackground


  @inline def backgroundDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'backgroundDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setBackgroundDrawable(android.graphics.drawable.Drawable) setBackgroundDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def backgroundDrawable  (p: android.graphics.drawable.Drawable) =            backgroundDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setBackgroundDrawable(android.graphics.drawable.Drawable) setBackgroundDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def backgroundDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setBackgroundDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#isClippingEnabled() isClippingEnabled()]]`
   */
  @inline def clippingEnabled = basis.isClippingEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setClippingEnabled(boolean) setClippingEnabled(boolean)]]`
   */
  @inline def clippingEnabled  (p: Boolean) =            clippingEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setClippingEnabled(boolean) setClippingEnabled(boolean)]]`
   */
  @inline def clippingEnabled_=(p: Boolean) = { basis.setClippingEnabled(p); basis }

  @inline def  enableClipping()             = { basis.setClippingEnabled(true ); basis }
  @inline def disableClipping()             = { basis.setClippingEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getContentView() getContentView()]]`
   */
  @inline def contentView = basis.getContentView

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setContentView(android.view.View) setContentView(android.view.View)]]`
   */
  @inline def contentView  (p: android.view.View) =            contentView_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setContentView(android.view.View) setContentView(android.view.View)]]`
   */
  @inline def contentView_=(p: android.view.View) = { basis.setContentView(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#isFocusable() isFocusable()]]`
   */
  @inline def focusable = basis.isFocusable

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setFocusable(boolean) setFocusable(boolean)]]`
   */
  @inline def focusable  (p: Boolean) =            focusable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setFocusable(boolean) setFocusable(boolean)]]`
   */
  @inline def focusable_=(p: Boolean) = { basis.setFocusable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getHeight() getHeight()]]`
   */
  @inline def height = basis.getHeight

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setHeight(int) setHeight(int)]]`
   */
  @inline def height  (p: Int) =            height_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setHeight(int) setHeight(int)]]`
   */
  @inline def height_=(p: Int) = { basis.setHeight(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getInputMethodMode() getInputMethodMode()]]`
   */
  @inline def inputMethodMode = basis.getInputMethodMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setInputMethodMode(int) setInputMethodMode(int)]]`
   */
  @inline def inputMethodMode  (p: Int) =            inputMethodMode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setInputMethodMode(int) setInputMethodMode(int)]]`
   */
  @inline def inputMethodMode_=(p: Int) = { basis.setInputMethodMode(p); basis }


  @inline def onDismissListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onDismissListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setOnDismissListener(android.widget.PopupWindow.OnDismissListener) setOnDismissListener(android.widget.PopupWindow.OnDismissListener)]]`
   */
  @inline def onDismissListener  (p: android.widget.PopupWindow.OnDismissListener) =            onDismissListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setOnDismissListener(android.widget.PopupWindow.OnDismissListener) setOnDismissListener(android.widget.PopupWindow.OnDismissListener)]]`
   */
  @inline def onDismissListener_=(p: android.widget.PopupWindow.OnDismissListener) = { basis.setOnDismissListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#isOutsideTouchable() isOutsideTouchable()]]`
   */
  @inline def outsideTouchable = basis.isOutsideTouchable

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setOutsideTouchable(boolean) setOutsideTouchable(boolean)]]`
   */
  @inline def outsideTouchable  (p: Boolean) =            outsideTouchable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setOutsideTouchable(boolean) setOutsideTouchable(boolean)]]`
   */
  @inline def outsideTouchable_=(p: Boolean) = { basis.setOutsideTouchable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getSoftInputMode() getSoftInputMode()]]`
   */
  @inline def softInputMode = basis.getSoftInputMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setSoftInputMode(int) setSoftInputMode(int)]]`
   */
  @inline def softInputMode  (p: Int) =            softInputMode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setSoftInputMode(int) setSoftInputMode(int)]]`
   */
  @inline def softInputMode_=(p: Int) = { basis.setSoftInputMode(p); basis }


  @inline def touchInterceptor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'touchInterceptor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchInterceptor(android.view.View.OnTouchListener) setTouchInterceptor(android.view.View.OnTouchListener)]]`
   */
  @inline def touchInterceptor  (p: android.view.View.OnTouchListener) =            touchInterceptor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchInterceptor(android.view.View.OnTouchListener) setTouchInterceptor(android.view.View.OnTouchListener)]]`
   */
  @inline def touchInterceptor_=(p: android.view.View.OnTouchListener) = { basis.setTouchInterceptor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#isTouchable() isTouchable()]]`
   */
  @inline def touchable = basis.isTouchable

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchable(boolean) setTouchable(boolean)]]`
   */
  @inline def touchable  (p: Boolean) =            touchable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchable(boolean) setTouchable(boolean)]]`
   */
  @inline def touchable_=(p: Boolean) = { basis.setTouchable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#getWidth() getWidth()]]`
   */
  @inline def width = basis.getWidth

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setWidth(int) setWidth(int)]]`
   */
  @inline def width  (p: Int) =            width_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/PopupWindow.html#setWidth(int) setWidth(int)]]`
   */
  @inline def width_=(p: Int) = { basis.setWidth(p); basis }



  @inline def onDismiss[U](f:  => U): V = {
    basis.setOnDismissListener(new android.widget.PopupWindow.OnDismissListener {
      def onDismiss(): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/PopupWindow.html android.widget.PopupWindow]]`.
 */
class SPopupWindow()(implicit context: android.content.Context)
    extends android.widget.PopupWindow(context) with TraitPopupWindow[SPopupWindow] {

  def basis = this

}

object SPopupWindow {
  def apply()(implicit context: android.content.Context): SPopupWindow = {
    val v = new SPopupWindow
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html android.widget.ArrayAdapter[_]]]`.
 */
class RichArrayAdapter[V <: android.widget.ArrayAdapter[_]](val basis: V) extends TraitArrayAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html android.widget.ArrayAdapter[_]]]`. This contains several property accessors.
 */
trait TraitArrayAdapter[V <: android.widget.ArrayAdapter[_]] extends TraitBaseAdapter[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html#getContext() getContext()]]`
   */
  @inline def context = basis.getContext


  @inline def dropDownViewResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'dropDownViewResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html#setDropDownViewResource(int) setDropDownViewResource(int)]]`
   */
  @inline def dropDownViewResource  (p: Int) =            dropDownViewResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html#setDropDownViewResource(int) setDropDownViewResource(int)]]`
   */
  @inline def dropDownViewResource_=(p: Int) = { basis.setDropDownViewResource(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html#getFilter() getFilter()]]`
   */
  @inline def filter = basis.getFilter


  @inline def notifyOnChange(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'notifyOnChange'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html#setNotifyOnChange(boolean) setNotifyOnChange(boolean)]]`
   */
  @inline def notifyOnChange  (p: Boolean) =            notifyOnChange_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html#setNotifyOnChange(boolean) setNotifyOnChange(boolean)]]`
   */
  @inline def notifyOnChange_=(p: Boolean) = { basis.setNotifyOnChange(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ArrayAdapter.html android.widget.ArrayAdapter[_]]]`.
 */
class SArrayAdapter[V <: android.view.View, T <: AnyRef](items: Array[T], textViewResourceId: Int = android.R.layout.simple_spinner_item)(implicit context: android.content.Context)
    extends android.widget.ArrayAdapter[T](context, textViewResourceId, items) with TraitArrayAdapter[SArrayAdapter[V, T]] {

  def basis = this
  def setItem(view: TextView, pos: Int): TextView = {
    getItem(pos) match {
      case i: CharSequence => view.setText(i)
      case i => view.setText(i.toString)
    }
    view
  }

  override def getView(position: Int, convertView: View, parent: ViewGroup): View = {
    val v = super.getView(position, convertView, parent)
    if (_style != null) _style(v.asInstanceOf[V]) else v
  }

  protected var _style: V => V = null

  def style(v: V => V) = {
    _style = v
    this
  }

  override def getDropDownView(position: Int, convertView: View, parent: ViewGroup): View = {
    val v = super.getDropDownView(position, convertView, parent)
    if (_dropDownStyle != null) _dropDownStyle(v.asInstanceOf[V]) else v
  }

  protected var _dropDownStyle: V => V = null

  def dropDownStyle(v: V => V) = {
    _dropDownStyle = v
    this
  }
}

object SArrayAdapter {

  def apply[T <: AnyRef : Manifest](items: T*)(implicit context: Context): SArrayAdapter[TextView, T] = new SArrayAdapter[TextView, T](items.toArray)

  def apply[T <: AnyRef : Manifest](textViewResourceId: Int, items: T*)(implicit context: Context): SArrayAdapter[TextView, T] = new SArrayAdapter[TextView, T](items.toArray, textViewResourceId)

  def apply[T <: AnyRef](items: Array[T])(implicit context: Context): SArrayAdapter[TextView, T] = new SArrayAdapter[TextView, T](items)

  def apply[T <: AnyRef](textViewResourceId: Int, items: Array[T])(implicit context: Context): SArrayAdapter[TextView, T] = new SArrayAdapter[TextView, T](items, textViewResourceId)

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AbsoluteLayout.html android.widget.AbsoluteLayout]]`.
 */
class RichAbsoluteLayout[V <: android.widget.AbsoluteLayout](val basis: V) extends TraitAbsoluteLayout[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AbsoluteLayout.html android.widget.AbsoluteLayout]]`. This contains several property accessors.
 */
trait TraitAbsoluteLayout[V <: android.widget.AbsoluteLayout] extends TraitViewGroup[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/AbsoluteLayout.html android.widget.AbsoluteLayout]]`.
 */
class SAbsoluteLayout()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.AbsoluteLayout(context) with TraitAbsoluteLayout[SAbsoluteLayout] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SAbsoluteLayout {
  def apply[LP <: ViewGroupLayoutParams[_, SAbsoluteLayout]]()(implicit context: android.content.Context, defaultLayoutParam: SAbsoluteLayout => LP): SAbsoluteLayout = {
    val v = new SAbsoluteLayout
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SpinnerAdapter.html android.widget.SpinnerAdapter]]`.
 */
class RichSpinnerAdapter[V <: android.widget.SpinnerAdapter](val basis: V) extends TraitSpinnerAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SpinnerAdapter.html android.widget.SpinnerAdapter]]`. This contains several property accessors.
 */
trait TraitSpinnerAdapter[V <: android.widget.SpinnerAdapter] {

  def basis: V



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ImageButton.html android.widget.ImageButton]]`.
 */
class RichImageButton[V <: android.widget.ImageButton](val basis: V) extends TraitImageButton[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ImageButton.html android.widget.ImageButton]]`. This contains several property accessors.
 */
trait TraitImageButton[V <: android.widget.ImageButton] extends TraitImageView[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ImageButton.html android.widget.ImageButton]]`.
 */
class SImageButton()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ImageButton(context) with TraitImageButton[SImageButton] {

  def basis = this
  def this(imageResource: android.graphics.drawable.Drawable)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SImageButton {
  def apply[LP <: ViewGroupLayoutParams[_, SImageButton]]()(implicit context: android.content.Context, defaultLayoutParam: SImageButton => LP): SImageButton = {
    val v = new SImageButton
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SImageButton]](imageResource: android.graphics.drawable.Drawable)
      (implicit context: Context, defaultLayoutParam: (SImageButton) => LP): SImageButton = {
    val v = new SImageButton
    v.imageDrawable = imageResource
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SImageButton]](imageResource: android.graphics.drawable.Drawable, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SImageButton) => LP): SImageButton = {
    apply(imageResource, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SImageButton]](imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SImageButton) => LP): SImageButton = {
    val v = new SImageButton
    v.imageDrawable = imageResource
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ListView.html android.widget.ListView]]`.
 */
class RichListView[V <: android.widget.ListView](val basis: V) extends TraitListView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ListView.html android.widget.ListView]]`. This contains several property accessors.
 */
trait TraitListView[V <: android.widget.ListView] extends TraitAbsListView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getAdapter() getAdapter()]]`
   */
  @inline override def adapter = basis.getAdapter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setAdapter(android.widget.ListAdapter) setAdapter(android.widget.ListAdapter)]]`
   */
  @inline def adapter  (p: android.widget.ListAdapter) =            adapter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setAdapter(android.widget.ListAdapter) setAdapter(android.widget.ListAdapter)]]`
   */
  @inline def adapter_=(p: android.widget.ListAdapter) = { basis.setAdapter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getCheckItemIds() getCheckItemIds()]]`
   */
  @inline def checkItemIds = basis.getCheckItemIds


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getCheckedItemIds() getCheckedItemIds()]]`
   */
  @inline def checkedItemIds = basis.getCheckedItemIds


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getCheckedItemPosition() getCheckedItemPosition()]]`
   */
  @inline def checkedItemPosition = basis.getCheckedItemPosition


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getCheckedItemPositions() getCheckedItemPositions()]]`
   */
  @inline def checkedItemPositions = basis.getCheckedItemPositions


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getChoiceMode() getChoiceMode()]]`
   */
  @inline def choiceMode = basis.getChoiceMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setChoiceMode(int) setChoiceMode(int)]]`
   */
  @inline def choiceMode  (p: Int) =            choiceMode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setChoiceMode(int) setChoiceMode(int)]]`
   */
  @inline def choiceMode_=(p: Int) = { basis.setChoiceMode(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getDivider() getDivider()]]`
   */
  @inline def divider = basis.getDivider

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setDivider(android.graphics.drawable.Drawable) setDivider(android.graphics.drawable.Drawable)]]`
   */
  @inline def divider  (p: android.graphics.drawable.Drawable) =            divider_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setDivider(android.graphics.drawable.Drawable) setDivider(android.graphics.drawable.Drawable)]]`
   */
  @inline def divider_=(p: android.graphics.drawable.Drawable) = { basis.setDivider(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getDividerHeight() getDividerHeight()]]`
   */
  @inline def dividerHeight = basis.getDividerHeight

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setDividerHeight(int) setDividerHeight(int)]]`
   */
  @inline def dividerHeight  (p: Int) =            dividerHeight_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setDividerHeight(int) setDividerHeight(int)]]`
   */
  @inline def dividerHeight_=(p: Int) = { basis.setDividerHeight(p); basis }


  @inline def footerDividersEnabled(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'footerDividersEnabled'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setFooterDividersEnabled(boolean) setFooterDividersEnabled(boolean)]]`
   */
  @inline def footerDividersEnabled  (p: Boolean) =            footerDividersEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setFooterDividersEnabled(boolean) setFooterDividersEnabled(boolean)]]`
   */
  @inline def footerDividersEnabled_=(p: Boolean) = { basis.setFooterDividersEnabled(p); basis }

  @inline def  enableFooterDividers()             = { basis.setFooterDividersEnabled(true ); basis }
  @inline def disableFooterDividers()             = { basis.setFooterDividersEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getFooterViewsCount() getFooterViewsCount()]]`
   */
  @inline def footerViewsCount = basis.getFooterViewsCount


  @inline def headerDividersEnabled(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'headerDividersEnabled'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setHeaderDividersEnabled(boolean) setHeaderDividersEnabled(boolean)]]`
   */
  @inline def headerDividersEnabled  (p: Boolean) =            headerDividersEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setHeaderDividersEnabled(boolean) setHeaderDividersEnabled(boolean)]]`
   */
  @inline def headerDividersEnabled_=(p: Boolean) = { basis.setHeaderDividersEnabled(p); basis }

  @inline def  enableHeaderDividers()             = { basis.setHeaderDividersEnabled(true ); basis }
  @inline def disableHeaderDividers()             = { basis.setHeaderDividersEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getHeaderViewsCount() getHeaderViewsCount()]]`
   */
  @inline def headerViewsCount = basis.getHeaderViewsCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getItemsCanFocus() getItemsCanFocus()]]`
   */
  @inline def itemsCanFocus = basis.getItemsCanFocus

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setItemsCanFocus(boolean) setItemsCanFocus(boolean)]]`
   */
  @inline def itemsCanFocus  (p: Boolean) =            itemsCanFocus_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setItemsCanFocus(boolean) setItemsCanFocus(boolean)]]`
   */
  @inline def itemsCanFocus_=(p: Boolean) = { basis.setItemsCanFocus(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getMaxScrollAmount() getMaxScrollAmount()]]`
   */
  @inline def maxScrollAmount = basis.getMaxScrollAmount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getOverscrollFooter() getOverscrollFooter()]]`
   */
  @inline def overscrollFooter = basis.getOverscrollFooter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setOverscrollFooter(android.graphics.drawable.Drawable) setOverscrollFooter(android.graphics.drawable.Drawable)]]`
   */
  @inline def overscrollFooter  (p: android.graphics.drawable.Drawable) =            overscrollFooter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setOverscrollFooter(android.graphics.drawable.Drawable) setOverscrollFooter(android.graphics.drawable.Drawable)]]`
   */
  @inline def overscrollFooter_=(p: android.graphics.drawable.Drawable) = { basis.setOverscrollFooter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#getOverscrollHeader() getOverscrollHeader()]]`
   */
  @inline def overscrollHeader = basis.getOverscrollHeader

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setOverscrollHeader(android.graphics.drawable.Drawable) setOverscrollHeader(android.graphics.drawable.Drawable)]]`
   */
  @inline def overscrollHeader  (p: android.graphics.drawable.Drawable) =            overscrollHeader_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ListView.html#setOverscrollHeader(android.graphics.drawable.Drawable) setOverscrollHeader(android.graphics.drawable.Drawable)]]`
   */
  @inline def overscrollHeader_=(p: android.graphics.drawable.Drawable) = { basis.setOverscrollHeader(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ListView.html android.widget.ListView]]`.
 */
class SListView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ListView(context) with TraitListView[SListView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SListView {
  def apply[LP <: ViewGroupLayoutParams[_, SListView]]()(implicit context: android.content.Context, defaultLayoutParam: SListView => LP): SListView = {
    val v = new SListView
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/EditText.html android.widget.EditText]]`.
 */
class RichEditText[V <: android.widget.EditText](val basis: V) extends TraitEditText[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/EditText.html android.widget.EditText]]`. This contains several property accessors.
 */
trait TraitEditText[V <: android.widget.EditText] extends TraitTextView[V] {




  @inline def selection(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'selection'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/EditText.html#setSelection(int) setSelection(int)]]`
   */
  @inline def selection  (p: Int) =            selection_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/EditText.html#setSelection(int) setSelection(int)]]`
   */
  @inline def selection_=(p: Int) = { basis.setSelection(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/EditText.html#getText() getText()]]`
   */
  @inline override def text = basis.getText


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/EditText.html android.widget.EditText]]`.
 */
class SEditText()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.EditText(context) with TraitEditText[SEditText] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SEditText {
  def apply[LP <: ViewGroupLayoutParams[_, SEditText]]()(implicit context: android.content.Context, defaultLayoutParam: SEditText => LP): SEditText = {
    val v = new SEditText
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SEditText]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SEditText) => LP): SEditText =  {
    val v = new SEditText
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SEditText]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SEditText) => LP): SEditText = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SEditText]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SEditText) => LP): SEditText = {
    val v = new SEditText
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ImageView.html android.widget.ImageView]]`.
 */
class RichImageView[V <: android.widget.ImageView](val basis: V) extends TraitImageView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ImageView.html android.widget.ImageView]]`. This contains several property accessors.
 */
trait TraitImageView[V <: android.widget.ImageView] extends TraitView[V] {




  @inline def adjustViewBounds(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'adjustViewBounds'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setAdjustViewBounds(boolean) setAdjustViewBounds(boolean)]]`
   */
  @inline def adjustViewBounds  (p: Boolean) =            adjustViewBounds_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setAdjustViewBounds(boolean) setAdjustViewBounds(boolean)]]`
   */
  @inline def adjustViewBounds_=(p: Boolean) = { basis.setAdjustViewBounds(p); basis }


  @inline def alpha(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'alpha'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int) setAlpha(int)]]`
   */
  @inline def alpha  (p: Int) =            alpha_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int) setAlpha(int)]]`
   */
  @inline def alpha_=(p: Int) = { basis.setAlpha(p); basis }


  @inline def colorFilter(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'colorFilter'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setColorFilter(int) setColorFilter(int)]]`
   */
  @inline def colorFilter  (p: Int) =            colorFilter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setColorFilter(int) setColorFilter(int)]]`
   */
  @inline def colorFilter_=(p: Int) = { basis.setColorFilter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setColorFilter(android.graphics.ColorFilter) setColorFilter(android.graphics.ColorFilter)]]`
   */
  @inline def colorFilter  (p: android.graphics.ColorFilter) =            colorFilter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setColorFilter(android.graphics.ColorFilter) setColorFilter(android.graphics.ColorFilter)]]`
   */
  @inline def colorFilter_=(p: android.graphics.ColorFilter) = { basis.setColorFilter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#getDrawable() getDrawable()]]`
   */
  @inline def drawable = basis.getDrawable


  @inline def imageBitmap(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageBitmap'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageBitmap(android.graphics.Bitmap) setImageBitmap(android.graphics.Bitmap)]]`
   */
  @inline def imageBitmap  (p: android.graphics.Bitmap) =            imageBitmap_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageBitmap(android.graphics.Bitmap) setImageBitmap(android.graphics.Bitmap)]]`
   */
  @inline def imageBitmap_=(p: android.graphics.Bitmap) = { basis.setImageBitmap(p); basis }


  @inline def imageDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageDrawable(android.graphics.drawable.Drawable) setImageDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def imageDrawable  (p: android.graphics.drawable.Drawable) =            imageDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageDrawable(android.graphics.drawable.Drawable) setImageDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def imageDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setImageDrawable(p); basis }


  @inline def imageLevel(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageLevel'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageLevel(int) setImageLevel(int)]]`
   */
  @inline def imageLevel  (p: Int) =            imageLevel_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageLevel(int) setImageLevel(int)]]`
   */
  @inline def imageLevel_=(p: Int) = { basis.setImageLevel(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#getImageMatrix() getImageMatrix()]]`
   */
  @inline def imageMatrix = basis.getImageMatrix

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageMatrix(android.graphics.Matrix) setImageMatrix(android.graphics.Matrix)]]`
   */
  @inline def imageMatrix  (p: android.graphics.Matrix) =            imageMatrix_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageMatrix(android.graphics.Matrix) setImageMatrix(android.graphics.Matrix)]]`
   */
  @inline def imageMatrix_=(p: android.graphics.Matrix) = { basis.setImageMatrix(p); basis }


  @inline def imageResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageResource(int) setImageResource(int)]]`
   */
  @inline def imageResource  (p: Int) =            imageResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageResource(int) setImageResource(int)]]`
   */
  @inline def imageResource_=(p: Int) = { basis.setImageResource(p); basis }


  @inline def imageURI(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageURI'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageURI(android.net.Uri) setImageURI(android.net.Uri)]]`
   */
  @inline def imageURI  (p: android.net.Uri) =            imageURI_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setImageURI(android.net.Uri) setImageURI(android.net.Uri)]]`
   */
  @inline def imageURI_=(p: android.net.Uri) = { basis.setImageURI(p); basis }


  @inline def maxHeight(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'maxHeight'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setMaxHeight(int) setMaxHeight(int)]]`
   */
  @inline def maxHeight  (p: Int) =            maxHeight_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setMaxHeight(int) setMaxHeight(int)]]`
   */
  @inline def maxHeight_=(p: Int) = { basis.setMaxHeight(p); basis }


  @inline def maxWidth(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'maxWidth'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setMaxWidth(int) setMaxWidth(int)]]`
   */
  @inline def maxWidth  (p: Int) =            maxWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setMaxWidth(int) setMaxWidth(int)]]`
   */
  @inline def maxWidth_=(p: Int) = { basis.setMaxWidth(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#getScaleType() getScaleType()]]`
   */
  @inline def scaleType = basis.getScaleType

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setScaleType(android.widget.ImageView.ScaleType) setScaleType(android.widget.ImageView.ScaleType)]]`
   */
  @inline def scaleType  (p: android.widget.ImageView.ScaleType) =            scaleType_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageView.html#setScaleType(android.widget.ImageView.ScaleType) setScaleType(android.widget.ImageView.ScaleType)]]`
   */
  @inline def scaleType_=(p: android.widget.ImageView.ScaleType) = { basis.setScaleType(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ImageView.html android.widget.ImageView]]`.
 */
class SImageView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ImageView(context) with TraitImageView[SImageView] {

  def basis = this
  def this(imageResource: android.graphics.drawable.Drawable)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SImageView {
  def apply[LP <: ViewGroupLayoutParams[_, SImageView]]()(implicit context: android.content.Context, defaultLayoutParam: SImageView => LP): SImageView = {
    val v = new SImageView
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SImageView]](imageResource: android.graphics.drawable.Drawable)
      (implicit context: Context, defaultLayoutParam: (SImageView) => LP): SImageView = {
    val v = new SImageView
    v.imageDrawable = imageResource
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SImageView]](imageResource: android.graphics.drawable.Drawable, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SImageView) => LP): SImageView = {
    apply(imageResource, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SImageView]](imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SImageView) => LP): SImageView = {
    val v = new SImageView
    v.imageDrawable = imageResource
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AnalogClock.html android.widget.AnalogClock]]`.
 */
class RichAnalogClock[V <: android.widget.AnalogClock](val basis: V) extends TraitAnalogClock[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AnalogClock.html android.widget.AnalogClock]]`. This contains several property accessors.
 */
trait TraitAnalogClock[V <: android.widget.AnalogClock] extends TraitView[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/AnalogClock.html android.widget.AnalogClock]]`.
 */
class SAnalogClock()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.AnalogClock(context) with TraitAnalogClock[SAnalogClock] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SAnalogClock {
  def apply[LP <: ViewGroupLayoutParams[_, SAnalogClock]]()(implicit context: android.content.Context, defaultLayoutParam: SAnalogClock => LP): SAnalogClock = {
    val v = new SAnalogClock
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html android.widget.MultiAutoCompleteTextView]]`.
 */
class RichMultiAutoCompleteTextView[V <: android.widget.MultiAutoCompleteTextView](val basis: V) extends TraitMultiAutoCompleteTextView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html android.widget.MultiAutoCompleteTextView]]`. This contains several property accessors.
 */
trait TraitMultiAutoCompleteTextView[V <: android.widget.MultiAutoCompleteTextView] extends TraitAutoCompleteTextView[V] {




  @inline def tokenizer(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'tokenizer'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html#setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer) setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer)]]`
   */
  @inline def tokenizer  (p: android.widget.MultiAutoCompleteTextView.Tokenizer) =            tokenizer_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html#setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer) setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer)]]`
   */
  @inline def tokenizer_=(p: android.widget.MultiAutoCompleteTextView.Tokenizer) = { basis.setTokenizer(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html android.widget.MultiAutoCompleteTextView]]`.
 */
class SMultiAutoCompleteTextView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.MultiAutoCompleteTextView(context) with TraitMultiAutoCompleteTextView[SMultiAutoCompleteTextView] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SMultiAutoCompleteTextView {
  def apply[LP <: ViewGroupLayoutParams[_, SMultiAutoCompleteTextView]]()(implicit context: android.content.Context, defaultLayoutParam: SMultiAutoCompleteTextView => LP): SMultiAutoCompleteTextView = {
    val v = new SMultiAutoCompleteTextView
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SMultiAutoCompleteTextView]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SMultiAutoCompleteTextView) => LP): SMultiAutoCompleteTextView =  {
    val v = new SMultiAutoCompleteTextView
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SMultiAutoCompleteTextView]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SMultiAutoCompleteTextView) => LP): SMultiAutoCompleteTextView = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SMultiAutoCompleteTextView]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SMultiAutoCompleteTextView) => LP): SMultiAutoCompleteTextView = {
    val v = new SMultiAutoCompleteTextView
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/DatePicker.html android.widget.DatePicker]]`.
 */
class RichDatePicker[V <: android.widget.DatePicker](val basis: V) extends TraitDatePicker[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/DatePicker.html android.widget.DatePicker]]`. This contains several property accessors.
 */
trait TraitDatePicker[V <: android.widget.DatePicker] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DatePicker.html#getDayOfMonth() getDayOfMonth()]]`
   */
  @inline def dayOfMonth = basis.getDayOfMonth


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DatePicker.html#getMonth() getMonth()]]`
   */
  @inline def month = basis.getMonth


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DatePicker.html#getYear() getYear()]]`
   */
  @inline def year = basis.getYear


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/DatePicker.html android.widget.DatePicker]]`.
 */
class SDatePicker()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.DatePicker(context) with TraitDatePicker[SDatePicker] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SDatePicker {
  def apply[LP <: ViewGroupLayoutParams[_, SDatePicker]]()(implicit context: android.content.Context, defaultLayoutParam: SDatePicker => LP): SDatePicker = {
    val v = new SDatePicker
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html android.widget.AbsSeekBar]]`.
 */
class RichAbsSeekBar[V <: android.widget.AbsSeekBar](val basis: V) extends TraitAbsSeekBar[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html android.widget.AbsSeekBar]]`. This contains several property accessors.
 */
trait TraitAbsSeekBar[V <: android.widget.AbsSeekBar] extends TraitProgressBar[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#getKeyProgressIncrement() getKeyProgressIncrement()]]`
   */
  @inline def keyProgressIncrement = basis.getKeyProgressIncrement

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#setKeyProgressIncrement(int) setKeyProgressIncrement(int)]]`
   */
  @inline def keyProgressIncrement  (p: Int) =            keyProgressIncrement_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#setKeyProgressIncrement(int) setKeyProgressIncrement(int)]]`
   */
  @inline def keyProgressIncrement_=(p: Int) = { basis.setKeyProgressIncrement(p); basis }


  @inline def thumb(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'thumb'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#setThumb(android.graphics.drawable.Drawable) setThumb(android.graphics.drawable.Drawable)]]`
   */
  @inline def thumb  (p: android.graphics.drawable.Drawable) =            thumb_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#setThumb(android.graphics.drawable.Drawable) setThumb(android.graphics.drawable.Drawable)]]`
   */
  @inline def thumb_=(p: android.graphics.drawable.Drawable) = { basis.setThumb(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#getThumbOffset() getThumbOffset()]]`
   */
  @inline def thumbOffset = basis.getThumbOffset

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#setThumbOffset(int) setThumbOffset(int)]]`
   */
  @inline def thumbOffset  (p: Int) =            thumbOffset_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSeekBar.html#setThumbOffset(int) setThumbOffset(int)]]`
   */
  @inline def thumbOffset_=(p: Int) = { basis.setThumbOffset(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TableLayout.html android.widget.TableLayout]]`.
 */
class RichTableLayout[V <: android.widget.TableLayout](val basis: V) extends TraitTableLayout[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TableLayout.html android.widget.TableLayout]]`. This contains several property accessors.
 */
trait TraitTableLayout[V <: android.widget.TableLayout] extends TraitLinearLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableLayout.html#isShrinkAllColumns() isShrinkAllColumns()]]`
   */
  @inline def shrinkAllColumns = basis.isShrinkAllColumns

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableLayout.html#setShrinkAllColumns(boolean) setShrinkAllColumns(boolean)]]`
   */
  @inline def shrinkAllColumns  (p: Boolean) =            shrinkAllColumns_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableLayout.html#setShrinkAllColumns(boolean) setShrinkAllColumns(boolean)]]`
   */
  @inline def shrinkAllColumns_=(p: Boolean) = { basis.setShrinkAllColumns(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableLayout.html#isStretchAllColumns() isStretchAllColumns()]]`
   */
  @inline def stretchAllColumns = basis.isStretchAllColumns

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableLayout.html#setStretchAllColumns(boolean) setStretchAllColumns(boolean)]]`
   */
  @inline def stretchAllColumns  (p: Boolean) =            stretchAllColumns_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableLayout.html#setStretchAllColumns(boolean) setStretchAllColumns(boolean)]]`
   */
  @inline def stretchAllColumns_=(p: Boolean) = { basis.setStretchAllColumns(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TableLayout.html android.widget.TableLayout]]`.
 */
class STableLayout()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TableLayout(context) with TraitTableLayout[STableLayout] {

  def basis = this
  override val parentViewGroup = parentVGroup
  implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

  class LayoutParams[V <: View](v: V) extends TableLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT, 1.0f) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {
    def basis = this

    v.setLayoutParams(this)

    def parent = STableLayout.this

    def >> : V = v
  }
}

object STableLayout {
  def apply[LP <: ViewGroupLayoutParams[_, STableLayout]]()(implicit context: android.content.Context, defaultLayoutParam: STableLayout => LP): STableLayout = {
    val v = new STableLayout
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html android.widget.SimpleCursorTreeAdapter]]`.
 */
class RichSimpleCursorTreeAdapter[V <: android.widget.SimpleCursorTreeAdapter](val basis: V) extends TraitSimpleCursorTreeAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html android.widget.SimpleCursorTreeAdapter]]`. This contains several property accessors.
 */
trait TraitSimpleCursorTreeAdapter[V <: android.widget.SimpleCursorTreeAdapter] extends TraitResourceCursorTreeAdapter[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html#getViewBinder() getViewBinder()]]`
   */
  @inline def viewBinder = basis.getViewBinder

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html#setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder) setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder)]]`
   */
  @inline def viewBinder  (p: android.widget.SimpleCursorTreeAdapter.ViewBinder) =            viewBinder_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html#setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder) setViewBinder(android.widget.SimpleCursorTreeAdapter.ViewBinder)]]`
   */
  @inline def viewBinder_=(p: android.widget.SimpleCursorTreeAdapter.ViewBinder) = { basis.setViewBinder(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/CursorAdapter.html android.widget.CursorAdapter]]`.
 */
class RichCursorAdapter[V <: android.widget.CursorAdapter](val basis: V) extends TraitCursorAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/CursorAdapter.html android.widget.CursorAdapter]]`. This contains several property accessors.
 */
trait TraitCursorAdapter[V <: android.widget.CursorAdapter] extends TraitBaseAdapter[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorAdapter.html#getCursor() getCursor()]]`
   */
  @inline def cursor = basis.getCursor


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorAdapter.html#getFilter() getFilter()]]`
   */
  @inline def filter = basis.getFilter


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorAdapter.html#getFilterQueryProvider() getFilterQueryProvider()]]`
   */
  @inline def filterQueryProvider = basis.getFilterQueryProvider

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorAdapter.html#setFilterQueryProvider(android.widget.FilterQueryProvider) setFilterQueryProvider(android.widget.FilterQueryProvider)]]`
   */
  @inline def filterQueryProvider  (p: android.widget.FilterQueryProvider) =            filterQueryProvider_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorAdapter.html#setFilterQueryProvider(android.widget.FilterQueryProvider) setFilterQueryProvider(android.widget.FilterQueryProvider)]]`
   */
  @inline def filterQueryProvider_=(p: android.widget.FilterQueryProvider) = { basis.setFilterQueryProvider(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ResourceCursorTreeAdapter.html android.widget.ResourceCursorTreeAdapter]]`.
 */
class RichResourceCursorTreeAdapter[V <: android.widget.ResourceCursorTreeAdapter](val basis: V) extends TraitResourceCursorTreeAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ResourceCursorTreeAdapter.html android.widget.ResourceCursorTreeAdapter]]`. This contains several property accessors.
 */
trait TraitResourceCursorTreeAdapter[V <: android.widget.ResourceCursorTreeAdapter] extends TraitCursorTreeAdapter[V] {




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TabHost.html android.widget.TabHost]]`.
 */
class RichTabHost[V <: android.widget.TabHost](val basis: V) extends TraitTabHost[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TabHost.html android.widget.TabHost]]`. This contains several property accessors.
 */
trait TraitTabHost[V <: android.widget.TabHost] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#getCurrentTab() getCurrentTab()]]`
   */
  @inline def currentTab = basis.getCurrentTab

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#setCurrentTab(int) setCurrentTab(int)]]`
   */
  @inline def currentTab  (p: Int) =            currentTab_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#setCurrentTab(int) setCurrentTab(int)]]`
   */
  @inline def currentTab_=(p: Int) = { basis.setCurrentTab(p); basis }


  @inline def currentTabByTag(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'currentTabByTag'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#setCurrentTabByTag(java.lang.String) setCurrentTabByTag(java.lang.String)]]`
   */
  @inline def currentTabByTag  (p: java.lang.String) =            currentTabByTag_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#setCurrentTabByTag(java.lang.String) setCurrentTabByTag(java.lang.String)]]`
   */
  @inline def currentTabByTag_=(p: java.lang.String) = { basis.setCurrentTabByTag(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#getCurrentTabTag() getCurrentTabTag()]]`
   */
  @inline def currentTabTag = basis.getCurrentTabTag


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#getCurrentTabView() getCurrentTabView()]]`
   */
  @inline def currentTabView = basis.getCurrentTabView


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#getCurrentView() getCurrentView()]]`
   */
  @inline def currentView = basis.getCurrentView


  @inline def onTabChangedListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onTabChangedListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener) setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener)]]`
   */
  @inline def onTabChangedListener  (p: android.widget.TabHost.OnTabChangeListener) =            onTabChangedListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener) setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener)]]`
   */
  @inline def onTabChangedListener_=(p: android.widget.TabHost.OnTabChangeListener) = { basis.setOnTabChangedListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#getTabContentView() getTabContentView()]]`
   */
  @inline def tabContentView = basis.getTabContentView


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabHost.html#getTabWidget() getTabWidget()]]`
   */
  @inline def tabWidget = basis.getTabWidget


  @inline def onTabChanged[U](f: java.lang.String => U): V = {
    basis.setOnTabChangedListener(new android.widget.TabHost.OnTabChangeListener {
      def onTabChanged(p: java.lang.String): Unit = { f(p) }
    })
    basis
  }

  @inline def onTabChanged[U](f:  => U): V = {
    basis.setOnTabChangedListener(new android.widget.TabHost.OnTabChangeListener {
      def onTabChanged(p: java.lang.String): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TabHost.html android.widget.TabHost]]`.
 */
class STabHost()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TabHost(context) with TraitTabHost[STabHost] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object STabHost {
  def apply[LP <: ViewGroupLayoutParams[_, STabHost]]()(implicit context: android.content.Context, defaultLayoutParam: STabHost => LP): STabHost = {
    val v = new STabHost
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/HeterogeneousExpandableList.html android.widget.HeterogeneousExpandableList]]`.
 */
class RichHeterogeneousExpandableList[V <: android.widget.HeterogeneousExpandableList](val basis: V) extends TraitHeterogeneousExpandableList[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/HeterogeneousExpandableList.html android.widget.HeterogeneousExpandableList]]`. This contains several property accessors.
 */
trait TraitHeterogeneousExpandableList[V <: android.widget.HeterogeneousExpandableList] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeterogeneousExpandableList.html#getChildTypeCount() getChildTypeCount()]]`
   */
  @inline def childTypeCount = basis.getChildTypeCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeterogeneousExpandableList.html#getGroupTypeCount() getGroupTypeCount()]]`
   */
  @inline def groupTypeCount = basis.getGroupTypeCount


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/RadioGroup.html android.widget.RadioGroup]]`.
 */
class RichRadioGroup[V <: android.widget.RadioGroup](val basis: V) extends TraitRadioGroup[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/RadioGroup.html android.widget.RadioGroup]]`. This contains several property accessors.
 */
trait TraitRadioGroup[V <: android.widget.RadioGroup] extends TraitLinearLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RadioGroup.html#getCheckedRadioButtonId() getCheckedRadioButtonId()]]`
   */
  @inline def checkedRadioButtonId = basis.getCheckedRadioButtonId


  @inline def onCheckedChangeListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onCheckedChangeListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RadioGroup.html#setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener) setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener)]]`
   */
  @inline def onCheckedChangeListener  (p: android.widget.RadioGroup.OnCheckedChangeListener) =            onCheckedChangeListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RadioGroup.html#setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener) setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener)]]`
   */
  @inline def onCheckedChangeListener_=(p: android.widget.RadioGroup.OnCheckedChangeListener) = { basis.setOnCheckedChangeListener(p); basis }


  @inline def onCheckedChanged[U](f: (android.widget.RadioGroup, Int) => U): V = {
    basis.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener {
      def onCheckedChanged(p1: android.widget.RadioGroup, p2: Int): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onCheckedChanged[U](f:  => U): V = {
    basis.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener {
      def onCheckedChanged(p1: android.widget.RadioGroup, p2: Int): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/RadioGroup.html android.widget.RadioGroup]]`.
 */
class SRadioGroup()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.RadioGroup(context) with TraitRadioGroup[SRadioGroup] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SRadioGroup {
  def apply[LP <: ViewGroupLayoutParams[_, SRadioGroup]]()(implicit context: android.content.Context, defaultLayoutParam: SRadioGroup => LP): SRadioGroup = {
    val v = new SRadioGroup
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/RatingBar.html android.widget.RatingBar]]`.
 */
class RichRatingBar[V <: android.widget.RatingBar](val basis: V) extends TraitRatingBar[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/RatingBar.html android.widget.RatingBar]]`. This contains several property accessors.
 */
trait TraitRatingBar[V <: android.widget.RatingBar] extends TraitAbsSeekBar[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setIsIndicator(boolean) setIsIndicator(boolean)]]`
   */
  @inline def isIndicator  (p: Boolean) =            isIndicator_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setIsIndicator(boolean) setIsIndicator(boolean)]]`
   */
  @inline def isIndicator_=(p: Boolean) = { basis.setIsIndicator(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#getNumStars() getNumStars()]]`
   */
  @inline def numStars = basis.getNumStars

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setNumStars(int) setNumStars(int)]]`
   */
  @inline def numStars  (p: Int) =            numStars_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setNumStars(int) setNumStars(int)]]`
   */
  @inline def numStars_=(p: Int) = { basis.setNumStars(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#getOnRatingBarChangeListener() getOnRatingBarChangeListener()]]`
   */
  @inline def onRatingBarChangeListener = basis.getOnRatingBarChangeListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener) setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener)]]`
   */
  @inline def onRatingBarChangeListener  (p: android.widget.RatingBar.OnRatingBarChangeListener) =            onRatingBarChangeListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener) setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener)]]`
   */
  @inline def onRatingBarChangeListener_=(p: android.widget.RatingBar.OnRatingBarChangeListener) = { basis.setOnRatingBarChangeListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#getRating() getRating()]]`
   */
  @inline def rating = basis.getRating

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setRating(float) setRating(float)]]`
   */
  @inline def rating  (p: Float) =            rating_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setRating(float) setRating(float)]]`
   */
  @inline def rating_=(p: Float) = { basis.setRating(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#getStepSize() getStepSize()]]`
   */
  @inline def stepSize = basis.getStepSize

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setStepSize(float) setStepSize(float)]]`
   */
  @inline def stepSize  (p: Float) =            stepSize_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RatingBar.html#setStepSize(float) setStepSize(float)]]`
   */
  @inline def stepSize_=(p: Float) = { basis.setStepSize(p); basis }


  @inline def onRatingChanged[U](f: (android.widget.RatingBar, Float, Boolean) => U): V = {
    basis.setOnRatingBarChangeListener(new android.widget.RatingBar.OnRatingBarChangeListener {
      def onRatingChanged(p1: android.widget.RatingBar, p2: Float, p3: Boolean): Unit = { f(p1, p2, p3) }
    })
    basis
  }

  @inline def onRatingChanged[U](f:  => U): V = {
    basis.setOnRatingBarChangeListener(new android.widget.RatingBar.OnRatingBarChangeListener {
      def onRatingChanged(p1: android.widget.RatingBar, p2: Float, p3: Boolean): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/RatingBar.html android.widget.RatingBar]]`.
 */
class SRatingBar()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.RatingBar(context) with TraitRatingBar[SRatingBar] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SRatingBar {
  def apply[LP <: ViewGroupLayoutParams[_, SRatingBar]]()(implicit context: android.content.Context, defaultLayoutParam: SRatingBar => LP): SRatingBar = {
    val v = new SRatingBar
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SimpleExpandableListAdapter.html android.widget.SimpleExpandableListAdapter]]`.
 */
class RichSimpleExpandableListAdapter[V <: android.widget.SimpleExpandableListAdapter](val basis: V) extends TraitSimpleExpandableListAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SimpleExpandableListAdapter.html android.widget.SimpleExpandableListAdapter]]`. This contains several property accessors.
 */
trait TraitSimpleExpandableListAdapter[V <: android.widget.SimpleExpandableListAdapter] extends TraitBaseExpandableListAdapter[V] {




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ExpandableListAdapter.html android.widget.ExpandableListAdapter]]`.
 */
class RichExpandableListAdapter[V <: android.widget.ExpandableListAdapter](val basis: V) extends TraitExpandableListAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ExpandableListAdapter.html android.widget.ExpandableListAdapter]]`. This contains several property accessors.
 */
trait TraitExpandableListAdapter[V <: android.widget.ExpandableListAdapter] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount() getGroupCount()]]`
   */
  @inline def groupCount = basis.getGroupCount


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Spinner.html android.widget.Spinner]]`.
 */
class RichSpinner[V <: android.widget.Spinner](val basis: V) extends TraitSpinner[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Spinner.html android.widget.Spinner]]`. This contains several property accessors.
 */
trait TraitSpinner[V <: android.widget.Spinner] extends TraitAbsSpinner[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Spinner.html#getPrompt() getPrompt()]]`
   */
  @inline def prompt = basis.getPrompt

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Spinner.html#setPrompt(java.lang.CharSequence) setPrompt(java.lang.CharSequence)]]`
   */
  @inline def prompt  (p: java.lang.CharSequence) =            prompt_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Spinner.html#setPrompt(java.lang.CharSequence) setPrompt(java.lang.CharSequence)]]`
   */
  @inline def prompt_=(p: java.lang.CharSequence) = { basis.setPrompt(p); basis }


  @inline def promptId(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'promptId'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Spinner.html#setPromptId(int) setPromptId(int)]]`
   */
  @inline def promptId  (p: Int) =            promptId_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Spinner.html#setPromptId(int) setPromptId(int)]]`
   */
  @inline def promptId_=(p: Int) = { basis.setPromptId(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/Spinner.html android.widget.Spinner]]`.
 */
class SSpinner()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.Spinner(context) with TraitSpinner[SSpinner] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SSpinner {
  def apply[LP <: ViewGroupLayoutParams[_, SSpinner]]()(implicit context: android.content.Context, defaultLayoutParam: SSpinner => LP): SSpinner = {
    val v = new SSpinner
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AlphabetIndexer.html android.widget.AlphabetIndexer]]`.
 */
class RichAlphabetIndexer[V <: android.widget.AlphabetIndexer](val basis: V) extends TraitAlphabetIndexer[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AlphabetIndexer.html android.widget.AlphabetIndexer]]`. This contains several property accessors.
 */
trait TraitAlphabetIndexer[V <: android.widget.AlphabetIndexer] extends TraitDataSetObserver[V] {




  @inline def cursor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'cursor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AlphabetIndexer.html#setCursor(android.database.Cursor) setCursor(android.database.Cursor)]]`
   */
  @inline def cursor  (p: android.database.Cursor) =            cursor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AlphabetIndexer.html#setCursor(android.database.Cursor) setCursor(android.database.Cursor)]]`
   */
  @inline def cursor_=(p: android.database.Cursor) = { basis.setCursor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AlphabetIndexer.html#getSections() getSections()]]`
   */
  @inline def sections = basis.getSections


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/GridView.html android.widget.GridView]]`.
 */
class RichGridView[V <: android.widget.GridView](val basis: V) extends TraitGridView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/GridView.html android.widget.GridView]]`. This contains several property accessors.
 */
trait TraitGridView[V <: android.widget.GridView] extends TraitAbsListView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#getAdapter() getAdapter()]]`
   */
  @inline override def adapter = basis.getAdapter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setAdapter(android.widget.ListAdapter) setAdapter(android.widget.ListAdapter)]]`
   */
  @inline def adapter  (p: android.widget.ListAdapter) =            adapter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setAdapter(android.widget.ListAdapter) setAdapter(android.widget.ListAdapter)]]`
   */
  @inline def adapter_=(p: android.widget.ListAdapter) = { basis.setAdapter(p); basis }


  @inline def columnWidth(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'columnWidth'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setColumnWidth(int) setColumnWidth(int)]]`
   */
  @inline def columnWidth  (p: Int) =            columnWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setColumnWidth(int) setColumnWidth(int)]]`
   */
  @inline def columnWidth_=(p: Int) = { basis.setColumnWidth(p); basis }


  @inline def gravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'gravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity  (p: Int) =            gravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity_=(p: Int) = { basis.setGravity(p); basis }


  @inline def horizontalSpacing(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'horizontalSpacing'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setHorizontalSpacing(int) setHorizontalSpacing(int)]]`
   */
  @inline def horizontalSpacing  (p: Int) =            horizontalSpacing_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setHorizontalSpacing(int) setHorizontalSpacing(int)]]`
   */
  @inline def horizontalSpacing_=(p: Int) = { basis.setHorizontalSpacing(p); basis }


  @inline def numColumns(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'numColumns'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setNumColumns(int) setNumColumns(int)]]`
   */
  @inline def numColumns  (p: Int) =            numColumns_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setNumColumns(int) setNumColumns(int)]]`
   */
  @inline def numColumns_=(p: Int) = { basis.setNumColumns(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#getStretchMode() getStretchMode()]]`
   */
  @inline def stretchMode = basis.getStretchMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setStretchMode(int) setStretchMode(int)]]`
   */
  @inline def stretchMode  (p: Int) =            stretchMode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setStretchMode(int) setStretchMode(int)]]`
   */
  @inline def stretchMode_=(p: Int) = { basis.setStretchMode(p); basis }


  @inline def verticalSpacing(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'verticalSpacing'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setVerticalSpacing(int) setVerticalSpacing(int)]]`
   */
  @inline def verticalSpacing  (p: Int) =            verticalSpacing_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/GridView.html#setVerticalSpacing(int) setVerticalSpacing(int)]]`
   */
  @inline def verticalSpacing_=(p: Int) = { basis.setVerticalSpacing(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/GridView.html android.widget.GridView]]`.
 */
class SGridView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.GridView(context) with TraitGridView[SGridView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SGridView {
  def apply[LP <: ViewGroupLayoutParams[_, SGridView]]()(implicit context: android.content.Context, defaultLayoutParam: SGridView => LP): SGridView = {
    val v = new SGridView
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/RelativeLayout.html android.widget.RelativeLayout]]`.
 */
class RichRelativeLayout[V <: android.widget.RelativeLayout](val basis: V) extends TraitRelativeLayout[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/RelativeLayout.html android.widget.RelativeLayout]]`. This contains several property accessors.
 */
trait TraitRelativeLayout[V <: android.widget.RelativeLayout] extends TraitViewGroup[V] {




  @inline def gravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'gravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity  (p: Int) =            gravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity_=(p: Int) = { basis.setGravity(p); basis }


  @inline def horizontalGravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'horizontalGravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setHorizontalGravity(int) setHorizontalGravity(int)]]`
   */
  @inline def horizontalGravity  (p: Int) =            horizontalGravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setHorizontalGravity(int) setHorizontalGravity(int)]]`
   */
  @inline def horizontalGravity_=(p: Int) = { basis.setHorizontalGravity(p); basis }


  @inline def ignoreGravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'ignoreGravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setIgnoreGravity(int) setIgnoreGravity(int)]]`
   */
  @inline def ignoreGravity  (p: Int) =            ignoreGravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setIgnoreGravity(int) setIgnoreGravity(int)]]`
   */
  @inline def ignoreGravity_=(p: Int) = { basis.setIgnoreGravity(p); basis }


  @inline def verticalGravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'verticalGravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setVerticalGravity(int) setVerticalGravity(int)]]`
   */
  @inline def verticalGravity  (p: Int) =            verticalGravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RelativeLayout.html#setVerticalGravity(int) setVerticalGravity(int)]]`
   */
  @inline def verticalGravity_=(p: Int) = { basis.setVerticalGravity(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/RelativeLayout.html android.widget.RelativeLayout]]`.
 */
class SRelativeLayout()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.RelativeLayout(context) with TraitRelativeLayout[SRelativeLayout] {

  def basis = this
  override val parentViewGroup = parentVGroup
  implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

  class LayoutParams[V <: View](v: V) extends RelativeLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {
    def basis = this

    v.setLayoutParams(this)

    def Gravity(g: Int) = {
      gravity = g
      this
    }

    def above(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.ABOVE, otherView.uniqueId)
      this
    }

    def alignBaseline(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.ALIGN_BASELINE, otherView.uniqueId)
      this
    }

    def alignBottom(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.ALIGN_BOTTOM, otherView.uniqueId)
      this
    }

    //def alignEnd = {
    //  addRule(RelativeLayout.ALIGN_END)
    //  this
    //}

    def alignLeft(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.ALIGN_LEFT, otherView.uniqueId)
      this
    }

    def alignParentBottom = {
      addRule(RelativeLayout.ALIGN_PARENT_BOTTOM)
      this
    }

    //def alignParentEnd = {
    //  addRule(RelativeLayout.ALIGN_PARENT_END)
    //  this
    //}

    def alignParentLeft = {
      addRule(RelativeLayout.ALIGN_PARENT_LEFT)
      this
    }

    def alignParentRight = {
      addRule(RelativeLayout.ALIGN_PARENT_RIGHT)
      this
    }

    //def alignParentStart = {
    //  addRule(RelativeLayout.ALIGN_PARENT_START)
    //  this
    //}

    def alignParentTop = {
      addRule(RelativeLayout.ALIGN_PARENT_TOP)
      this
    }

    def alignRight(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.ALIGN_RIGHT, otherView.uniqueId)
      this
    }

    //def alignStart = {
    //  addRule(RelativeLayout.ALIGN_START)
    //  this
    //}

    def alignTop(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.ALIGN_TOP, otherView.uniqueId)
      this
    }

    def below(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.BELOW, otherView.uniqueId)
      this
    }

    def leftOf(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.LEFT_OF, otherView.uniqueId)
      this
    }

    def rightOf(otherView: View)(implicit activity: Activity) = {
      addRule(RelativeLayout.RIGHT_OF, otherView.uniqueId)
      this
    }

    def centerHorizontal = {
      addRule(RelativeLayout.CENTER_HORIZONTAL)
      this
    }

    def centerInParent = {
      addRule(RelativeLayout.CENTER_IN_PARENT)
      this
    }

    def centerVertical = {
      addRule(RelativeLayout.CENTER_VERTICAL)
      this
    }

    def parent = SRelativeLayout.this

    def >> : V = v

  }
}

object SRelativeLayout {
  def apply[LP <: ViewGroupLayoutParams[_, SRelativeLayout]]()(implicit context: android.content.Context, defaultLayoutParam: SRelativeLayout => LP): SRelativeLayout = {
    val v = new SRelativeLayout
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Chronometer.html android.widget.Chronometer]]`.
 */
class RichChronometer[V <: android.widget.Chronometer](val basis: V) extends TraitChronometer[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Chronometer.html android.widget.Chronometer]]`. This contains several property accessors.
 */
trait TraitChronometer[V <: android.widget.Chronometer] extends TraitTextView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#getBase() getBase()]]`
   */
  @inline def base = basis.getBase

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#setBase(long) setBase(long)]]`
   */
  @inline def base  (p: Long) =            base_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#setBase(long) setBase(long)]]`
   */
  @inline def base_=(p: Long) = { basis.setBase(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#getFormat() getFormat()]]`
   */
  @inline def format = basis.getFormat

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#setFormat(java.lang.String) setFormat(java.lang.String)]]`
   */
  @inline def format  (p: java.lang.String) =            format_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#setFormat(java.lang.String) setFormat(java.lang.String)]]`
   */
  @inline def format_=(p: java.lang.String) = { basis.setFormat(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#getOnChronometerTickListener() getOnChronometerTickListener()]]`
   */
  @inline def onChronometerTickListener = basis.getOnChronometerTickListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener) setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener)]]`
   */
  @inline def onChronometerTickListener  (p: android.widget.Chronometer.OnChronometerTickListener) =            onChronometerTickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Chronometer.html#setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener) setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener)]]`
   */
  @inline def onChronometerTickListener_=(p: android.widget.Chronometer.OnChronometerTickListener) = { basis.setOnChronometerTickListener(p); basis }


  @inline def onChronometerTick[U](f: android.widget.Chronometer => U): V = {
    basis.setOnChronometerTickListener(new android.widget.Chronometer.OnChronometerTickListener {
      def onChronometerTick(p: android.widget.Chronometer): Unit = { f(p) }
    })
    basis
  }

  @inline def onChronometerTick[U](f:  => U): V = {
    basis.setOnChronometerTickListener(new android.widget.Chronometer.OnChronometerTickListener {
      def onChronometerTick(p: android.widget.Chronometer): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/Chronometer.html android.widget.Chronometer]]`.
 */
class SChronometer()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.Chronometer(context) with TraitChronometer[SChronometer] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SChronometer {
  def apply[LP <: ViewGroupLayoutParams[_, SChronometer]]()(implicit context: android.content.Context, defaultLayoutParam: SChronometer => LP): SChronometer = {
    val v = new SChronometer
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SChronometer]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SChronometer) => LP): SChronometer =  {
    val v = new SChronometer
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SChronometer]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SChronometer) => LP): SChronometer = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SChronometer]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SChronometer) => LP): SChronometer = {
    val v = new SChronometer
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Filterable.html android.widget.Filterable]]`.
 */
class RichFilterable[V <: android.widget.Filterable](val basis: V) extends TraitFilterable[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Filterable.html android.widget.Filterable]]`. This contains several property accessors.
 */
trait TraitFilterable[V <: android.widget.Filterable] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Filterable.html#getFilter() getFilter()]]`
   */
  @inline def filter = basis.getFilter


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/CheckedTextView.html android.widget.CheckedTextView]]`.
 */
class RichCheckedTextView[V <: android.widget.CheckedTextView](val basis: V) extends TraitCheckedTextView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/CheckedTextView.html android.widget.CheckedTextView]]`. This contains several property accessors.
 */
trait TraitCheckedTextView[V <: android.widget.CheckedTextView] extends TraitTextView[V] {




  @inline def checkMarkDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'checkMarkDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#setCheckMarkDrawable(int) setCheckMarkDrawable(int)]]`
   */
  @inline def checkMarkDrawable  (p: Int) =            checkMarkDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#setCheckMarkDrawable(int) setCheckMarkDrawable(int)]]`
   */
  @inline def checkMarkDrawable_=(p: Int) = { basis.setCheckMarkDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#setCheckMarkDrawable(android.graphics.drawable.Drawable) setCheckMarkDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def checkMarkDrawable  (p: android.graphics.drawable.Drawable) =            checkMarkDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#setCheckMarkDrawable(android.graphics.drawable.Drawable) setCheckMarkDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def checkMarkDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setCheckMarkDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#isChecked() isChecked()]]`
   */
  @inline def checked = basis.isChecked

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#setChecked(boolean) setChecked(boolean)]]`
   */
  @inline def checked  (p: Boolean) =            checked_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CheckedTextView.html#setChecked(boolean) setChecked(boolean)]]`
   */
  @inline def checked_=(p: Boolean) = { basis.setChecked(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/CheckedTextView.html android.widget.CheckedTextView]]`.
 */
class SCheckedTextView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.CheckedTextView(context) with TraitCheckedTextView[SCheckedTextView] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SCheckedTextView {
  def apply[LP <: ViewGroupLayoutParams[_, SCheckedTextView]]()(implicit context: android.content.Context, defaultLayoutParam: SCheckedTextView => LP): SCheckedTextView = {
    val v = new SCheckedTextView
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SCheckedTextView]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SCheckedTextView) => LP): SCheckedTextView =  {
    val v = new SCheckedTextView
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SCheckedTextView]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SCheckedTextView) => LP): SCheckedTextView = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SCheckedTextView]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SCheckedTextView) => LP): SCheckedTextView = {
    val v = new SCheckedTextView
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SectionIndexer.html android.widget.SectionIndexer]]`.
 */
class RichSectionIndexer[V <: android.widget.SectionIndexer](val basis: V) extends TraitSectionIndexer[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SectionIndexer.html android.widget.SectionIndexer]]`. This contains several property accessors.
 */
trait TraitSectionIndexer[V <: android.widget.SectionIndexer] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SectionIndexer.html#getSections() getSections()]]`
   */
  @inline def sections = basis.getSections


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TwoLineListItem.html android.widget.TwoLineListItem]]`.
 */
class RichTwoLineListItem[V <: android.widget.TwoLineListItem](val basis: V) extends TraitTwoLineListItem[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TwoLineListItem.html android.widget.TwoLineListItem]]`. This contains several property accessors.
 */
trait TraitTwoLineListItem[V <: android.widget.TwoLineListItem] extends TraitRelativeLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TwoLineListItem.html#getText1() getText1()]]`
   */
  @inline def text1 = basis.getText1


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TwoLineListItem.html#getText2() getText2()]]`
   */
  @inline def text2 = basis.getText2


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TwoLineListItem.html android.widget.TwoLineListItem]]`.
 */
class STwoLineListItem()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TwoLineListItem(context) with TraitTwoLineListItem[STwoLineListItem] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object STwoLineListItem {
  def apply[LP <: ViewGroupLayoutParams[_, STwoLineListItem]]()(implicit context: android.content.Context, defaultLayoutParam: STwoLineListItem => LP): STwoLineListItem = {
    val v = new STwoLineListItem
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html android.widget.HeaderViewListAdapter]]`.
 */
class RichHeaderViewListAdapter[V <: android.widget.HeaderViewListAdapter](val basis: V) extends TraitHeaderViewListAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html android.widget.HeaderViewListAdapter]]`. This contains several property accessors.
 */
trait TraitHeaderViewListAdapter[V <: android.widget.HeaderViewListAdapter] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html#getCount() getCount()]]`
   */
  @inline def count = basis.getCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html#getFilter() getFilter()]]`
   */
  @inline def filter = basis.getFilter


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html#getFootersCount() getFootersCount()]]`
   */
  @inline def footersCount = basis.getFootersCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html#getHeadersCount() getHeadersCount()]]`
   */
  @inline def headersCount = basis.getHeadersCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html#getViewTypeCount() getViewTypeCount()]]`
   */
  @inline def viewTypeCount = basis.getViewTypeCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html#getWrappedAdapter() getWrappedAdapter()]]`
   */
  @inline def wrappedAdapter = basis.getWrappedAdapter


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html android.widget.ImageSwitcher]]`.
 */
class RichImageSwitcher[V <: android.widget.ImageSwitcher](val basis: V) extends TraitImageSwitcher[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html android.widget.ImageSwitcher]]`. This contains several property accessors.
 */
trait TraitImageSwitcher[V <: android.widget.ImageSwitcher] extends TraitViewSwitcher[V] {




  @inline def imageDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html#setImageDrawable(android.graphics.drawable.Drawable) setImageDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def imageDrawable  (p: android.graphics.drawable.Drawable) =            imageDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html#setImageDrawable(android.graphics.drawable.Drawable) setImageDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def imageDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setImageDrawable(p); basis }


  @inline def imageResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html#setImageResource(int) setImageResource(int)]]`
   */
  @inline def imageResource  (p: Int) =            imageResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html#setImageResource(int) setImageResource(int)]]`
   */
  @inline def imageResource_=(p: Int) = { basis.setImageResource(p); basis }


  @inline def imageURI(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'imageURI'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html#setImageURI(android.net.Uri) setImageURI(android.net.Uri)]]`
   */
  @inline def imageURI  (p: android.net.Uri) =            imageURI_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html#setImageURI(android.net.Uri) setImageURI(android.net.Uri)]]`
   */
  @inline def imageURI_=(p: android.net.Uri) = { basis.setImageURI(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ImageSwitcher.html android.widget.ImageSwitcher]]`.
 */
class SImageSwitcher()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ImageSwitcher(context) with TraitImageSwitcher[SImageSwitcher] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SImageSwitcher {
  def apply[LP <: ViewGroupLayoutParams[_, SImageSwitcher]]()(implicit context: android.content.Context, defaultLayoutParam: SImageSwitcher => LP): SImageSwitcher = {
    val v = new SImageSwitcher
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TimePicker.html android.widget.TimePicker]]`.
 */
class RichTimePicker[V <: android.widget.TimePicker](val basis: V) extends TraitTimePicker[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TimePicker.html android.widget.TimePicker]]`. This contains several property accessors.
 */
trait TraitTimePicker[V <: android.widget.TimePicker] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#getCurrentHour() getCurrentHour()]]`
   */
  @inline def currentHour = basis.getCurrentHour

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setCurrentHour(java.lang.Integer) setCurrentHour(java.lang.Integer)]]`
   */
  @inline def currentHour  (p: java.lang.Integer) =            currentHour_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setCurrentHour(java.lang.Integer) setCurrentHour(java.lang.Integer)]]`
   */
  @inline def currentHour_=(p: java.lang.Integer) = { basis.setCurrentHour(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#getCurrentMinute() getCurrentMinute()]]`
   */
  @inline def currentMinute = basis.getCurrentMinute

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setCurrentMinute(java.lang.Integer) setCurrentMinute(java.lang.Integer)]]`
   */
  @inline def currentMinute  (p: java.lang.Integer) =            currentMinute_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setCurrentMinute(java.lang.Integer) setCurrentMinute(java.lang.Integer)]]`
   */
  @inline def currentMinute_=(p: java.lang.Integer) = { basis.setCurrentMinute(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setIs24HourView(java.lang.Boolean) setIs24HourView(java.lang.Boolean)]]`
   */
  @inline def is24HourView  (p: java.lang.Boolean) =            is24HourView_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setIs24HourView(java.lang.Boolean) setIs24HourView(java.lang.Boolean)]]`
   */
  @inline def is24HourView_=(p: java.lang.Boolean) = { basis.setIs24HourView(p); basis }


  @inline def onTimeChangedListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onTimeChangedListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener) setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener)]]`
   */
  @inline def onTimeChangedListener  (p: android.widget.TimePicker.OnTimeChangedListener) =            onTimeChangedListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TimePicker.html#setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener) setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener)]]`
   */
  @inline def onTimeChangedListener_=(p: android.widget.TimePicker.OnTimeChangedListener) = { basis.setOnTimeChangedListener(p); basis }


  @inline def onTimeChanged[U](f: (android.widget.TimePicker, Int, Int) => U): V = {
    basis.setOnTimeChangedListener(new android.widget.TimePicker.OnTimeChangedListener {
      def onTimeChanged(p1: android.widget.TimePicker, p2: Int, p3: Int): Unit = { f(p1, p2, p3) }
    })
    basis
  }

  @inline def onTimeChanged[U](f:  => U): V = {
    basis.setOnTimeChangedListener(new android.widget.TimePicker.OnTimeChangedListener {
      def onTimeChanged(p1: android.widget.TimePicker, p2: Int, p3: Int): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TimePicker.html android.widget.TimePicker]]`.
 */
class STimePicker()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TimePicker(context) with TraitTimePicker[STimePicker] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object STimePicker {
  def apply[LP <: ViewGroupLayoutParams[_, STimePicker]]()(implicit context: android.content.Context, defaultLayoutParam: STimePicker => LP): STimePicker = {
    val v = new STimePicker
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ExpandableListView.html android.widget.ExpandableListView]]`.
 */
class RichExpandableListView[V <: android.widget.ExpandableListView](val basis: V) extends TraitExpandableListView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ExpandableListView.html android.widget.ExpandableListView]]`. This contains several property accessors.
 */
trait TraitExpandableListView[V <: android.widget.ExpandableListView] extends TraitListView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setAdapter(android.widget.ExpandableListAdapter) setAdapter(android.widget.ExpandableListAdapter)]]`
   */
  @inline def adapter  (p: android.widget.ExpandableListAdapter) =            adapter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setAdapter(android.widget.ExpandableListAdapter) setAdapter(android.widget.ExpandableListAdapter)]]`
   */
  @inline def adapter_=(p: android.widget.ExpandableListAdapter) = { basis.setAdapter(p); basis }


  @inline def childDivider(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'childDivider'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildDivider(android.graphics.drawable.Drawable) setChildDivider(android.graphics.drawable.Drawable)]]`
   */
  @inline def childDivider  (p: android.graphics.drawable.Drawable) =            childDivider_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildDivider(android.graphics.drawable.Drawable) setChildDivider(android.graphics.drawable.Drawable)]]`
   */
  @inline def childDivider_=(p: android.graphics.drawable.Drawable) = { basis.setChildDivider(p); basis }


  @inline def childIndicator(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'childIndicator'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicator(android.graphics.drawable.Drawable) setChildIndicator(android.graphics.drawable.Drawable)]]`
   */
  @inline def childIndicator  (p: android.graphics.drawable.Drawable) =            childIndicator_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicator(android.graphics.drawable.Drawable) setChildIndicator(android.graphics.drawable.Drawable)]]`
   */
  @inline def childIndicator_=(p: android.graphics.drawable.Drawable) = { basis.setChildIndicator(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#getExpandableListAdapter() getExpandableListAdapter()]]`
   */
  @inline def expandableListAdapter = basis.getExpandableListAdapter


  @inline def groupIndicator(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'groupIndicator'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setGroupIndicator(android.graphics.drawable.Drawable) setGroupIndicator(android.graphics.drawable.Drawable)]]`
   */
  @inline def groupIndicator  (p: android.graphics.drawable.Drawable) =            groupIndicator_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setGroupIndicator(android.graphics.drawable.Drawable) setGroupIndicator(android.graphics.drawable.Drawable)]]`
   */
  @inline def groupIndicator_=(p: android.graphics.drawable.Drawable) = { basis.setGroupIndicator(p); basis }


  @inline def onChildClickListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onChildClickListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener) setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener)]]`
   */
  @inline def onChildClickListener  (p: android.widget.ExpandableListView.OnChildClickListener) =            onChildClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener) setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener)]]`
   */
  @inline def onChildClickListener_=(p: android.widget.ExpandableListView.OnChildClickListener) = { basis.setOnChildClickListener(p); basis }


  @inline def onGroupClickListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onGroupClickListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener) setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener)]]`
   */
  @inline def onGroupClickListener  (p: android.widget.ExpandableListView.OnGroupClickListener) =            onGroupClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener) setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener)]]`
   */
  @inline def onGroupClickListener_=(p: android.widget.ExpandableListView.OnGroupClickListener) = { basis.setOnGroupClickListener(p); basis }


  @inline def onGroupCollapseListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onGroupCollapseListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener) setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener)]]`
   */
  @inline def onGroupCollapseListener  (p: android.widget.ExpandableListView.OnGroupCollapseListener) =            onGroupCollapseListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener) setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener)]]`
   */
  @inline def onGroupCollapseListener_=(p: android.widget.ExpandableListView.OnGroupCollapseListener) = { basis.setOnGroupCollapseListener(p); basis }


  @inline def onGroupExpandListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onGroupExpandListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener) setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener)]]`
   */
  @inline def onGroupExpandListener  (p: android.widget.ExpandableListView.OnGroupExpandListener) =            onGroupExpandListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener) setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener)]]`
   */
  @inline def onGroupExpandListener_=(p: android.widget.ExpandableListView.OnGroupExpandListener) = { basis.setOnGroupExpandListener(p); basis }


  @inline def selectedGroup(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'selectedGroup'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setSelectedGroup(int) setSelectedGroup(int)]]`
   */
  @inline def selectedGroup  (p: Int) =            selectedGroup_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#setSelectedGroup(int) setSelectedGroup(int)]]`
   */
  @inline def selectedGroup_=(p: Int) = { basis.setSelectedGroup(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#getSelectedId() getSelectedId()]]`
   */
  @inline def selectedId = basis.getSelectedId


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ExpandableListView.html#getSelectedPosition() getSelectedPosition()]]`
   */
  @inline def selectedPosition = basis.getSelectedPosition


  @inline def onChildClick(f: (android.widget.ExpandableListView, android.view.View, Int, Int, Long) => Boolean): V = {
    basis.setOnChildClickListener(new android.widget.ExpandableListView.OnChildClickListener {
      def onChildClick(p1: android.widget.ExpandableListView, p2: android.view.View, p3: Int, p4: Int, p5: Long): Boolean = { f(p1, p2, p3, p4, p5) }
    })
    basis
  }

  @inline def onChildClick(f:  => Boolean): V = {
    basis.setOnChildClickListener(new android.widget.ExpandableListView.OnChildClickListener {
      def onChildClick(p1: android.widget.ExpandableListView, p2: android.view.View, p3: Int, p4: Int, p5: Long): Boolean = { f }
    })
    basis
  }

  @inline def onGroupClick(f: (android.widget.ExpandableListView, android.view.View, Int, Long) => Boolean): V = {
    basis.setOnGroupClickListener(new android.widget.ExpandableListView.OnGroupClickListener {
      def onGroupClick(p1: android.widget.ExpandableListView, p2: android.view.View, p3: Int, p4: Long): Boolean = { f(p1, p2, p3, p4) }
    })
    basis
  }

  @inline def onGroupClick(f:  => Boolean): V = {
    basis.setOnGroupClickListener(new android.widget.ExpandableListView.OnGroupClickListener {
      def onGroupClick(p1: android.widget.ExpandableListView, p2: android.view.View, p3: Int, p4: Long): Boolean = { f }
    })
    basis
  }

  @inline def onGroupCollapse[U](f: Int => U): V = {
    basis.setOnGroupCollapseListener(new android.widget.ExpandableListView.OnGroupCollapseListener {
      def onGroupCollapse(p: Int): Unit = { f(p) }
    })
    basis
  }

  @inline def onGroupCollapse[U](f:  => U): V = {
    basis.setOnGroupCollapseListener(new android.widget.ExpandableListView.OnGroupCollapseListener {
      def onGroupCollapse(p: Int): Unit = { f }
    })
    basis
  }

  @inline def onGroupExpand[U](f: Int => U): V = {
    basis.setOnGroupExpandListener(new android.widget.ExpandableListView.OnGroupExpandListener {
      def onGroupExpand(p: Int): Unit = { f(p) }
    })
    basis
  }

  @inline def onGroupExpand[U](f:  => U): V = {
    basis.setOnGroupExpandListener(new android.widget.ExpandableListView.OnGroupExpandListener {
      def onGroupExpand(p: Int): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ExpandableListView.html android.widget.ExpandableListView]]`.
 */
class SExpandableListView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ExpandableListView(context) with TraitExpandableListView[SExpandableListView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SExpandableListView {
  def apply[LP <: ViewGroupLayoutParams[_, SExpandableListView]]()(implicit context: android.content.Context, defaultLayoutParam: SExpandableListView => LP): SExpandableListView = {
    val v = new SExpandableListView
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AbsListView.html android.widget.AbsListView]]`.
 */
class RichAbsListView[V <: android.widget.AbsListView](val basis: V) extends TraitAbsListView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AbsListView.html android.widget.AbsListView]]`. This contains several property accessors.
 */
trait TraitAbsListView[V <: android.widget.AbsListView] extends TraitAdapterView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getCacheColorHint() getCacheColorHint()]]`
   */
  @inline def cacheColorHint = basis.getCacheColorHint

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setCacheColorHint(int) setCacheColorHint(int)]]`
   */
  @inline def cacheColorHint  (p: Int) =            cacheColorHint_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setCacheColorHint(int) setCacheColorHint(int)]]`
   */
  @inline def cacheColorHint_=(p: Int) = { basis.setCacheColorHint(p); basis }


  @inline def drawSelectorOnTop(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'drawSelectorOnTop'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setDrawSelectorOnTop(boolean) setDrawSelectorOnTop(boolean)]]`
   */
  @inline def drawSelectorOnTop  (p: Boolean) =            drawSelectorOnTop_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setDrawSelectorOnTop(boolean) setDrawSelectorOnTop(boolean)]]`
   */
  @inline def drawSelectorOnTop_=(p: Boolean) = { basis.setDrawSelectorOnTop(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#isFastScrollEnabled() isFastScrollEnabled()]]`
   */
  @inline def fastScrollEnabled = basis.isFastScrollEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setFastScrollEnabled(boolean) setFastScrollEnabled(boolean)]]`
   */
  @inline def fastScrollEnabled  (p: Boolean) =            fastScrollEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setFastScrollEnabled(boolean) setFastScrollEnabled(boolean)]]`
   */
  @inline def fastScrollEnabled_=(p: Boolean) = { basis.setFastScrollEnabled(p); basis }

  @inline def  enableFastScroll()             = { basis.setFastScrollEnabled(true ); basis }
  @inline def disableFastScroll()             = { basis.setFastScrollEnabled(false); basis }


  @inline def filterText(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'filterText'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setFilterText(java.lang.String) setFilterText(java.lang.String)]]`
   */
  @inline def filterText  (p: java.lang.String) =            filterText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setFilterText(java.lang.String) setFilterText(java.lang.String)]]`
   */
  @inline def filterText_=(p: java.lang.String) = { basis.setFilterText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingBottom() getListPaddingBottom()]]`
   */
  @inline def listPaddingBottom = basis.getListPaddingBottom


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingLeft() getListPaddingLeft()]]`
   */
  @inline def listPaddingLeft = basis.getListPaddingLeft


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingRight() getListPaddingRight()]]`
   */
  @inline def listPaddingRight = basis.getListPaddingRight


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingTop() getListPaddingTop()]]`
   */
  @inline def listPaddingTop = basis.getListPaddingTop


  @inline def onScrollListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onScrollListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setOnScrollListener(android.widget.AbsListView.OnScrollListener) setOnScrollListener(android.widget.AbsListView.OnScrollListener)]]`
   */
  @inline def onScrollListener  (p: android.widget.AbsListView.OnScrollListener) =            onScrollListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setOnScrollListener(android.widget.AbsListView.OnScrollListener) setOnScrollListener(android.widget.AbsListView.OnScrollListener)]]`
   */
  @inline def onScrollListener_=(p: android.widget.AbsListView.OnScrollListener) = { basis.setOnScrollListener(p); basis }


  @inline def recyclerListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'recyclerListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setRecyclerListener(android.widget.AbsListView.RecyclerListener) setRecyclerListener(android.widget.AbsListView.RecyclerListener)]]`
   */
  @inline def recyclerListener  (p: android.widget.AbsListView.RecyclerListener) =            recyclerListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setRecyclerListener(android.widget.AbsListView.RecyclerListener) setRecyclerListener(android.widget.AbsListView.RecyclerListener)]]`
   */
  @inline def recyclerListener_=(p: android.widget.AbsListView.RecyclerListener) = { basis.setRecyclerListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#isScrollingCacheEnabled() isScrollingCacheEnabled()]]`
   */
  @inline def scrollingCacheEnabled = basis.isScrollingCacheEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setScrollingCacheEnabled(boolean) setScrollingCacheEnabled(boolean)]]`
   */
  @inline def scrollingCacheEnabled  (p: Boolean) =            scrollingCacheEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setScrollingCacheEnabled(boolean) setScrollingCacheEnabled(boolean)]]`
   */
  @inline def scrollingCacheEnabled_=(p: Boolean) = { basis.setScrollingCacheEnabled(p); basis }

  @inline def  enableScrollingCache()             = { basis.setScrollingCacheEnabled(true ); basis }
  @inline def disableScrollingCache()             = { basis.setScrollingCacheEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getSelector() getSelector()]]`
   */
  @inline def selector = basis.getSelector

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setSelector(int) setSelector(int)]]`
   */
  @inline def selector  (p: Int) =            selector_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setSelector(int) setSelector(int)]]`
   */
  @inline def selector_=(p: Int) = { basis.setSelector(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setSelector(android.graphics.drawable.Drawable) setSelector(android.graphics.drawable.Drawable)]]`
   */
  @inline def selector  (p: android.graphics.drawable.Drawable) =            selector_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setSelector(android.graphics.drawable.Drawable) setSelector(android.graphics.drawable.Drawable)]]`
   */
  @inline def selector_=(p: android.graphics.drawable.Drawable) = { basis.setSelector(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#isSmoothScrollbarEnabled() isSmoothScrollbarEnabled()]]`
   */
  @inline def smoothScrollbarEnabled = basis.isSmoothScrollbarEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setSmoothScrollbarEnabled(boolean) setSmoothScrollbarEnabled(boolean)]]`
   */
  @inline def smoothScrollbarEnabled  (p: Boolean) =            smoothScrollbarEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setSmoothScrollbarEnabled(boolean) setSmoothScrollbarEnabled(boolean)]]`
   */
  @inline def smoothScrollbarEnabled_=(p: Boolean) = { basis.setSmoothScrollbarEnabled(p); basis }

  @inline def  enableSmoothScrollbar()             = { basis.setSmoothScrollbarEnabled(true ); basis }
  @inline def disableSmoothScrollbar()             = { basis.setSmoothScrollbarEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#isStackFromBottom() isStackFromBottom()]]`
   */
  @inline def stackFromBottom = basis.isStackFromBottom

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setStackFromBottom(boolean) setStackFromBottom(boolean)]]`
   */
  @inline def stackFromBottom  (p: Boolean) =            stackFromBottom_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setStackFromBottom(boolean) setStackFromBottom(boolean)]]`
   */
  @inline def stackFromBottom_=(p: Boolean) = { basis.setStackFromBottom(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getTextFilter() getTextFilter()]]`
   */
  @inline def textFilter = basis.getTextFilter


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#isTextFilterEnabled() isTextFilterEnabled()]]`
   */
  @inline def textFilterEnabled = basis.isTextFilterEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setTextFilterEnabled(boolean) setTextFilterEnabled(boolean)]]`
   */
  @inline def textFilterEnabled  (p: Boolean) =            textFilterEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setTextFilterEnabled(boolean) setTextFilterEnabled(boolean)]]`
   */
  @inline def textFilterEnabled_=(p: Boolean) = { basis.setTextFilterEnabled(p); basis }

  @inline def  enableTextFilter()             = { basis.setTextFilterEnabled(true ); basis }
  @inline def disableTextFilter()             = { basis.setTextFilterEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#getTranscriptMode() getTranscriptMode()]]`
   */
  @inline def transcriptMode = basis.getTranscriptMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setTranscriptMode(int) setTranscriptMode(int)]]`
   */
  @inline def transcriptMode  (p: Int) =            transcriptMode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsListView.html#setTranscriptMode(int) setTranscriptMode(int)]]`
   */
  @inline def transcriptMode_=(p: Int) = { basis.setTranscriptMode(p); basis }


  @inline def onMovedToScrapHeap[U](f: android.view.View => U): V = {
    basis.setRecyclerListener(new android.widget.AbsListView.RecyclerListener {
      def onMovedToScrapHeap(p: android.view.View): Unit = { f(p) }
    })
    basis
  }

  @inline def onMovedToScrapHeap[U](f:  => U): V = {
    basis.setRecyclerListener(new android.widget.AbsListView.RecyclerListener {
      def onMovedToScrapHeap(p: android.view.View): Unit = { f }
    })
    basis
  }

  @inline def onScroll[U](f: (android.widget.AbsListView, Int, Int, Int) => U): V = {
    basis.setOnScrollListener(new android.widget.AbsListView.OnScrollListener {
      def onScroll(p1: android.widget.AbsListView, p2: Int, p3: Int, p4: Int): Unit = { f(p1, p2, p3, p4) }
      def onScrollStateChanged(p1: android.widget.AbsListView, p2: Int): Unit = {  }
    })
    basis
  }

  @inline def onScroll[U](f:  => U): V = {
    basis.setOnScrollListener(new android.widget.AbsListView.OnScrollListener {
      def onScroll(p1: android.widget.AbsListView, p2: Int, p3: Int, p4: Int): Unit = { f }
      def onScrollStateChanged(p1: android.widget.AbsListView, p2: Int): Unit = {  }
    })
    basis
  }

  @inline def onScrollStateChanged[U](f: (android.widget.AbsListView, Int) => U): V = {
    basis.setOnScrollListener(new android.widget.AbsListView.OnScrollListener {
      def onScroll(p1: android.widget.AbsListView, p2: Int, p3: Int, p4: Int): Unit = {  }
      def onScrollStateChanged(p1: android.widget.AbsListView, p2: Int): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onScrollStateChanged[U](f:  => U): V = {
    basis.setOnScrollListener(new android.widget.AbsListView.OnScrollListener {
      def onScroll(p1: android.widget.AbsListView, p2: Int, p3: Int, p4: Int): Unit = {  }
      def onScrollStateChanged(p1: android.widget.AbsListView, p2: Int): Unit = { f }
    })
    basis
  }
}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AbsSpinner.html android.widget.AbsSpinner]]`.
 */
class RichAbsSpinner[V <: android.widget.AbsSpinner](val basis: V) extends TraitAbsSpinner[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AbsSpinner.html android.widget.AbsSpinner]]`. This contains several property accessors.
 */
trait TraitAbsSpinner[V <: android.widget.AbsSpinner] extends TraitAdapterView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSpinner.html#getAdapter() getAdapter()]]`
   */
  @inline override def adapter = basis.getAdapter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSpinner.html#setAdapter(android.widget.SpinnerAdapter) setAdapter(android.widget.SpinnerAdapter)]]`
   */
  @inline def adapter  (p: android.widget.SpinnerAdapter) =            adapter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AbsSpinner.html#setAdapter(android.widget.SpinnerAdapter) setAdapter(android.widget.SpinnerAdapter)]]`
   */
  @inline def adapter_=(p: android.widget.SpinnerAdapter) = { basis.setAdapter(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SeekBar.html android.widget.SeekBar]]`.
 */
class RichSeekBar[V <: android.widget.SeekBar](val basis: V) extends TraitSeekBar[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SeekBar.html android.widget.SeekBar]]`. This contains several property accessors.
 */
trait TraitSeekBar[V <: android.widget.SeekBar] extends TraitAbsSeekBar[V] {




  @inline def onSeekBarChangeListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onSeekBarChangeListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SeekBar.html#setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener) setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener)]]`
   */
  @inline def onSeekBarChangeListener  (p: android.widget.SeekBar.OnSeekBarChangeListener) =            onSeekBarChangeListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SeekBar.html#setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener) setOnSeekBarChangeListener(android.widget.SeekBar.OnSeekBarChangeListener)]]`
   */
  @inline def onSeekBarChangeListener_=(p: android.widget.SeekBar.OnSeekBarChangeListener) = { basis.setOnSeekBarChangeListener(p); basis }


  @inline def onProgressChanged[U](f: (android.widget.SeekBar, Int, Boolean) => U): V = {
    basis.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener {
      def onProgressChanged(p1: android.widget.SeekBar, p2: Int, p3: Boolean): Unit = { f(p1, p2, p3) }
      def onStartTrackingTouch(p: android.widget.SeekBar): Unit = {  }
      def onStopTrackingTouch(p: android.widget.SeekBar): Unit = {  }
    })
    basis
  }

  @inline def onProgressChanged[U](f:  => U): V = {
    basis.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener {
      def onProgressChanged(p1: android.widget.SeekBar, p2: Int, p3: Boolean): Unit = { f }
      def onStartTrackingTouch(p: android.widget.SeekBar): Unit = {  }
      def onStopTrackingTouch(p: android.widget.SeekBar): Unit = {  }
    })
    basis
  }

  @inline def onStartTrackingTouch[U](f: android.widget.SeekBar => U): V = {
    basis.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener {
      def onProgressChanged(p1: android.widget.SeekBar, p2: Int, p3: Boolean): Unit = {  }
      def onStartTrackingTouch(p: android.widget.SeekBar): Unit = { f(p) }
      def onStopTrackingTouch(p: android.widget.SeekBar): Unit = {  }
    })
    basis
  }

  @inline def onStartTrackingTouch[U](f:  => U): V = {
    basis.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener {
      def onProgressChanged(p1: android.widget.SeekBar, p2: Int, p3: Boolean): Unit = {  }
      def onStartTrackingTouch(p: android.widget.SeekBar): Unit = { f }
      def onStopTrackingTouch(p: android.widget.SeekBar): Unit = {  }
    })
    basis
  }

  @inline def onStopTrackingTouch[U](f: android.widget.SeekBar => U): V = {
    basis.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener {
      def onProgressChanged(p1: android.widget.SeekBar, p2: Int, p3: Boolean): Unit = {  }
      def onStartTrackingTouch(p: android.widget.SeekBar): Unit = {  }
      def onStopTrackingTouch(p: android.widget.SeekBar): Unit = { f(p) }
    })
    basis
  }

  @inline def onStopTrackingTouch[U](f:  => U): V = {
    basis.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener {
      def onProgressChanged(p1: android.widget.SeekBar, p2: Int, p3: Boolean): Unit = {  }
      def onStartTrackingTouch(p: android.widget.SeekBar): Unit = {  }
      def onStopTrackingTouch(p: android.widget.SeekBar): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/SeekBar.html android.widget.SeekBar]]`.
 */
class SSeekBar()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.SeekBar(context) with TraitSeekBar[SSeekBar] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SSeekBar {
  def apply[LP <: ViewGroupLayoutParams[_, SSeekBar]]()(implicit context: android.content.Context, defaultLayoutParam: SSeekBar => LP): SSeekBar = {
    val v = new SSeekBar
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Toast.html android.widget.Toast]]`.
 */
class RichToast[V <: android.widget.Toast](val basis: V) extends TraitToast[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Toast.html android.widget.Toast]]`. This contains several property accessors.
 */
trait TraitToast[V <: android.widget.Toast] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getDuration() getDuration()]]`
   */
  @inline def duration = basis.getDuration

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setDuration(int) setDuration(int)]]`
   */
  @inline def duration  (p: Int) =            duration_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setDuration(int) setDuration(int)]]`
   */
  @inline def duration_=(p: Int) = { basis.setDuration(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getGravity() getGravity()]]`
   */
  @inline def gravity = basis.getGravity


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getHorizontalMargin() getHorizontalMargin()]]`
   */
  @inline def horizontalMargin = basis.getHorizontalMargin


  @inline def text(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'text'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setText(int) setText(int)]]`
   */
  @inline def text  (p: Int) =            text_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setText(int) setText(int)]]`
   */
  @inline def text_=(p: Int) = { basis.setText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setText(java.lang.CharSequence) setText(java.lang.CharSequence)]]`
   */
  @inline def text  (p: java.lang.CharSequence) =            text_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setText(java.lang.CharSequence) setText(java.lang.CharSequence)]]`
   */
  @inline def text_=(p: java.lang.CharSequence) = { basis.setText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getVerticalMargin() getVerticalMargin()]]`
   */
  @inline def verticalMargin = basis.getVerticalMargin


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getView() getView()]]`
   */
  @inline def view = basis.getView

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setView(android.view.View) setView(android.view.View)]]`
   */
  @inline def view  (p: android.view.View) =            view_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#setView(android.view.View) setView(android.view.View)]]`
   */
  @inline def view_=(p: android.view.View) = { basis.setView(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getXOffset() getXOffset()]]`
   */
  @inline def xOffset = basis.getXOffset


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Toast.html#getYOffset() getYOffset()]]`
   */
  @inline def yOffset = basis.getYOffset


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/Toast.html android.widget.Toast]]`.
 */
class SToast()(implicit context: android.content.Context)
    extends android.widget.Toast(context) with TraitToast[SToast] {

  def basis = this

}

object SToast {
  def apply()(implicit context: android.content.Context): SToast = {
    val v = new SToast
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ListAdapter.html android.widget.ListAdapter]]`.
 */
class RichListAdapter[V <: android.widget.ListAdapter](val basis: V) extends TraitListAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ListAdapter.html android.widget.ListAdapter]]`. This contains several property accessors.
 */
trait TraitListAdapter[V <: android.widget.ListAdapter] {

  def basis: V



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html android.widget.ZoomButtonsController]]`.
 */
class RichZoomButtonsController[V <: android.widget.ZoomButtonsController](val basis: V) extends TraitZoomButtonsController[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html android.widget.ZoomButtonsController]]`. This contains several property accessors.
 */
trait TraitZoomButtonsController[V <: android.widget.ZoomButtonsController] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#isAutoDismissed() isAutoDismissed()]]`
   */
  @inline def autoDismissed = basis.isAutoDismissed

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setAutoDismissed(boolean) setAutoDismissed(boolean)]]`
   */
  @inline def autoDismissed  (p: Boolean) =            autoDismissed_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setAutoDismissed(boolean) setAutoDismissed(boolean)]]`
   */
  @inline def autoDismissed_=(p: Boolean) = { basis.setAutoDismissed(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#getContainer() getContainer()]]`
   */
  @inline def container = basis.getContainer


  @inline def focusable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'focusable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setFocusable(boolean) setFocusable(boolean)]]`
   */
  @inline def focusable  (p: Boolean) =            focusable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setFocusable(boolean) setFocusable(boolean)]]`
   */
  @inline def focusable_=(p: Boolean) = { basis.setFocusable(p); basis }


  @inline def onZoomListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onZoomListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setOnZoomListener(android.widget.ZoomButtonsController.OnZoomListener) setOnZoomListener(android.widget.ZoomButtonsController.OnZoomListener)]]`
   */
  @inline def onZoomListener  (p: android.widget.ZoomButtonsController.OnZoomListener) =            onZoomListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setOnZoomListener(android.widget.ZoomButtonsController.OnZoomListener) setOnZoomListener(android.widget.ZoomButtonsController.OnZoomListener)]]`
   */
  @inline def onZoomListener_=(p: android.widget.ZoomButtonsController.OnZoomListener) = { basis.setOnZoomListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#isVisible() isVisible()]]`
   */
  @inline def visible = basis.isVisible

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setVisible(boolean) setVisible(boolean)]]`
   */
  @inline def visible  (p: Boolean) =            visible_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setVisible(boolean) setVisible(boolean)]]`
   */
  @inline def visible_=(p: Boolean) = { basis.setVisible(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#getZoomControls() getZoomControls()]]`
   */
  @inline def zoomControls = basis.getZoomControls


  @inline def zoomInEnabled(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'zoomInEnabled'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomInEnabled(boolean) setZoomInEnabled(boolean)]]`
   */
  @inline def zoomInEnabled  (p: Boolean) =            zoomInEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomInEnabled(boolean) setZoomInEnabled(boolean)]]`
   */
  @inline def zoomInEnabled_=(p: Boolean) = { basis.setZoomInEnabled(p); basis }

  @inline def  enableZoomIn()             = { basis.setZoomInEnabled(true ); basis }
  @inline def disableZoomIn()             = { basis.setZoomInEnabled(false); basis }


  @inline def zoomOutEnabled(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'zoomOutEnabled'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomOutEnabled(boolean) setZoomOutEnabled(boolean)]]`
   */
  @inline def zoomOutEnabled  (p: Boolean) =            zoomOutEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomOutEnabled(boolean) setZoomOutEnabled(boolean)]]`
   */
  @inline def zoomOutEnabled_=(p: Boolean) = { basis.setZoomOutEnabled(p); basis }

  @inline def  enableZoomOut()             = { basis.setZoomOutEnabled(true ); basis }
  @inline def disableZoomOut()             = { basis.setZoomOutEnabled(false); basis }


  @inline def zoomSpeed(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'zoomSpeed'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomSpeed(long) setZoomSpeed(long)]]`
   */
  @inline def zoomSpeed  (p: Long) =            zoomSpeed_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomSpeed(long) setZoomSpeed(long)]]`
   */
  @inline def zoomSpeed_=(p: Long) = { basis.setZoomSpeed(p); basis }


  @inline def onVisibilityChanged[U](f: Boolean => U): V = {
    basis.setOnZoomListener(new android.widget.ZoomButtonsController.OnZoomListener {
      def onVisibilityChanged(p: Boolean): Unit = { f(p) }
      def onZoom(p: Boolean): Unit = {  }
    })
    basis
  }

  @inline def onVisibilityChanged[U](f:  => U): V = {
    basis.setOnZoomListener(new android.widget.ZoomButtonsController.OnZoomListener {
      def onVisibilityChanged(p: Boolean): Unit = { f }
      def onZoom(p: Boolean): Unit = {  }
    })
    basis
  }

  @inline def onZoom[U](f: Boolean => U): V = {
    basis.setOnZoomListener(new android.widget.ZoomButtonsController.OnZoomListener {
      def onVisibilityChanged(p: Boolean): Unit = {  }
      def onZoom(p: Boolean): Unit = { f(p) }
    })
    basis
  }

  @inline def onZoom[U](f:  => U): V = {
    basis.setOnZoomListener(new android.widget.ZoomButtonsController.OnZoomListener {
      def onVisibilityChanged(p: Boolean): Unit = {  }
      def onZoom(p: Boolean): Unit = { f }
    })
    basis
  }
}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html android.widget.ResourceCursorAdapter]]`.
 */
class RichResourceCursorAdapter[V <: android.widget.ResourceCursorAdapter](val basis: V) extends TraitResourceCursorAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html android.widget.ResourceCursorAdapter]]`. This contains several property accessors.
 */
trait TraitResourceCursorAdapter[V <: android.widget.ResourceCursorAdapter] extends TraitCursorAdapter[V] {




  @inline def dropDownViewResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'dropDownViewResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html#setDropDownViewResource(int) setDropDownViewResource(int)]]`
   */
  @inline def dropDownViewResource  (p: Int) =            dropDownViewResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html#setDropDownViewResource(int) setDropDownViewResource(int)]]`
   */
  @inline def dropDownViewResource_=(p: Int) = { basis.setDropDownViewResource(p); basis }


  @inline def viewResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'viewResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html#setViewResource(int) setViewResource(int)]]`
   */
  @inline def viewResource  (p: Int) =            viewResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html#setViewResource(int) setViewResource(int)]]`
   */
  @inline def viewResource_=(p: Int) = { basis.setViewResource(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ViewAnimator.html android.widget.ViewAnimator]]`.
 */
class RichViewAnimator[V <: android.widget.ViewAnimator](val basis: V) extends TraitViewAnimator[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ViewAnimator.html android.widget.ViewAnimator]]`. This contains several property accessors.
 */
trait TraitViewAnimator[V <: android.widget.ViewAnimator] extends TraitFrameLayout[V] {




  @inline def animateFirstView(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'animateFirstView'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setAnimateFirstView(boolean) setAnimateFirstView(boolean)]]`
   */
  @inline def animateFirstView  (p: Boolean) =            animateFirstView_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setAnimateFirstView(boolean) setAnimateFirstView(boolean)]]`
   */
  @inline def animateFirstView_=(p: Boolean) = { basis.setAnimateFirstView(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#getCurrentView() getCurrentView()]]`
   */
  @inline def currentView = basis.getCurrentView


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#getDisplayedChild() getDisplayedChild()]]`
   */
  @inline def displayedChild = basis.getDisplayedChild

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setDisplayedChild(int) setDisplayedChild(int)]]`
   */
  @inline def displayedChild  (p: Int) =            displayedChild_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setDisplayedChild(int) setDisplayedChild(int)]]`
   */
  @inline def displayedChild_=(p: Int) = { basis.setDisplayedChild(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#getInAnimation() getInAnimation()]]`
   */
  @inline def inAnimation = basis.getInAnimation

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation) setInAnimation(android.view.animation.Animation)]]`
   */
  @inline def inAnimation  (p: android.view.animation.Animation) =            inAnimation_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation) setInAnimation(android.view.animation.Animation)]]`
   */
  @inline def inAnimation_=(p: android.view.animation.Animation) = { basis.setInAnimation(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#getOutAnimation() getOutAnimation()]]`
   */
  @inline def outAnimation = basis.getOutAnimation

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setOutAnimation(android.view.animation.Animation) setOutAnimation(android.view.animation.Animation)]]`
   */
  @inline def outAnimation  (p: android.view.animation.Animation) =            outAnimation_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewAnimator.html#setOutAnimation(android.view.animation.Animation) setOutAnimation(android.view.animation.Animation)]]`
   */
  @inline def outAnimation_=(p: android.view.animation.Animation) = { basis.setOutAnimation(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ViewAnimator.html android.widget.ViewAnimator]]`.
 */
class SViewAnimator()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ViewAnimator(context) with TraitViewAnimator[SViewAnimator] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SViewAnimator {
  def apply[LP <: ViewGroupLayoutParams[_, SViewAnimator]]()(implicit context: android.content.Context, defaultLayoutParam: SViewAnimator => LP): SViewAnimator = {
    val v = new SViewAnimator
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html android.widget.SlidingDrawer]]`.
 */
class RichSlidingDrawer[V <: android.widget.SlidingDrawer](val basis: V) extends TraitSlidingDrawer[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html android.widget.SlidingDrawer]]`. This contains several property accessors.
 */
trait TraitSlidingDrawer[V <: android.widget.SlidingDrawer] extends TraitViewGroup[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#getContent() getContent()]]`
   */
  @inline def content = basis.getContent


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#getHandle() getHandle()]]`
   */
  @inline def handle = basis.getHandle


  @inline def onDrawerCloseListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onDrawerCloseListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener) setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener)]]`
   */
  @inline def onDrawerCloseListener  (p: android.widget.SlidingDrawer.OnDrawerCloseListener) =            onDrawerCloseListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener) setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener)]]`
   */
  @inline def onDrawerCloseListener_=(p: android.widget.SlidingDrawer.OnDrawerCloseListener) = { basis.setOnDrawerCloseListener(p); basis }


  @inline def onDrawerOpenListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onDrawerOpenListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener) setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener)]]`
   */
  @inline def onDrawerOpenListener  (p: android.widget.SlidingDrawer.OnDrawerOpenListener) =            onDrawerOpenListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener) setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener)]]`
   */
  @inline def onDrawerOpenListener_=(p: android.widget.SlidingDrawer.OnDrawerOpenListener) = { basis.setOnDrawerOpenListener(p); basis }


  @inline def onDrawerScrollListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onDrawerScrollListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener) setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener)]]`
   */
  @inline def onDrawerScrollListener  (p: android.widget.SlidingDrawer.OnDrawerScrollListener) =            onDrawerScrollListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener) setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener)]]`
   */
  @inline def onDrawerScrollListener_=(p: android.widget.SlidingDrawer.OnDrawerScrollListener) = { basis.setOnDrawerScrollListener(p); basis }



  @inline def onDrawerClosed[U](f:  => U): V = {
    basis.setOnDrawerCloseListener(new android.widget.SlidingDrawer.OnDrawerCloseListener {
      def onDrawerClosed(): Unit = { f }
    })
    basis
  }



  @inline def onDrawerOpened[U](f:  => U): V = {
    basis.setOnDrawerOpenListener(new android.widget.SlidingDrawer.OnDrawerOpenListener {
      def onDrawerOpened(): Unit = { f }
    })
    basis
  }



  @inline def onScrollEnded[U](f:  => U): V = {
    basis.setOnDrawerScrollListener(new android.widget.SlidingDrawer.OnDrawerScrollListener {
      def onScrollEnded(): Unit = { f }
      def onScrollStarted(): Unit = {  }
    })
    basis
  }



  @inline def onScrollStarted[U](f:  => U): V = {
    basis.setOnDrawerScrollListener(new android.widget.SlidingDrawer.OnDrawerScrollListener {
      def onScrollEnded(): Unit = {  }
      def onScrollStarted(): Unit = { f }
    })
    basis
  }
}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TextSwitcher.html android.widget.TextSwitcher]]`.
 */
class RichTextSwitcher[V <: android.widget.TextSwitcher](val basis: V) extends TraitTextSwitcher[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TextSwitcher.html android.widget.TextSwitcher]]`. This contains several property accessors.
 */
trait TraitTextSwitcher[V <: android.widget.TextSwitcher] extends TraitViewSwitcher[V] {




  @inline def currentText(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'currentText'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextSwitcher.html#setCurrentText(java.lang.CharSequence) setCurrentText(java.lang.CharSequence)]]`
   */
  @inline def currentText  (p: java.lang.CharSequence) =            currentText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextSwitcher.html#setCurrentText(java.lang.CharSequence) setCurrentText(java.lang.CharSequence)]]`
   */
  @inline def currentText_=(p: java.lang.CharSequence) = { basis.setCurrentText(p); basis }


  @inline def text(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'text'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextSwitcher.html#setText(java.lang.CharSequence) setText(java.lang.CharSequence)]]`
   */
  @inline def text  (p: java.lang.CharSequence) =            text_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextSwitcher.html#setText(java.lang.CharSequence) setText(java.lang.CharSequence)]]`
   */
  @inline def text_=(p: java.lang.CharSequence) = { basis.setText(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TextSwitcher.html android.widget.TextSwitcher]]`.
 */
class STextSwitcher()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TextSwitcher(context) with TraitTextSwitcher[STextSwitcher] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object STextSwitcher {
  def apply[LP <: ViewGroupLayoutParams[_, STextSwitcher]]()(implicit context: android.content.Context, defaultLayoutParam: STextSwitcher => LP): STextSwitcher = {
    val v = new STextSwitcher
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/LinearLayout.html android.widget.LinearLayout]]`.
 */
class RichLinearLayout[V <: android.widget.LinearLayout](val basis: V) extends TraitLinearLayout[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/LinearLayout.html android.widget.LinearLayout]]`. This contains several property accessors.
 */
trait TraitLinearLayout[V <: android.widget.LinearLayout] extends TraitViewGroup[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#isBaselineAligned() isBaselineAligned()]]`
   */
  @inline def baselineAligned = basis.isBaselineAligned

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setBaselineAligned(boolean) setBaselineAligned(boolean)]]`
   */
  @inline def baselineAligned  (p: Boolean) =            baselineAligned_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setBaselineAligned(boolean) setBaselineAligned(boolean)]]`
   */
  @inline def baselineAligned_=(p: Boolean) = { basis.setBaselineAligned(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#getBaselineAlignedChildIndex() getBaselineAlignedChildIndex()]]`
   */
  @inline def baselineAlignedChildIndex = basis.getBaselineAlignedChildIndex

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setBaselineAlignedChildIndex(int) setBaselineAlignedChildIndex(int)]]`
   */
  @inline def baselineAlignedChildIndex  (p: Int) =            baselineAlignedChildIndex_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setBaselineAlignedChildIndex(int) setBaselineAlignedChildIndex(int)]]`
   */
  @inline def baselineAlignedChildIndex_=(p: Int) = { basis.setBaselineAlignedChildIndex(p); basis }


  @inline def gravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'gravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity  (p: Int) =            gravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity_=(p: Int) = { basis.setGravity(p); basis }


  @inline def horizontalGravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'horizontalGravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setHorizontalGravity(int) setHorizontalGravity(int)]]`
   */
  @inline def horizontalGravity  (p: Int) =            horizontalGravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setHorizontalGravity(int) setHorizontalGravity(int)]]`
   */
  @inline def horizontalGravity_=(p: Int) = { basis.setHorizontalGravity(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#getOrientation() getOrientation()]]`
   */
  @inline def orientation = basis.getOrientation

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setOrientation(int) setOrientation(int)]]`
   */
  @inline def orientation  (p: Int) =            orientation_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setOrientation(int) setOrientation(int)]]`
   */
  @inline def orientation_=(p: Int) = { basis.setOrientation(p); basis }


  @inline def verticalGravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'verticalGravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setVerticalGravity(int) setVerticalGravity(int)]]`
   */
  @inline def verticalGravity  (p: Int) =            verticalGravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setVerticalGravity(int) setVerticalGravity(int)]]`
   */
  @inline def verticalGravity_=(p: Int) = { basis.setVerticalGravity(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#getWeightSum() getWeightSum()]]`
   */
  @inline def weightSum = basis.getWeightSum

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setWeightSum(float) setWeightSum(float)]]`
   */
  @inline def weightSum  (p: Float) =            weightSum_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/LinearLayout.html#setWeightSum(float) setWeightSum(float)]]`
   */
  @inline def weightSum_=(p: Float) = { basis.setWeightSum(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/LinearLayout.html android.widget.LinearLayout]]`.
 */
class SLinearLayout()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.LinearLayout(context) with TraitLinearLayout[SLinearLayout] {

  def basis = this
  override val parentViewGroup = parentVGroup
  val VERTICAL = LinearLayout.VERTICAL
  val HORIZONTAL = LinearLayout.HORIZONTAL

  implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)
  <<

  class LayoutParams[V <: View](v: V) extends LinearLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {
    def basis = this

    v.setLayoutParams(this)

    def Gravity(g: Int) = {
      gravity = g
      this
    }

    def Weight(w: Float) = {
      weight = w
      this
    }
    def parent = SLinearLayout.this

    def >> : V = v

  }
}

object SLinearLayout {
  def apply[LP <: ViewGroupLayoutParams[_, SLinearLayout]]()(implicit context: android.content.Context, defaultLayoutParam: SLinearLayout => LP): SLinearLayout = {
    val v = new SLinearLayout
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ZoomControls.html android.widget.ZoomControls]]`.
 */
class RichZoomControls[V <: android.widget.ZoomControls](val basis: V) extends TraitZoomControls[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ZoomControls.html android.widget.ZoomControls]]`. This contains several property accessors.
 */
trait TraitZoomControls[V <: android.widget.ZoomControls] extends TraitLinearLayout[V] {




  @inline def isZoomInEnabled(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'isZoomInEnabled'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setIsZoomInEnabled(boolean) setIsZoomInEnabled(boolean)]]`
   */
  @inline def isZoomInEnabled  (p: Boolean) =            isZoomInEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setIsZoomInEnabled(boolean) setIsZoomInEnabled(boolean)]]`
   */
  @inline def isZoomInEnabled_=(p: Boolean) = { basis.setIsZoomInEnabled(p); basis }

  @inline def  enableIsZoomIn()             = { basis.setIsZoomInEnabled(true ); basis }
  @inline def disableIsZoomIn()             = { basis.setIsZoomInEnabled(false); basis }


  @inline def isZoomOutEnabled(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'isZoomOutEnabled'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setIsZoomOutEnabled(boolean) setIsZoomOutEnabled(boolean)]]`
   */
  @inline def isZoomOutEnabled  (p: Boolean) =            isZoomOutEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setIsZoomOutEnabled(boolean) setIsZoomOutEnabled(boolean)]]`
   */
  @inline def isZoomOutEnabled_=(p: Boolean) = { basis.setIsZoomOutEnabled(p); basis }

  @inline def  enableIsZoomOut()             = { basis.setIsZoomOutEnabled(true ); basis }
  @inline def disableIsZoomOut()             = { basis.setIsZoomOutEnabled(false); basis }


  @inline def onZoomInClickListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onZoomInClickListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setOnZoomInClickListener(android.view.View.OnClickListener) setOnZoomInClickListener(android.view.View.OnClickListener)]]`
   */
  @inline def onZoomInClickListener  (p: android.view.View.OnClickListener) =            onZoomInClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setOnZoomInClickListener(android.view.View.OnClickListener) setOnZoomInClickListener(android.view.View.OnClickListener)]]`
   */
  @inline def onZoomInClickListener_=(p: android.view.View.OnClickListener) = { basis.setOnZoomInClickListener(p); basis }


  @inline def onZoomOutClickListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onZoomOutClickListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setOnZoomOutClickListener(android.view.View.OnClickListener) setOnZoomOutClickListener(android.view.View.OnClickListener)]]`
   */
  @inline def onZoomOutClickListener  (p: android.view.View.OnClickListener) =            onZoomOutClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setOnZoomOutClickListener(android.view.View.OnClickListener) setOnZoomOutClickListener(android.view.View.OnClickListener)]]`
   */
  @inline def onZoomOutClickListener_=(p: android.view.View.OnClickListener) = { basis.setOnZoomOutClickListener(p); basis }


  @inline def zoomSpeed(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'zoomSpeed'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setZoomSpeed(long) setZoomSpeed(long)]]`
   */
  @inline def zoomSpeed  (p: Long) =            zoomSpeed_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomControls.html#setZoomSpeed(long) setZoomSpeed(long)]]`
   */
  @inline def zoomSpeed_=(p: Long) = { basis.setZoomSpeed(p); basis }


  @inline def onZoomInClick[U](f: android.view.View => U): V = {
    basis.setOnZoomInClickListener(new android.view.View.OnClickListener {
      def onClick(p: android.view.View): Unit = { f(p) }
    })
    basis
  }

  @inline def onZoomInClick[U](f:  => U): V = {
    basis.setOnZoomInClickListener(new android.view.View.OnClickListener {
      def onClick(p: android.view.View): Unit = { f }
    })
    basis
  }

  @inline def onZoomOutClick[U](f: android.view.View => U): V = {
    basis.setOnZoomOutClickListener(new android.view.View.OnClickListener {
      def onClick(p: android.view.View): Unit = { f(p) }
    })
    basis
  }

  @inline def onZoomOutClick[U](f:  => U): V = {
    basis.setOnZoomOutClickListener(new android.view.View.OnClickListener {
      def onClick(p: android.view.View): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ZoomControls.html android.widget.ZoomControls]]`.
 */
class SZoomControls()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ZoomControls(context) with TraitZoomControls[SZoomControls] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SZoomControls {
  def apply[LP <: ViewGroupLayoutParams[_, SZoomControls]]()(implicit context: android.content.Context, defaultLayoutParam: SZoomControls => LP): SZoomControls = {
    val v = new SZoomControls
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/DialerFilter.html android.widget.DialerFilter]]`.
 */
class RichDialerFilter[V <: android.widget.DialerFilter](val basis: V) extends TraitDialerFilter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/DialerFilter.html android.widget.DialerFilter]]`. This contains several property accessors.
 */
trait TraitDialerFilter[V <: android.widget.DialerFilter] extends TraitRelativeLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#getDigits() getDigits()]]`
   */
  @inline def digits = basis.getDigits


  @inline def digitsWatcher(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'digitsWatcher'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setDigitsWatcher(android.text.TextWatcher) setDigitsWatcher(android.text.TextWatcher)]]`
   */
  @inline def digitsWatcher  (p: android.text.TextWatcher) =            digitsWatcher_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setDigitsWatcher(android.text.TextWatcher) setDigitsWatcher(android.text.TextWatcher)]]`
   */
  @inline def digitsWatcher_=(p: android.text.TextWatcher) = { basis.setDigitsWatcher(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#getFilterText() getFilterText()]]`
   */
  @inline def filterText = basis.getFilterText


  @inline def filterWatcher(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'filterWatcher'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setFilterWatcher(android.text.TextWatcher) setFilterWatcher(android.text.TextWatcher)]]`
   */
  @inline def filterWatcher  (p: android.text.TextWatcher) =            filterWatcher_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setFilterWatcher(android.text.TextWatcher) setFilterWatcher(android.text.TextWatcher)]]`
   */
  @inline def filterWatcher_=(p: android.text.TextWatcher) = { basis.setFilterWatcher(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#getLetters() getLetters()]]`
   */
  @inline def letters = basis.getLetters


  @inline def lettersWatcher(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'lettersWatcher'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setLettersWatcher(android.text.TextWatcher) setLettersWatcher(android.text.TextWatcher)]]`
   */
  @inline def lettersWatcher  (p: android.text.TextWatcher) =            lettersWatcher_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setLettersWatcher(android.text.TextWatcher) setLettersWatcher(android.text.TextWatcher)]]`
   */
  @inline def lettersWatcher_=(p: android.text.TextWatcher) = { basis.setLettersWatcher(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#getMode() getMode()]]`
   */
  @inline def mode = basis.getMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setMode(int) setMode(int)]]`
   */
  @inline def mode  (p: Int) =            mode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/DialerFilter.html#setMode(int) setMode(int)]]`
   */
  @inline def mode_=(p: Int) = { basis.setMode(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/DialerFilter.html android.widget.DialerFilter]]`.
 */
class SDialerFilter()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.DialerFilter(context) with TraitDialerFilter[SDialerFilter] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SDialerFilter {
  def apply[LP <: ViewGroupLayoutParams[_, SDialerFilter]]()(implicit context: android.content.Context, defaultLayoutParam: SDialerFilter => LP): SDialerFilter = {
    val v = new SDialerFilter
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/RadioButton.html android.widget.RadioButton]]`.
 */
class RichRadioButton[V <: android.widget.RadioButton](val basis: V) extends TraitRadioButton[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/RadioButton.html android.widget.RadioButton]]`. This contains several property accessors.
 */
trait TraitRadioButton[V <: android.widget.RadioButton] extends TraitCompoundButton[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/RadioButton.html android.widget.RadioButton]]`.
 */
class SRadioButton()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.RadioButton(context) with TraitRadioButton[SRadioButton] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SRadioButton {
  def apply[LP <: ViewGroupLayoutParams[_, SRadioButton]]()(implicit context: android.content.Context, defaultLayoutParam: SRadioButton => LP): SRadioButton = {
    val v = new SRadioButton
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SRadioButton]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SRadioButton) => LP): SRadioButton =  {
    val v = new SRadioButton
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SRadioButton]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SRadioButton) => LP): SRadioButton = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SRadioButton]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SRadioButton) => LP): SRadioButton = {
    val v = new SRadioButton
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html android.widget.QuickContactBadge]]`.
 */
class RichQuickContactBadge[V <: android.widget.QuickContactBadge](val basis: V) extends TraitQuickContactBadge[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html android.widget.QuickContactBadge]]`. This contains several property accessors.
 */
trait TraitQuickContactBadge[V <: android.widget.QuickContactBadge] extends TraitImageView[V] {




  @inline def excludeMimes(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'excludeMimes'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html#setExcludeMimes(java.lang.String[]) setExcludeMimes(java.lang.String[])]]`
   */
  @inline def excludeMimes  (p: Array[java.lang.String]) =            excludeMimes_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html#setExcludeMimes(java.lang.String[]) setExcludeMimes(java.lang.String[])]]`
   */
  @inline def excludeMimes_=(p: Array[java.lang.String]) = { basis.setExcludeMimes(p); basis }


  @inline def mode(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'mode'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html#setMode(int) setMode(int)]]`
   */
  @inline def mode  (p: Int) =            mode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html#setMode(int) setMode(int)]]`
   */
  @inline def mode_=(p: Int) = { basis.setMode(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/QuickContactBadge.html android.widget.QuickContactBadge]]`.
 */
class SQuickContactBadge()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.QuickContactBadge(context) with TraitQuickContactBadge[SQuickContactBadge] {

  def basis = this
  def this(imageResource: android.graphics.drawable.Drawable)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SQuickContactBadge {
  def apply[LP <: ViewGroupLayoutParams[_, SQuickContactBadge]]()(implicit context: android.content.Context, defaultLayoutParam: SQuickContactBadge => LP): SQuickContactBadge = {
    val v = new SQuickContactBadge
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SQuickContactBadge]](imageResource: android.graphics.drawable.Drawable)
      (implicit context: Context, defaultLayoutParam: (SQuickContactBadge) => LP): SQuickContactBadge = {
    val v = new SQuickContactBadge
    v.imageDrawable = imageResource
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SQuickContactBadge]](imageResource: android.graphics.drawable.Drawable, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SQuickContactBadge) => LP): SQuickContactBadge = {
    apply(imageResource, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SQuickContactBadge]](imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SQuickContactBadge) => LP): SQuickContactBadge = {
    val v = new SQuickContactBadge
    v.imageDrawable = imageResource
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/DigitalClock.html android.widget.DigitalClock]]`.
 */
class RichDigitalClock[V <: android.widget.DigitalClock](val basis: V) extends TraitDigitalClock[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/DigitalClock.html android.widget.DigitalClock]]`. This contains several property accessors.
 */
trait TraitDigitalClock[V <: android.widget.DigitalClock] extends TraitTextView[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/DigitalClock.html android.widget.DigitalClock]]`.
 */
class SDigitalClock()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.DigitalClock(context) with TraitDigitalClock[SDigitalClock] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SDigitalClock {
  def apply[LP <: ViewGroupLayoutParams[_, SDigitalClock]]()(implicit context: android.content.Context, defaultLayoutParam: SDigitalClock => LP): SDigitalClock = {
    val v = new SDigitalClock
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SDigitalClock]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SDigitalClock) => LP): SDigitalClock =  {
    val v = new SDigitalClock
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SDigitalClock]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SDigitalClock) => LP): SDigitalClock = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SDigitalClock]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SDigitalClock) => LP): SDigitalClock = {
    val v = new SDigitalClock
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ToggleButton.html android.widget.ToggleButton]]`.
 */
class RichToggleButton[V <: android.widget.ToggleButton](val basis: V) extends TraitToggleButton[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ToggleButton.html android.widget.ToggleButton]]`. This contains several property accessors.
 */
trait TraitToggleButton[V <: android.widget.ToggleButton] extends TraitCompoundButton[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ToggleButton.html#getTextOff() getTextOff()]]`
   */
  @inline def textOff = basis.getTextOff

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ToggleButton.html#setTextOff(java.lang.CharSequence) setTextOff(java.lang.CharSequence)]]`
   */
  @inline def textOff  (p: java.lang.CharSequence) =            textOff_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ToggleButton.html#setTextOff(java.lang.CharSequence) setTextOff(java.lang.CharSequence)]]`
   */
  @inline def textOff_=(p: java.lang.CharSequence) = { basis.setTextOff(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ToggleButton.html#getTextOn() getTextOn()]]`
   */
  @inline def textOn = basis.getTextOn

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ToggleButton.html#setTextOn(java.lang.CharSequence) setTextOn(java.lang.CharSequence)]]`
   */
  @inline def textOn  (p: java.lang.CharSequence) =            textOn_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ToggleButton.html#setTextOn(java.lang.CharSequence) setTextOn(java.lang.CharSequence)]]`
   */
  @inline def textOn_=(p: java.lang.CharSequence) = { basis.setTextOn(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ToggleButton.html android.widget.ToggleButton]]`.
 */
class SToggleButton()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ToggleButton(context) with TraitToggleButton[SToggleButton] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SToggleButton {
  def apply[LP <: ViewGroupLayoutParams[_, SToggleButton]]()(implicit context: android.content.Context, defaultLayoutParam: SToggleButton => LP): SToggleButton = {
    val v = new SToggleButton
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SToggleButton]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SToggleButton) => LP): SToggleButton =  {
    val v = new SToggleButton
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SToggleButton]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SToggleButton) => LP): SToggleButton = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SToggleButton]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SToggleButton) => LP): SToggleButton = {
    val v = new SToggleButton
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Button.html android.widget.Button]]`.
 */
class RichButton[V <: android.widget.Button](val basis: V) extends TraitButton[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Button.html android.widget.Button]]`. This contains several property accessors.
 */
trait TraitButton[V <: android.widget.Button] extends TraitTextView[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/Button.html android.widget.Button]]`.
 */
class SButton()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.Button(context) with TraitButton[SButton] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SButton {
  def apply[LP <: ViewGroupLayoutParams[_, SButton]]()(implicit context: android.content.Context, defaultLayoutParam: SButton => LP): SButton = {
    val v = new SButton
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SButton]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SButton) => LP): SButton =  {
    val v = new SButton
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SButton]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SButton) => LP): SButton = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SButton]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SButton) => LP): SButton = {
    val v = new SButton
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/CheckBox.html android.widget.CheckBox]]`.
 */
class RichCheckBox[V <: android.widget.CheckBox](val basis: V) extends TraitCheckBox[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/CheckBox.html android.widget.CheckBox]]`. This contains several property accessors.
 */
trait TraitCheckBox[V <: android.widget.CheckBox] extends TraitCompoundButton[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/CheckBox.html android.widget.CheckBox]]`.
 */
class SCheckBox()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.CheckBox(context) with TraitCheckBox[SCheckBox] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SCheckBox {
  def apply[LP <: ViewGroupLayoutParams[_, SCheckBox]]()(implicit context: android.content.Context, defaultLayoutParam: SCheckBox => LP): SCheckBox = {
    val v = new SCheckBox
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SCheckBox]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SCheckBox) => LP): SCheckBox =  {
    val v = new SCheckBox
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SCheckBox]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SCheckBox) => LP): SCheckBox = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SCheckBox]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SCheckBox) => LP): SCheckBox = {
    val v = new SCheckBox
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/MediaController.html android.widget.MediaController]]`.
 */
class RichMediaController[V <: android.widget.MediaController](val basis: V) extends TraitMediaController[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/MediaController.html android.widget.MediaController]]`. This contains several property accessors.
 */
trait TraitMediaController[V <: android.widget.MediaController] extends TraitFrameLayout[V] {




  @inline def anchorView(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'anchorView'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/MediaController.html#setAnchorView(android.view.View) setAnchorView(android.view.View)]]`
   */
  @inline def anchorView  (p: android.view.View) =            anchorView_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/MediaController.html#setAnchorView(android.view.View) setAnchorView(android.view.View)]]`
   */
  @inline def anchorView_=(p: android.view.View) = { basis.setAnchorView(p); basis }


  @inline def mediaPlayer(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'mediaPlayer'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/MediaController.html#setMediaPlayer(android.widget.MediaController.MediaPlayerControl) setMediaPlayer(android.widget.MediaController.MediaPlayerControl)]]`
   */
  @inline def mediaPlayer  (p: android.widget.MediaController.MediaPlayerControl) =            mediaPlayer_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/MediaController.html#setMediaPlayer(android.widget.MediaController.MediaPlayerControl) setMediaPlayer(android.widget.MediaController.MediaPlayerControl)]]`
   */
  @inline def mediaPlayer_=(p: android.widget.MediaController.MediaPlayerControl) = { basis.setMediaPlayer(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/MediaController.html android.widget.MediaController]]`.
 */
class SMediaController()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.MediaController(context) with TraitMediaController[SMediaController] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SMediaController {
  def apply[LP <: ViewGroupLayoutParams[_, SMediaController]]()(implicit context: android.content.Context, defaultLayoutParam: SMediaController => LP): SMediaController = {
    val v = new SMediaController
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TableRow.html android.widget.TableRow]]`.
 */
class RichTableRow[V <: android.widget.TableRow](val basis: V) extends TraitTableRow[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TableRow.html android.widget.TableRow]]`. This contains several property accessors.
 */
trait TraitTableRow[V <: android.widget.TableRow] extends TraitLinearLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TableRow.html#getVirtualChildCount() getVirtualChildCount()]]`
   */
  @inline def virtualChildCount = basis.getVirtualChildCount


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TableRow.html android.widget.TableRow]]`.
 */
class STableRow()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TableRow(context) with TraitTableRow[STableRow] {

  def basis = this
  override val parentViewGroup = parentVGroup
  implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

  class LayoutParams[V <: View](v: V) extends TableRow.LayoutParams(MATCH_PARENT, WRAP_CONTENT, 1.0f) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {
    def basis = this

    v.setLayoutParams(this)

    def parent = STableRow.this

    def >> : V = v
  }
}

object STableRow {
  def apply[LP <: ViewGroupLayoutParams[_, STableRow]]()(implicit context: android.content.Context, defaultLayoutParam: STableRow => LP): STableRow = {
    val v = new STableRow
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TabWidget.html android.widget.TabWidget]]`.
 */
class RichTabWidget[V <: android.widget.TabWidget](val basis: V) extends TraitTabWidget[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TabWidget.html android.widget.TabWidget]]`. This contains several property accessors.
 */
trait TraitTabWidget[V <: android.widget.TabWidget] extends TraitLinearLayout[V] {




  @inline def currentTab(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'currentTab'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setCurrentTab(int) setCurrentTab(int)]]`
   */
  @inline def currentTab  (p: Int) =            currentTab_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setCurrentTab(int) setCurrentTab(int)]]`
   */
  @inline def currentTab_=(p: Int) = { basis.setCurrentTab(p); basis }


  @inline def dividerDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'dividerDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setDividerDrawable(int) setDividerDrawable(int)]]`
   */
  @inline def dividerDrawable  (p: Int) =            dividerDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setDividerDrawable(int) setDividerDrawable(int)]]`
   */
  @inline def dividerDrawable_=(p: Int) = { basis.setDividerDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setDividerDrawable(android.graphics.drawable.Drawable) setDividerDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def dividerDrawable  (p: android.graphics.drawable.Drawable) =            dividerDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setDividerDrawable(android.graphics.drawable.Drawable) setDividerDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def dividerDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setDividerDrawable(p); basis }


  @inline def leftStripDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'leftStripDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setLeftStripDrawable(int) setLeftStripDrawable(int)]]`
   */
  @inline def leftStripDrawable  (p: Int) =            leftStripDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setLeftStripDrawable(int) setLeftStripDrawable(int)]]`
   */
  @inline def leftStripDrawable_=(p: Int) = { basis.setLeftStripDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setLeftStripDrawable(android.graphics.drawable.Drawable) setLeftStripDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def leftStripDrawable  (p: android.graphics.drawable.Drawable) =            leftStripDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setLeftStripDrawable(android.graphics.drawable.Drawable) setLeftStripDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def leftStripDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setLeftStripDrawable(p); basis }


  @inline def rightStripDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'rightStripDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setRightStripDrawable(int) setRightStripDrawable(int)]]`
   */
  @inline def rightStripDrawable  (p: Int) =            rightStripDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setRightStripDrawable(int) setRightStripDrawable(int)]]`
   */
  @inline def rightStripDrawable_=(p: Int) = { basis.setRightStripDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setRightStripDrawable(android.graphics.drawable.Drawable) setRightStripDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def rightStripDrawable  (p: android.graphics.drawable.Drawable) =            rightStripDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setRightStripDrawable(android.graphics.drawable.Drawable) setRightStripDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def rightStripDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setRightStripDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#isStripEnabled() isStripEnabled()]]`
   */
  @inline def stripEnabled = basis.isStripEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setStripEnabled(boolean) setStripEnabled(boolean)]]`
   */
  @inline def stripEnabled  (p: Boolean) =            stripEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#setStripEnabled(boolean) setStripEnabled(boolean)]]`
   */
  @inline def stripEnabled_=(p: Boolean) = { basis.setStripEnabled(p); basis }

  @inline def  enableStrip()             = { basis.setStripEnabled(true ); basis }
  @inline def disableStrip()             = { basis.setStripEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TabWidget.html#getTabCount() getTabCount()]]`
   */
  @inline def tabCount = basis.getTabCount


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TabWidget.html android.widget.TabWidget]]`.
 */
class STabWidget()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TabWidget(context) with TraitTabWidget[STabWidget] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object STabWidget {
  def apply[LP <: ViewGroupLayoutParams[_, STabWidget]]()(implicit context: android.content.Context, defaultLayoutParam: STabWidget => LP): STabWidget = {
    val v = new STabWidget
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/VideoView.html android.widget.VideoView]]`.
 */
class RichVideoView[V <: android.widget.VideoView](val basis: V) extends TraitVideoView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/VideoView.html android.widget.VideoView]]`. This contains several property accessors.
 */
trait TraitVideoView[V <: android.widget.VideoView] extends TraitSurfaceView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#getBufferPercentage() getBufferPercentage()]]`
   */
  @inline def bufferPercentage = basis.getBufferPercentage


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#getCurrentPosition() getCurrentPosition()]]`
   */
  @inline def currentPosition = basis.getCurrentPosition


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#getDuration() getDuration()]]`
   */
  @inline def duration = basis.getDuration


  @inline def mediaController(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'mediaController'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setMediaController(android.widget.MediaController) setMediaController(android.widget.MediaController)]]`
   */
  @inline def mediaController  (p: android.widget.MediaController) =            mediaController_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setMediaController(android.widget.MediaController) setMediaController(android.widget.MediaController)]]`
   */
  @inline def mediaController_=(p: android.widget.MediaController) = { basis.setMediaController(p); basis }


  @inline def onCompletionListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onCompletionListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener) setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)]]`
   */
  @inline def onCompletionListener  (p: android.media.MediaPlayer.OnCompletionListener) =            onCompletionListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener) setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)]]`
   */
  @inline def onCompletionListener_=(p: android.media.MediaPlayer.OnCompletionListener) = { basis.setOnCompletionListener(p); basis }


  @inline def onErrorListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onErrorListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setOnErrorListener(android.media.MediaPlayer.OnErrorListener) setOnErrorListener(android.media.MediaPlayer.OnErrorListener)]]`
   */
  @inline def onErrorListener  (p: android.media.MediaPlayer.OnErrorListener) =            onErrorListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setOnErrorListener(android.media.MediaPlayer.OnErrorListener) setOnErrorListener(android.media.MediaPlayer.OnErrorListener)]]`
   */
  @inline def onErrorListener_=(p: android.media.MediaPlayer.OnErrorListener) = { basis.setOnErrorListener(p); basis }


  @inline def onPreparedListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onPreparedListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener) setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)]]`
   */
  @inline def onPreparedListener  (p: android.media.MediaPlayer.OnPreparedListener) =            onPreparedListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener) setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)]]`
   */
  @inline def onPreparedListener_=(p: android.media.MediaPlayer.OnPreparedListener) = { basis.setOnPreparedListener(p); basis }


  @inline def videoPath(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'videoPath'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setVideoPath(java.lang.String) setVideoPath(java.lang.String)]]`
   */
  @inline def videoPath  (p: java.lang.String) =            videoPath_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setVideoPath(java.lang.String) setVideoPath(java.lang.String)]]`
   */
  @inline def videoPath_=(p: java.lang.String) = { basis.setVideoPath(p); basis }


  @inline def videoURI(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'videoURI'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setVideoURI(android.net.Uri) setVideoURI(android.net.Uri)]]`
   */
  @inline def videoURI  (p: android.net.Uri) =            videoURI_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/VideoView.html#setVideoURI(android.net.Uri) setVideoURI(android.net.Uri)]]`
   */
  @inline def videoURI_=(p: android.net.Uri) = { basis.setVideoURI(p); basis }


  @inline def onCompletion[U](f: android.media.MediaPlayer => U): V = {
    basis.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener {
      def onCompletion(p: android.media.MediaPlayer): Unit = { f(p) }
    })
    basis
  }

  @inline def onCompletion[U](f:  => U): V = {
    basis.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener {
      def onCompletion(p: android.media.MediaPlayer): Unit = { f }
    })
    basis
  }

  @inline def onError(f: (android.media.MediaPlayer, Int, Int) => Boolean): V = {
    basis.setOnErrorListener(new android.media.MediaPlayer.OnErrorListener {
      def onError(p1: android.media.MediaPlayer, p2: Int, p3: Int): Boolean = { f(p1, p2, p3) }
    })
    basis
  }

  @inline def onError(f:  => Boolean): V = {
    basis.setOnErrorListener(new android.media.MediaPlayer.OnErrorListener {
      def onError(p1: android.media.MediaPlayer, p2: Int, p3: Int): Boolean = { f }
    })
    basis
  }

  @inline def onPrepared[U](f: android.media.MediaPlayer => U): V = {
    basis.setOnPreparedListener(new android.media.MediaPlayer.OnPreparedListener {
      def onPrepared(p: android.media.MediaPlayer): Unit = { f(p) }
    })
    basis
  }

  @inline def onPrepared[U](f:  => U): V = {
    basis.setOnPreparedListener(new android.media.MediaPlayer.OnPreparedListener {
      def onPrepared(p: android.media.MediaPlayer): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/VideoView.html android.widget.VideoView]]`.
 */
class SVideoView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.VideoView(context) with TraitVideoView[SVideoView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SVideoView {
  def apply[LP <: ViewGroupLayoutParams[_, SVideoView]]()(implicit context: android.content.Context, defaultLayoutParam: SVideoView => LP): SVideoView = {
    val v = new SVideoView
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AdapterView.html android.widget.AdapterView[_]]]`.
 */
class RichAdapterView[V <: android.widget.AdapterView[_]](val basis: V) extends TraitAdapterView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AdapterView.html android.widget.AdapterView[_]]]`. This contains several property accessors.
 */
trait TraitAdapterView[V <: android.widget.AdapterView[_]] extends TraitViewGroup[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getAdapter() getAdapter()]]`
   */
  @inline def adapter = basis.getAdapter


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getCount() getCount()]]`
   */
  @inline def count = basis.getCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getEmptyView() getEmptyView()]]`
   */
  @inline def emptyView = basis.getEmptyView

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setEmptyView(android.view.View) setEmptyView(android.view.View)]]`
   */
  @inline def emptyView  (p: android.view.View) =            emptyView_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setEmptyView(android.view.View) setEmptyView(android.view.View)]]`
   */
  @inline def emptyView_=(p: android.view.View) = { basis.setEmptyView(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getFirstVisiblePosition() getFirstVisiblePosition()]]`
   */
  @inline def firstVisiblePosition = basis.getFirstVisiblePosition


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getLastVisiblePosition() getLastVisiblePosition()]]`
   */
  @inline def lastVisiblePosition = basis.getLastVisiblePosition


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getOnItemClickListener() getOnItemClickListener()]]`
   */
  @inline def onItemClickListener = basis.getOnItemClickListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setOnItemClickListener(android.widget.AdapterView.OnItemClickListener) setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)]]`
   */
  @inline def onItemClickListener  (p: android.widget.AdapterView.OnItemClickListener) =            onItemClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setOnItemClickListener(android.widget.AdapterView.OnItemClickListener) setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)]]`
   */
  @inline def onItemClickListener_=(p: android.widget.AdapterView.OnItemClickListener) = { basis.setOnItemClickListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getOnItemLongClickListener() getOnItemLongClickListener()]]`
   */
  @inline def onItemLongClickListener = basis.getOnItemLongClickListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener) setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener)]]`
   */
  @inline def onItemLongClickListener  (p: android.widget.AdapterView.OnItemLongClickListener) =            onItemLongClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener) setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener)]]`
   */
  @inline def onItemLongClickListener_=(p: android.widget.AdapterView.OnItemLongClickListener) = { basis.setOnItemLongClickListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getOnItemSelectedListener() getOnItemSelectedListener()]]`
   */
  @inline def onItemSelectedListener = basis.getOnItemSelectedListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener) setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)]]`
   */
  @inline def onItemSelectedListener  (p: android.widget.AdapterView.OnItemSelectedListener) =            onItemSelectedListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener) setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)]]`
   */
  @inline def onItemSelectedListener_=(p: android.widget.AdapterView.OnItemSelectedListener) = { basis.setOnItemSelectedListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getSelectedItem() getSelectedItem()]]`
   */
  @inline def selectedItem = basis.getSelectedItem


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getSelectedItemId() getSelectedItemId()]]`
   */
  @inline def selectedItemId = basis.getSelectedItemId


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getSelectedItemPosition() getSelectedItemPosition()]]`
   */
  @inline def selectedItemPosition = basis.getSelectedItemPosition


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#getSelectedView() getSelectedView()]]`
   */
  @inline def selectedView = basis.getSelectedView


  @inline def selection(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'selection'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setSelection(int) setSelection(int)]]`
   */
  @inline def selection  (p: Int) =            selection_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AdapterView.html#setSelection(int) setSelection(int)]]`
   */
  @inline def selection_=(p: Int) = { basis.setSelection(p); basis }


  @inline def onItemClick[U](f: (android.widget.AdapterView[_], android.view.View, Int, Long) => U): V = {
    basis.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener {
      def onItemClick(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f(p1, p2, p3, p4) }
    })
    basis
  }

  @inline def onItemClick[U](f:  => U): V = {
    basis.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener {
      def onItemClick(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f }
    })
    basis
  }

  @inline def onItemLongClick(f: (android.widget.AdapterView[_], android.view.View, Int, Long) => Boolean): V = {
    basis.setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener {
      def onItemLongClick(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Boolean = { f(p1, p2, p3, p4) }
    })
    basis
  }

  @inline def onItemLongClick(f:  => Boolean): V = {
    basis.setOnItemLongClickListener(new android.widget.AdapterView.OnItemLongClickListener {
      def onItemLongClick(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Boolean = { f }
    })
    basis
  }

  @inline def onItemSelected[U](f: (android.widget.AdapterView[_], android.view.View, Int, Long) => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f(p1, p2, p3, p4) }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = {  }
    })
    basis
  }

  @inline def onItemSelected[U](f:  => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = {  }
    })
    basis
  }

  @inline def onNothingSelected[U](f: android.widget.AdapterView[_] => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = {  }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = { f(p) }
    })
    basis
  }

  @inline def onNothingSelected[U](f:  => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = {  }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = { f }
    })
    basis
  }
}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Checkable.html android.widget.Checkable]]`.
 */
class RichCheckable[V <: android.widget.Checkable](val basis: V) extends TraitCheckable[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Checkable.html android.widget.Checkable]]`. This contains several property accessors.
 */
trait TraitCheckable[V <: android.widget.Checkable] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Checkable.html#isChecked() isChecked()]]`
   */
  @inline def checked = basis.isChecked

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Checkable.html#setChecked(boolean) setChecked(boolean)]]`
   */
  @inline def checked  (p: Boolean) =            checked_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Checkable.html#setChecked(boolean) setChecked(boolean)]]`
   */
  @inline def checked_=(p: Boolean) = { basis.setChecked(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html android.widget.HorizontalScrollView]]`.
 */
class RichHorizontalScrollView[V <: android.widget.HorizontalScrollView](val basis: V) extends TraitHorizontalScrollView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html android.widget.HorizontalScrollView]]`. This contains several property accessors.
 */
trait TraitHorizontalScrollView[V <: android.widget.HorizontalScrollView] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#isFillViewport() isFillViewport()]]`
   */
  @inline def fillViewport = basis.isFillViewport

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#setFillViewport(boolean) setFillViewport(boolean)]]`
   */
  @inline def fillViewport  (p: Boolean) =            fillViewport_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#setFillViewport(boolean) setFillViewport(boolean)]]`
   */
  @inline def fillViewport_=(p: Boolean) = { basis.setFillViewport(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#getMaxScrollAmount() getMaxScrollAmount()]]`
   */
  @inline def maxScrollAmount = basis.getMaxScrollAmount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#isSmoothScrollingEnabled() isSmoothScrollingEnabled()]]`
   */
  @inline def smoothScrollingEnabled = basis.isSmoothScrollingEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#setSmoothScrollingEnabled(boolean) setSmoothScrollingEnabled(boolean)]]`
   */
  @inline def smoothScrollingEnabled  (p: Boolean) =            smoothScrollingEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html#setSmoothScrollingEnabled(boolean) setSmoothScrollingEnabled(boolean)]]`
   */
  @inline def smoothScrollingEnabled_=(p: Boolean) = { basis.setSmoothScrollingEnabled(p); basis }

  @inline def  enableSmoothScrolling()             = { basis.setSmoothScrollingEnabled(true ); basis }
  @inline def disableSmoothScrolling()             = { basis.setSmoothScrollingEnabled(false); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/HorizontalScrollView.html android.widget.HorizontalScrollView]]`.
 */
class SHorizontalScrollView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.HorizontalScrollView(context) with TraitHorizontalScrollView[SHorizontalScrollView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SHorizontalScrollView {
  def apply[LP <: ViewGroupLayoutParams[_, SHorizontalScrollView]]()(implicit context: android.content.Context, defaultLayoutParam: SHorizontalScrollView => LP): SHorizontalScrollView = {
    val v = new SHorizontalScrollView
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ProgressBar.html android.widget.ProgressBar]]`.
 */
class RichProgressBar[V <: android.widget.ProgressBar](val basis: V) extends TraitProgressBar[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ProgressBar.html android.widget.ProgressBar]]`. This contains several property accessors.
 */
trait TraitProgressBar[V <: android.widget.ProgressBar] extends TraitView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#isIndeterminate() isIndeterminate()]]`
   */
  @inline def indeterminate = basis.isIndeterminate

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setIndeterminate(boolean) setIndeterminate(boolean)]]`
   */
  @inline def indeterminate  (p: Boolean) =            indeterminate_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setIndeterminate(boolean) setIndeterminate(boolean)]]`
   */
  @inline def indeterminate_=(p: Boolean) = { basis.setIndeterminate(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#getIndeterminateDrawable() getIndeterminateDrawable()]]`
   */
  @inline def indeterminateDrawable = basis.getIndeterminateDrawable

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setIndeterminateDrawable(android.graphics.drawable.Drawable) setIndeterminateDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def indeterminateDrawable  (p: android.graphics.drawable.Drawable) =            indeterminateDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setIndeterminateDrawable(android.graphics.drawable.Drawable) setIndeterminateDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def indeterminateDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setIndeterminateDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#getInterpolator() getInterpolator()]]`
   */
  @inline def interpolator = basis.getInterpolator

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setInterpolator(android.view.animation.Interpolator) setInterpolator(android.view.animation.Interpolator)]]`
   */
  @inline def interpolator  (p: android.view.animation.Interpolator) =            interpolator_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setInterpolator(android.view.animation.Interpolator) setInterpolator(android.view.animation.Interpolator)]]`
   */
  @inline def interpolator_=(p: android.view.animation.Interpolator) = { basis.setInterpolator(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#getMax() getMax()]]`
   */
  @inline def max = basis.getMax

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setMax(int) setMax(int)]]`
   */
  @inline def max  (p: Int) =            max_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setMax(int) setMax(int)]]`
   */
  @inline def max_=(p: Int) = { basis.setMax(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#getProgress() getProgress()]]`
   */
  @inline def progress = basis.getProgress

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setProgress(int) setProgress(int)]]`
   */
  @inline def progress  (p: Int) =            progress_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setProgress(int) setProgress(int)]]`
   */
  @inline def progress_=(p: Int) = { basis.setProgress(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#getProgressDrawable() getProgressDrawable()]]`
   */
  @inline def progressDrawable = basis.getProgressDrawable

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setProgressDrawable(android.graphics.drawable.Drawable) setProgressDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def progressDrawable  (p: android.graphics.drawable.Drawable) =            progressDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setProgressDrawable(android.graphics.drawable.Drawable) setProgressDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def progressDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setProgressDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#getSecondaryProgress() getSecondaryProgress()]]`
   */
  @inline def secondaryProgress = basis.getSecondaryProgress

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setSecondaryProgress(int) setSecondaryProgress(int)]]`
   */
  @inline def secondaryProgress  (p: Int) =            secondaryProgress_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ProgressBar.html#setSecondaryProgress(int) setSecondaryProgress(int)]]`
   */
  @inline def secondaryProgress_=(p: Int) = { basis.setSecondaryProgress(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ProgressBar.html android.widget.ProgressBar]]`.
 */
class SProgressBar()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ProgressBar(context) with TraitProgressBar[SProgressBar] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SProgressBar {
  def apply[LP <: ViewGroupLayoutParams[_, SProgressBar]]()(implicit context: android.content.Context, defaultLayoutParam: SProgressBar => LP): SProgressBar = {
    val v = new SProgressBar
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ScrollView.html android.widget.ScrollView]]`.
 */
class RichScrollView[V <: android.widget.ScrollView](val basis: V) extends TraitScrollView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ScrollView.html android.widget.ScrollView]]`. This contains several property accessors.
 */
trait TraitScrollView[V <: android.widget.ScrollView] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#isFillViewport() isFillViewport()]]`
   */
  @inline def fillViewport = basis.isFillViewport

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#setFillViewport(boolean) setFillViewport(boolean)]]`
   */
  @inline def fillViewport  (p: Boolean) =            fillViewport_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#setFillViewport(boolean) setFillViewport(boolean)]]`
   */
  @inline def fillViewport_=(p: Boolean) = { basis.setFillViewport(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#getMaxScrollAmount() getMaxScrollAmount()]]`
   */
  @inline def maxScrollAmount = basis.getMaxScrollAmount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#isSmoothScrollingEnabled() isSmoothScrollingEnabled()]]`
   */
  @inline def smoothScrollingEnabled = basis.isSmoothScrollingEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#setSmoothScrollingEnabled(boolean) setSmoothScrollingEnabled(boolean)]]`
   */
  @inline def smoothScrollingEnabled  (p: Boolean) =            smoothScrollingEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ScrollView.html#setSmoothScrollingEnabled(boolean) setSmoothScrollingEnabled(boolean)]]`
   */
  @inline def smoothScrollingEnabled_=(p: Boolean) = { basis.setSmoothScrollingEnabled(p); basis }

  @inline def  enableSmoothScrolling()             = { basis.setSmoothScrollingEnabled(true ); basis }
  @inline def disableSmoothScrolling()             = { basis.setSmoothScrollingEnabled(false); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ScrollView.html android.widget.ScrollView]]`.
 */
class SScrollView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ScrollView(context) with TraitScrollView[SScrollView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SScrollView {
  def apply[LP <: ViewGroupLayoutParams[_, SScrollView]]()(implicit context: android.content.Context, defaultLayoutParam: SScrollView => LP): SScrollView = {
    val v = new SScrollView
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html android.widget.CursorTreeAdapter]]`.
 */
class RichCursorTreeAdapter[V <: android.widget.CursorTreeAdapter](val basis: V) extends TraitCursorTreeAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html android.widget.CursorTreeAdapter]]`. This contains several property accessors.
 */
trait TraitCursorTreeAdapter[V <: android.widget.CursorTreeAdapter] extends TraitBaseExpandableListAdapter[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getCursor() getCursor()]]`
   */
  @inline def cursor = basis.getCursor


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getFilter() getFilter()]]`
   */
  @inline def filter = basis.getFilter


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getFilterQueryProvider() getFilterQueryProvider()]]`
   */
  @inline def filterQueryProvider = basis.getFilterQueryProvider

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setFilterQueryProvider(android.widget.FilterQueryProvider) setFilterQueryProvider(android.widget.FilterQueryProvider)]]`
   */
  @inline def filterQueryProvider  (p: android.widget.FilterQueryProvider) =            filterQueryProvider_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setFilterQueryProvider(android.widget.FilterQueryProvider) setFilterQueryProvider(android.widget.FilterQueryProvider)]]`
   */
  @inline def filterQueryProvider_=(p: android.widget.FilterQueryProvider) = { basis.setFilterQueryProvider(p); basis }


  @inline def groupCursor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'groupCursor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setGroupCursor(android.database.Cursor) setGroupCursor(android.database.Cursor)]]`
   */
  @inline def groupCursor  (p: android.database.Cursor) =            groupCursor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setGroupCursor(android.database.Cursor) setGroupCursor(android.database.Cursor)]]`
   */
  @inline def groupCursor_=(p: android.database.Cursor) = { basis.setGroupCursor(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html android.widget.SimpleCursorAdapter]]`.
 */
class RichSimpleCursorAdapter[V <: android.widget.SimpleCursorAdapter](val basis: V) extends TraitSimpleCursorAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html android.widget.SimpleCursorAdapter]]`. This contains several property accessors.
 */
trait TraitSimpleCursorAdapter[V <: android.widget.SimpleCursorAdapter] extends TraitResourceCursorAdapter[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#getCursorToStringConverter() getCursorToStringConverter()]]`
   */
  @inline def cursorToStringConverter = basis.getCursorToStringConverter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter) setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)]]`
   */
  @inline def cursorToStringConverter  (p: android.widget.SimpleCursorAdapter.CursorToStringConverter) =            cursorToStringConverter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter) setCursorToStringConverter(android.widget.SimpleCursorAdapter.CursorToStringConverter)]]`
   */
  @inline def cursorToStringConverter_=(p: android.widget.SimpleCursorAdapter.CursorToStringConverter) = { basis.setCursorToStringConverter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#getStringConversionColumn() getStringConversionColumn()]]`
   */
  @inline def stringConversionColumn = basis.getStringConversionColumn

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setStringConversionColumn(int) setStringConversionColumn(int)]]`
   */
  @inline def stringConversionColumn  (p: Int) =            stringConversionColumn_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setStringConversionColumn(int) setStringConversionColumn(int)]]`
   */
  @inline def stringConversionColumn_=(p: Int) = { basis.setStringConversionColumn(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#getViewBinder() getViewBinder()]]`
   */
  @inline def viewBinder = basis.getViewBinder

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder) setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)]]`
   */
  @inline def viewBinder  (p: android.widget.SimpleCursorAdapter.ViewBinder) =            viewBinder_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder) setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)]]`
   */
  @inline def viewBinder_=(p: android.widget.SimpleCursorAdapter.ViewBinder) = { basis.setViewBinder(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html android.widget.BaseExpandableListAdapter]]`.
 */
class RichBaseExpandableListAdapter[V <: android.widget.BaseExpandableListAdapter](val basis: V) extends TraitBaseExpandableListAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html android.widget.BaseExpandableListAdapter]]`. This contains several property accessors.
 */
trait TraitBaseExpandableListAdapter[V <: android.widget.BaseExpandableListAdapter] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildTypeCount() getChildTypeCount()]]`
   */
  @inline def childTypeCount = basis.getChildTypeCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupCount() getGroupCount()]]`
   */
  @inline def groupCount = basis.getGroupCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupTypeCount() getGroupTypeCount()]]`
   */
  @inline def groupTypeCount = basis.getGroupTypeCount


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ViewSwitcher.html android.widget.ViewSwitcher]]`.
 */
class RichViewSwitcher[V <: android.widget.ViewSwitcher](val basis: V) extends TraitViewSwitcher[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ViewSwitcher.html android.widget.ViewSwitcher]]`. This contains several property accessors.
 */
trait TraitViewSwitcher[V <: android.widget.ViewSwitcher] extends TraitViewAnimator[V] {




  @inline def factory(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'factory'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewSwitcher.html#setFactory(android.widget.ViewSwitcher.ViewFactory) setFactory(android.widget.ViewSwitcher.ViewFactory)]]`
   */
  @inline def factory  (p: android.widget.ViewSwitcher.ViewFactory) =            factory_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewSwitcher.html#setFactory(android.widget.ViewSwitcher.ViewFactory) setFactory(android.widget.ViewSwitcher.ViewFactory)]]`
   */
  @inline def factory_=(p: android.widget.ViewSwitcher.ViewFactory) = { basis.setFactory(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewSwitcher.html#getNextView() getNextView()]]`
   */
  @inline def nextView = basis.getNextView


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ViewSwitcher.html android.widget.ViewSwitcher]]`.
 */
class SViewSwitcher()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ViewSwitcher(context) with TraitViewSwitcher[SViewSwitcher] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SViewSwitcher {
  def apply[LP <: ViewGroupLayoutParams[_, SViewSwitcher]]()(implicit context: android.content.Context, defaultLayoutParam: SViewSwitcher => LP): SViewSwitcher = {
    val v = new SViewSwitcher
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ZoomButton.html android.widget.ZoomButton]]`.
 */
class RichZoomButton[V <: android.widget.ZoomButton](val basis: V) extends TraitZoomButton[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ZoomButton.html android.widget.ZoomButton]]`. This contains several property accessors.
 */
trait TraitZoomButton[V <: android.widget.ZoomButton] extends TraitImageButton[V] {




  @inline def zoomSpeed(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'zoomSpeed'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButton.html#setZoomSpeed(long) setZoomSpeed(long)]]`
   */
  @inline def zoomSpeed  (p: Long) =            zoomSpeed_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ZoomButton.html#setZoomSpeed(long) setZoomSpeed(long)]]`
   */
  @inline def zoomSpeed_=(p: Long) = { basis.setZoomSpeed(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ZoomButton.html android.widget.ZoomButton]]`.
 */
class SZoomButton()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ZoomButton(context) with TraitZoomButton[SZoomButton] {

  def basis = this
  def this(imageResource: android.graphics.drawable.Drawable)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }

  def this(imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.imageDrawable = imageResource
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SZoomButton {
  def apply[LP <: ViewGroupLayoutParams[_, SZoomButton]]()(implicit context: android.content.Context, defaultLayoutParam: SZoomButton => LP): SZoomButton = {
    val v = new SZoomButton
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SZoomButton]](imageResource: android.graphics.drawable.Drawable)
      (implicit context: Context, defaultLayoutParam: (SZoomButton) => LP): SZoomButton = {
    val v = new SZoomButton
    v.imageDrawable = imageResource
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SZoomButton]](imageResource: android.graphics.drawable.Drawable, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SZoomButton) => LP): SZoomButton = {
    apply(imageResource, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SZoomButton]](imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SZoomButton) => LP): SZoomButton = {
    val v = new SZoomButton
    v.imageDrawable = imageResource
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Gallery.html android.widget.Gallery]]`.
 */
class RichGallery[V <: android.widget.Gallery](val basis: V) extends TraitGallery[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Gallery.html android.widget.Gallery]]`. This contains several property accessors.
 */
trait TraitGallery[V <: android.widget.Gallery] extends TraitAbsSpinner[V] {




  @inline def animationDuration(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'animationDuration'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setAnimationDuration(int) setAnimationDuration(int)]]`
   */
  @inline def animationDuration  (p: Int) =            animationDuration_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setAnimationDuration(int) setAnimationDuration(int)]]`
   */
  @inline def animationDuration_=(p: Int) = { basis.setAnimationDuration(p); basis }


  @inline def callbackDuringFling(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'callbackDuringFling'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setCallbackDuringFling(boolean) setCallbackDuringFling(boolean)]]`
   */
  @inline def callbackDuringFling  (p: Boolean) =            callbackDuringFling_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setCallbackDuringFling(boolean) setCallbackDuringFling(boolean)]]`
   */
  @inline def callbackDuringFling_=(p: Boolean) = { basis.setCallbackDuringFling(p); basis }


  @inline def gravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'gravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity  (p: Int) =            gravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity_=(p: Int) = { basis.setGravity(p); basis }


  @inline def spacing(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'spacing'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setSpacing(int) setSpacing(int)]]`
   */
  @inline def spacing  (p: Int) =            spacing_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setSpacing(int) setSpacing(int)]]`
   */
  @inline def spacing_=(p: Int) = { basis.setSpacing(p); basis }


  @inline def unselectedAlpha(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'unselectedAlpha'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setUnselectedAlpha(float) setUnselectedAlpha(float)]]`
   */
  @inline def unselectedAlpha  (p: Float) =            unselectedAlpha_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Gallery.html#setUnselectedAlpha(float) setUnselectedAlpha(float)]]`
   */
  @inline def unselectedAlpha_=(p: Float) = { basis.setUnselectedAlpha(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/Gallery.html android.widget.Gallery]]`.
 */
class SGallery()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.Gallery(context) with TraitGallery[SGallery] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SGallery {
  def apply[LP <: ViewGroupLayoutParams[_, SGallery]]()(implicit context: android.content.Context, defaultLayoutParam: SGallery => LP): SGallery = {
    val v = new SGallery
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/FilterQueryProvider.html android.widget.FilterQueryProvider]]`.
 */
class RichFilterQueryProvider[V <: android.widget.FilterQueryProvider](val basis: V) extends TraitFilterQueryProvider[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/FilterQueryProvider.html android.widget.FilterQueryProvider]]`. This contains several property accessors.
 */
trait TraitFilterQueryProvider[V <: android.widget.FilterQueryProvider] {

  def basis: V



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/CompoundButton.html android.widget.CompoundButton]]`.
 */
class RichCompoundButton[V <: android.widget.CompoundButton](val basis: V) extends TraitCompoundButton[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/CompoundButton.html android.widget.CompoundButton]]`. This contains several property accessors.
 */
trait TraitCompoundButton[V <: android.widget.CompoundButton] extends TraitButton[V] {




  @inline def buttonDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'buttonDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setButtonDrawable(int) setButtonDrawable(int)]]`
   */
  @inline def buttonDrawable  (p: Int) =            buttonDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setButtonDrawable(int) setButtonDrawable(int)]]`
   */
  @inline def buttonDrawable_=(p: Int) = { basis.setButtonDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setButtonDrawable(android.graphics.drawable.Drawable) setButtonDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def buttonDrawable  (p: android.graphics.drawable.Drawable) =            buttonDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setButtonDrawable(android.graphics.drawable.Drawable) setButtonDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def buttonDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setButtonDrawable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#isChecked() isChecked()]]`
   */
  @inline def checked = basis.isChecked

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setChecked(boolean) setChecked(boolean)]]`
   */
  @inline def checked  (p: Boolean) =            checked_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setChecked(boolean) setChecked(boolean)]]`
   */
  @inline def checked_=(p: Boolean) = { basis.setChecked(p); basis }


  @inline def onCheckedChangeListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onCheckedChangeListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener) setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)]]`
   */
  @inline def onCheckedChangeListener  (p: android.widget.CompoundButton.OnCheckedChangeListener) =            onCheckedChangeListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/CompoundButton.html#setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener) setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)]]`
   */
  @inline def onCheckedChangeListener_=(p: android.widget.CompoundButton.OnCheckedChangeListener) = { basis.setOnCheckedChangeListener(p); basis }


  @inline def onCheckedChanged[U](f: (android.widget.CompoundButton, Boolean) => U): V = {
    basis.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener {
      def onCheckedChanged(p1: android.widget.CompoundButton, p2: Boolean): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onCheckedChanged[U](f:  => U): V = {
    basis.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener {
      def onCheckedChanged(p1: android.widget.CompoundButton, p2: Boolean): Unit = { f }
    })
    basis
  }
}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Filter.html android.widget.Filter]]`.
 */
class RichFilter[V <: android.widget.Filter](val basis: V) extends TraitFilter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Filter.html android.widget.Filter]]`. This contains several property accessors.
 */
trait TraitFilter[V <: android.widget.Filter] {

  def basis: V



}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/WrapperListAdapter.html android.widget.WrapperListAdapter]]`.
 */
class RichWrapperListAdapter[V <: android.widget.WrapperListAdapter](val basis: V) extends TraitWrapperListAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/WrapperListAdapter.html android.widget.WrapperListAdapter]]`. This contains several property accessors.
 */
trait TraitWrapperListAdapter[V <: android.widget.WrapperListAdapter] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/WrapperListAdapter.html#getWrappedAdapter() getWrappedAdapter()]]`
   */
  @inline def wrappedAdapter = basis.getWrappedAdapter


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/FrameLayout.html android.widget.FrameLayout]]`.
 */
class RichFrameLayout[V <: android.widget.FrameLayout](val basis: V) extends TraitFrameLayout[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/FrameLayout.html android.widget.FrameLayout]]`. This contains several property accessors.
 */
trait TraitFrameLayout[V <: android.widget.FrameLayout] extends TraitViewGroup[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#getConsiderGoneChildrenWhenMeasuring() getConsiderGoneChildrenWhenMeasuring()]]`
   */
  @inline def considerGoneChildrenWhenMeasuring = basis.getConsiderGoneChildrenWhenMeasuring


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#getForeground() getForeground()]]`
   */
  @inline def foreground = basis.getForeground

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#setForeground(android.graphics.drawable.Drawable) setForeground(android.graphics.drawable.Drawable)]]`
   */
  @inline def foreground  (p: android.graphics.drawable.Drawable) =            foreground_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#setForeground(android.graphics.drawable.Drawable) setForeground(android.graphics.drawable.Drawable)]]`
   */
  @inline def foreground_=(p: android.graphics.drawable.Drawable) = { basis.setForeground(p); basis }


  @inline def foregroundGravity(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'foregroundGravity'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#setForegroundGravity(int) setForegroundGravity(int)]]`
   */
  @inline def foregroundGravity  (p: Int) =            foregroundGravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#setForegroundGravity(int) setForegroundGravity(int)]]`
   */
  @inline def foregroundGravity_=(p: Int) = { basis.setForegroundGravity(p); basis }


  @inline def measureAllChildren(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'measureAllChildren'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#setMeasureAllChildren(boolean) setMeasureAllChildren(boolean)]]`
   */
  @inline def measureAllChildren  (p: Boolean) =            measureAllChildren_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/FrameLayout.html#setMeasureAllChildren(boolean) setMeasureAllChildren(boolean)]]`
   */
  @inline def measureAllChildren_=(p: Boolean) = { basis.setMeasureAllChildren(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/FrameLayout.html android.widget.FrameLayout]]`.
 */
class SFrameLayout()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.FrameLayout(context) with TraitFrameLayout[SFrameLayout] {

  def basis = this
  override val parentViewGroup = parentVGroup
  implicit def defaultLayoutParams[V <: View](v: V): LayoutParams[V] = new LayoutParams(v)

  class LayoutParams[V <: View](v: V) extends FrameLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT) with ViewGroupMarginLayoutParams[LayoutParams[V], V] {

    def basis = this

    v.setLayoutParams(this)

    def Gravity(g: Int) = {
      gravity = g
      this
    }

    def parent = SFrameLayout.this

    def >> : V = v

  }
}

object SFrameLayout {
  def apply[LP <: ViewGroupLayoutParams[_, SFrameLayout]]()(implicit context: android.content.Context, defaultLayoutParam: SFrameLayout => LP): SFrameLayout = {
    val v = new SFrameLayout
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Adapter.html android.widget.Adapter]]`.
 */
class RichAdapter[V <: android.widget.Adapter](val basis: V) extends TraitAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Adapter.html android.widget.Adapter]]`. This contains several property accessors.
 */
trait TraitAdapter[V <: android.widget.Adapter] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Adapter.html#getCount() getCount()]]`
   */
  @inline def count = basis.getCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Adapter.html#getViewTypeCount() getViewTypeCount()]]`
   */
  @inline def viewTypeCount = basis.getViewTypeCount


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/TextView.html android.widget.TextView]]`.
 */
class RichTextView[V <: android.widget.TextView](val basis: V) extends TraitTextView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/TextView.html android.widget.TextView]]`. This contains several property accessors.
 */
trait TraitTextView[V <: android.widget.TextView] extends TraitView[V] {


  import android.graphics.drawable.Drawable

   def drawableLeft(img: Drawable) = {
     basis.setCompoundDrawablesWithIntrinsicBounds(img, null, null, null)
     basis
   }

   def drawableTop(img: Drawable) = {
     basis.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null)
     basis
   }

   def drawableRight(img: Drawable) = {
     basis.setCompoundDrawablesWithIntrinsicBounds(null, null, img, null)
     basis
   }

   def drawableBottom(img: Drawable) = {
     basis.setCompoundDrawablesWithIntrinsicBounds(null, null, null, img)
     basis
   }

    @inline def textSize  (p: Int) =            textSize_=  (p)
    @inline def textSize_=(p: Int) = { basis.setTextSize    (android.util.TypedValue.COMPLEX_UNIT_PX, p); basis }

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getAutoLinkMask() getAutoLinkMask()]]`
   */
  @inline def autoLinkMask = basis.getAutoLinkMask

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setAutoLinkMask(int) setAutoLinkMask(int)]]`
   */
  @inline def autoLinkMask  (p: Int) =            autoLinkMask_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setAutoLinkMask(int) setAutoLinkMask(int)]]`
   */
  @inline def autoLinkMask_=(p: Int) = { basis.setAutoLinkMask(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawablePadding() getCompoundDrawablePadding()]]`
   */
  @inline def compoundDrawablePadding = basis.getCompoundDrawablePadding

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablePadding(int) setCompoundDrawablePadding(int)]]`
   */
  @inline def compoundDrawablePadding  (p: Int) =            compoundDrawablePadding_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablePadding(int) setCompoundDrawablePadding(int)]]`
   */
  @inline def compoundDrawablePadding_=(p: Int) = { basis.setCompoundDrawablePadding(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawables() getCompoundDrawables()]]`
   */
  @inline def compoundDrawables = basis.getCompoundDrawables


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingBottom() getCompoundPaddingBottom()]]`
   */
  @inline def compoundPaddingBottom = basis.getCompoundPaddingBottom


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingLeft() getCompoundPaddingLeft()]]`
   */
  @inline def compoundPaddingLeft = basis.getCompoundPaddingLeft


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingRight() getCompoundPaddingRight()]]`
   */
  @inline def compoundPaddingRight = basis.getCompoundPaddingRight


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingTop() getCompoundPaddingTop()]]`
   */
  @inline def compoundPaddingTop = basis.getCompoundPaddingTop


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCurrentHintTextColor() getCurrentHintTextColor()]]`
   */
  @inline def currentHintTextColor = basis.getCurrentHintTextColor


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getCurrentTextColor() getCurrentTextColor()]]`
   */
  @inline def currentTextColor = basis.getCurrentTextColor


  @inline def cursorVisible(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'cursorVisible'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setCursorVisible(boolean) setCursorVisible(boolean)]]`
   */
  @inline def cursorVisible  (p: Boolean) =            cursorVisible_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setCursorVisible(boolean) setCursorVisible(boolean)]]`
   */
  @inline def cursorVisible_=(p: Boolean) = { basis.setCursorVisible(p); basis }


  @inline def editableFactory(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'editableFactory'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setEditableFactory(android.text.Editable.Factory) setEditableFactory(android.text.Editable.Factory)]]`
   */
  @inline def editableFactory  (p: android.text.Editable.Factory) =            editableFactory_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setEditableFactory(android.text.Editable.Factory) setEditableFactory(android.text.Editable.Factory)]]`
   */
  @inline def editableFactory_=(p: android.text.Editable.Factory) = { basis.setEditableFactory(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getEditableText() getEditableText()]]`
   */
  @inline def editableText = basis.getEditableText


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getEllipsize() getEllipsize()]]`
   */
  @inline def ellipsize = basis.getEllipsize

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setEllipsize(android.text.TextUtils.TruncateAt) setEllipsize(android.text.TextUtils.TruncateAt)]]`
   */
  @inline def ellipsize  (p: android.text.TextUtils.TruncateAt) =            ellipsize_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setEllipsize(android.text.TextUtils.TruncateAt) setEllipsize(android.text.TextUtils.TruncateAt)]]`
   */
  @inline def ellipsize_=(p: android.text.TextUtils.TruncateAt) = { basis.setEllipsize(p); basis }


  @inline def ems(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'ems'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setEms(int) setEms(int)]]`
   */
  @inline def ems  (p: Int) =            ems_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setEms(int) setEms(int)]]`
   */
  @inline def ems_=(p: Int) = { basis.setEms(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getError() getError()]]`
   */
  @inline def error = basis.getError

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setError(java.lang.CharSequence) setError(java.lang.CharSequence)]]`
   */
  @inline def error  (p: java.lang.CharSequence) =            error_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setError(java.lang.CharSequence) setError(java.lang.CharSequence)]]`
   */
  @inline def error_=(p: java.lang.CharSequence) = { basis.setError(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getExtendedPaddingBottom() getExtendedPaddingBottom()]]`
   */
  @inline def extendedPaddingBottom = basis.getExtendedPaddingBottom


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getExtendedPaddingTop() getExtendedPaddingTop()]]`
   */
  @inline def extendedPaddingTop = basis.getExtendedPaddingTop


  @inline def extractedText(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'extractedText'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setExtractedText(android.view.inputmethod.ExtractedText) setExtractedText(android.view.inputmethod.ExtractedText)]]`
   */
  @inline def extractedText  (p: android.view.inputmethod.ExtractedText) =            extractedText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setExtractedText(android.view.inputmethod.ExtractedText) setExtractedText(android.view.inputmethod.ExtractedText)]]`
   */
  @inline def extractedText_=(p: android.view.inputmethod.ExtractedText) = { basis.setExtractedText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getFilters() getFilters()]]`
   */
  @inline def filters = basis.getFilters

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setFilters(android.text.InputFilter[]) setFilters(android.text.InputFilter[])]]`
   */
  @inline def filters  (p: Array[android.text.InputFilter]) =            filters_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setFilters(android.text.InputFilter[]) setFilters(android.text.InputFilter[])]]`
   */
  @inline def filters_=(p: Array[android.text.InputFilter]) = { basis.setFilters(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getFreezesText() getFreezesText()]]`
   */
  @inline def freezesText = basis.getFreezesText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setFreezesText(boolean) setFreezesText(boolean)]]`
   */
  @inline def freezesText  (p: Boolean) =            freezesText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setFreezesText(boolean) setFreezesText(boolean)]]`
   */
  @inline def freezesText_=(p: Boolean) = { basis.setFreezesText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getGravity() getGravity()]]`
   */
  @inline def gravity = basis.getGravity

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity  (p: Int) =            gravity_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setGravity(int) setGravity(int)]]`
   */
  @inline def gravity_=(p: Int) = { basis.setGravity(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHeight(int) setHeight(int)]]`
   */
  @inline def height  (p: Int) =            height_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHeight(int) setHeight(int)]]`
   */
  @inline def height_=(p: Int) = { basis.setHeight(p); basis }


  @inline def highlightColor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'highlightColor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHighlightColor(int) setHighlightColor(int)]]`
   */
  @inline def highlightColor  (p: Int) =            highlightColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHighlightColor(int) setHighlightColor(int)]]`
   */
  @inline def highlightColor_=(p: Int) = { basis.setHighlightColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getHint() getHint()]]`
   */
  @inline def hint = basis.getHint

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHint(int) setHint(int)]]`
   */
  @inline def hint  (p: Int) =            hint_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHint(int) setHint(int)]]`
   */
  @inline def hint_=(p: Int) = { basis.setHint(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHint(java.lang.CharSequence) setHint(java.lang.CharSequence)]]`
   */
  @inline def hint  (p: java.lang.CharSequence) =            hint_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHint(java.lang.CharSequence) setHint(java.lang.CharSequence)]]`
   */
  @inline def hint_=(p: java.lang.CharSequence) = { basis.setHint(p); basis }


  @inline def hintTextColor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'hintTextColor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHintTextColor(int) setHintTextColor(int)]]`
   */
  @inline def hintTextColor  (p: Int) =            hintTextColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHintTextColor(int) setHintTextColor(int)]]`
   */
  @inline def hintTextColor_=(p: Int) = { basis.setHintTextColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHintTextColor(android.content.res.ColorStateList) setHintTextColor(android.content.res.ColorStateList)]]`
   */
  @inline def hintTextColor  (p: android.content.res.ColorStateList) =            hintTextColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHintTextColor(android.content.res.ColorStateList) setHintTextColor(android.content.res.ColorStateList)]]`
   */
  @inline def hintTextColor_=(p: android.content.res.ColorStateList) = { basis.setHintTextColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getHintTextColors() getHintTextColors()]]`
   */
  @inline def hintTextColors = basis.getHintTextColors


  @inline def horizontallyScrolling(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'horizontallyScrolling'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHorizontallyScrolling(boolean) setHorizontallyScrolling(boolean)]]`
   */
  @inline def horizontallyScrolling  (p: Boolean) =            horizontallyScrolling_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setHorizontallyScrolling(boolean) setHorizontallyScrolling(boolean)]]`
   */
  @inline def horizontallyScrolling_=(p: Boolean) = { basis.setHorizontallyScrolling(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getImeActionId() getImeActionId()]]`
   */
  @inline def imeActionId = basis.getImeActionId


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getImeActionLabel() getImeActionLabel()]]`
   */
  @inline def imeActionLabel = basis.getImeActionLabel


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getImeOptions() getImeOptions()]]`
   */
  @inline def imeOptions = basis.getImeOptions

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setImeOptions(int) setImeOptions(int)]]`
   */
  @inline def imeOptions  (p: Int) =            imeOptions_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setImeOptions(int) setImeOptions(int)]]`
   */
  @inline def imeOptions_=(p: Int) = { basis.setImeOptions(p); basis }


  @inline def includeFontPadding(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'includeFontPadding'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setIncludeFontPadding(boolean) setIncludeFontPadding(boolean)]]`
   */
  @inline def includeFontPadding  (p: Boolean) =            includeFontPadding_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setIncludeFontPadding(boolean) setIncludeFontPadding(boolean)]]`
   */
  @inline def includeFontPadding_=(p: Boolean) = { basis.setIncludeFontPadding(p); basis }


  @inline def inputExtras(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'inputExtras'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setInputExtras(int) setInputExtras(int)]]`
   */
  @inline def inputExtras  (p: Int) =            inputExtras_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setInputExtras(int) setInputExtras(int)]]`
   */
  @inline def inputExtras_=(p: Int) = { basis.setInputExtras(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getInputType() getInputType()]]`
   */
  @inline def inputType = basis.getInputType

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setInputType(int) setInputType(int)]]`
   */
  @inline def inputType  (p: Int) =            inputType_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setInputType(int) setInputType(int)]]`
   */
  @inline def inputType_=(p: Int) = { basis.setInputType(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getKeyListener() getKeyListener()]]`
   */
  @inline def keyListener = basis.getKeyListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setKeyListener(android.text.method.KeyListener) setKeyListener(android.text.method.KeyListener)]]`
   */
  @inline def keyListener  (p: android.text.method.KeyListener) =            keyListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setKeyListener(android.text.method.KeyListener) setKeyListener(android.text.method.KeyListener)]]`
   */
  @inline def keyListener_=(p: android.text.method.KeyListener) = { basis.setKeyListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getLayout() getLayout()]]`
   */
  @inline def layout = basis.getLayout


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getLineCount() getLineCount()]]`
   */
  @inline def lineCount = basis.getLineCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getLineHeight() getLineHeight()]]`
   */
  @inline def lineHeight = basis.getLineHeight


  @inline def lines(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'lines'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLines(int) setLines(int)]]`
   */
  @inline def lines  (p: Int) =            lines_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLines(int) setLines(int)]]`
   */
  @inline def lines_=(p: Int) = { basis.setLines(p); basis }


  @inline def linkTextColor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'linkTextColor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLinkTextColor(int) setLinkTextColor(int)]]`
   */
  @inline def linkTextColor  (p: Int) =            linkTextColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLinkTextColor(int) setLinkTextColor(int)]]`
   */
  @inline def linkTextColor_=(p: Int) = { basis.setLinkTextColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLinkTextColor(android.content.res.ColorStateList) setLinkTextColor(android.content.res.ColorStateList)]]`
   */
  @inline def linkTextColor  (p: android.content.res.ColorStateList) =            linkTextColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLinkTextColor(android.content.res.ColorStateList) setLinkTextColor(android.content.res.ColorStateList)]]`
   */
  @inline def linkTextColor_=(p: android.content.res.ColorStateList) = { basis.setLinkTextColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getLinkTextColors() getLinkTextColors()]]`
   */
  @inline def linkTextColors = basis.getLinkTextColors


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getLinksClickable() getLinksClickable()]]`
   */
  @inline def linksClickable = basis.getLinksClickable

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLinksClickable(boolean) setLinksClickable(boolean)]]`
   */
  @inline def linksClickable  (p: Boolean) =            linksClickable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setLinksClickable(boolean) setLinksClickable(boolean)]]`
   */
  @inline def linksClickable_=(p: Boolean) = { basis.setLinksClickable(p); basis }


  @inline def marqueeRepeatLimit(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'marqueeRepeatLimit'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMarqueeRepeatLimit(int) setMarqueeRepeatLimit(int)]]`
   */
  @inline def marqueeRepeatLimit  (p: Int) =            marqueeRepeatLimit_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMarqueeRepeatLimit(int) setMarqueeRepeatLimit(int)]]`
   */
  @inline def marqueeRepeatLimit_=(p: Int) = { basis.setMarqueeRepeatLimit(p); basis }


  @inline def maxEms(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'maxEms'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxEms(int) setMaxEms(int)]]`
   */
  @inline def maxEms  (p: Int) =            maxEms_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxEms(int) setMaxEms(int)]]`
   */
  @inline def maxEms_=(p: Int) = { basis.setMaxEms(p); basis }


  @inline def maxHeight(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'maxHeight'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxHeight(int) setMaxHeight(int)]]`
   */
  @inline def maxHeight  (p: Int) =            maxHeight_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxHeight(int) setMaxHeight(int)]]`
   */
  @inline def maxHeight_=(p: Int) = { basis.setMaxHeight(p); basis }


  @inline def maxLines(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'maxLines'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxLines(int) setMaxLines(int)]]`
   */
  @inline def maxLines  (p: Int) =            maxLines_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxLines(int) setMaxLines(int)]]`
   */
  @inline def maxLines_=(p: Int) = { basis.setMaxLines(p); basis }


  @inline def maxWidth(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'maxWidth'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxWidth(int) setMaxWidth(int)]]`
   */
  @inline def maxWidth  (p: Int) =            maxWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMaxWidth(int) setMaxWidth(int)]]`
   */
  @inline def maxWidth_=(p: Int) = { basis.setMaxWidth(p); basis }


  @inline def minEms(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'minEms'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinEms(int) setMinEms(int)]]`
   */
  @inline def minEms  (p: Int) =            minEms_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinEms(int) setMinEms(int)]]`
   */
  @inline def minEms_=(p: Int) = { basis.setMinEms(p); basis }


  @inline def minHeight(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'minHeight'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinHeight(int) setMinHeight(int)]]`
   */
  @inline def minHeight  (p: Int) =            minHeight_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinHeight(int) setMinHeight(int)]]`
   */
  @inline def minHeight_=(p: Int) = { basis.setMinHeight(p); basis }


  @inline def minLines(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'minLines'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinLines(int) setMinLines(int)]]`
   */
  @inline def minLines  (p: Int) =            minLines_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinLines(int) setMinLines(int)]]`
   */
  @inline def minLines_=(p: Int) = { basis.setMinLines(p); basis }


  @inline def minWidth(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'minWidth'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinWidth(int) setMinWidth(int)]]`
   */
  @inline def minWidth  (p: Int) =            minWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMinWidth(int) setMinWidth(int)]]`
   */
  @inline def minWidth_=(p: Int) = { basis.setMinWidth(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getMovementMethod() getMovementMethod()]]`
   */
  @inline def movementMethod = basis.getMovementMethod

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMovementMethod(android.text.method.MovementMethod) setMovementMethod(android.text.method.MovementMethod)]]`
   */
  @inline def movementMethod  (p: android.text.method.MovementMethod) =            movementMethod_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setMovementMethod(android.text.method.MovementMethod) setMovementMethod(android.text.method.MovementMethod)]]`
   */
  @inline def movementMethod_=(p: android.text.method.MovementMethod) = { basis.setMovementMethod(p); basis }


  @inline def onEditorActionListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onEditorActionListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setOnEditorActionListener(android.widget.TextView.OnEditorActionListener) setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)]]`
   */
  @inline def onEditorActionListener  (p: android.widget.TextView.OnEditorActionListener) =            onEditorActionListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setOnEditorActionListener(android.widget.TextView.OnEditorActionListener) setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)]]`
   */
  @inline def onEditorActionListener_=(p: android.widget.TextView.OnEditorActionListener) = { basis.setOnEditorActionListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getPaint() getPaint()]]`
   */
  @inline def paint = basis.getPaint


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getPaintFlags() getPaintFlags()]]`
   */
  @inline def paintFlags = basis.getPaintFlags

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setPaintFlags(int) setPaintFlags(int)]]`
   */
  @inline def paintFlags  (p: Int) =            paintFlags_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setPaintFlags(int) setPaintFlags(int)]]`
   */
  @inline def paintFlags_=(p: Int) = { basis.setPaintFlags(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getPrivateImeOptions() getPrivateImeOptions()]]`
   */
  @inline def privateImeOptions = basis.getPrivateImeOptions

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setPrivateImeOptions(java.lang.String) setPrivateImeOptions(java.lang.String)]]`
   */
  @inline def privateImeOptions  (p: java.lang.String) =            privateImeOptions_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setPrivateImeOptions(java.lang.String) setPrivateImeOptions(java.lang.String)]]`
   */
  @inline def privateImeOptions_=(p: java.lang.String) = { basis.setPrivateImeOptions(p); basis }


  @inline def rawInputType(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'rawInputType'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setRawInputType(int) setRawInputType(int)]]`
   */
  @inline def rawInputType  (p: Int) =            rawInputType_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setRawInputType(int) setRawInputType(int)]]`
   */
  @inline def rawInputType_=(p: Int) = { basis.setRawInputType(p); basis }


  @inline def scroller(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'scroller'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setScroller(android.widget.Scroller) setScroller(android.widget.Scroller)]]`
   */
  @inline def scroller  (p: android.widget.Scroller) =            scroller_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setScroller(android.widget.Scroller) setScroller(android.widget.Scroller)]]`
   */
  @inline def scroller_=(p: android.widget.Scroller) = { basis.setScroller(p); basis }


  @inline def selectAllOnFocus(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'selectAllOnFocus'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setSelectAllOnFocus(boolean) setSelectAllOnFocus(boolean)]]`
   */
  @inline def selectAllOnFocus  (p: Boolean) =            selectAllOnFocus_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setSelectAllOnFocus(boolean) setSelectAllOnFocus(boolean)]]`
   */
  @inline def selectAllOnFocus_=(p: Boolean) = { basis.setSelectAllOnFocus(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getSelectionEnd() getSelectionEnd()]]`
   */
  @inline def selectionEnd = basis.getSelectionEnd


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getSelectionStart() getSelectionStart()]]`
   */
  @inline def selectionStart = basis.getSelectionStart


  @inline def singleLine(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'singleLine'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setSingleLine(boolean) setSingleLine(boolean)]]`
   */
  @inline def singleLine  (p: Boolean) =            singleLine_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setSingleLine(boolean) setSingleLine(boolean)]]`
   */
  @inline def singleLine_=(p: Boolean) = { basis.setSingleLine(p); basis }


  @inline def spannableFactory(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'spannableFactory'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setSpannableFactory(android.text.Spannable.Factory) setSpannableFactory(android.text.Spannable.Factory)]]`
   */
  @inline def spannableFactory  (p: android.text.Spannable.Factory) =            spannableFactory_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setSpannableFactory(android.text.Spannable.Factory) setSpannableFactory(android.text.Spannable.Factory)]]`
   */
  @inline def spannableFactory_=(p: android.text.Spannable.Factory) = { basis.setSpannableFactory(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getText() getText()]]`
   */
  @inline def text = basis.getText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setText(int) setText(int)]]`
   */
  @inline def text  (p: Int) =            text_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setText(int) setText(int)]]`
   */
  @inline def text_=(p: Int) = { basis.setText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setText(java.lang.CharSequence) setText(java.lang.CharSequence)]]`
   */
  @inline def text  (p: java.lang.CharSequence) =            text_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setText(java.lang.CharSequence) setText(java.lang.CharSequence)]]`
   */
  @inline def text_=(p: java.lang.CharSequence) = { basis.setText(p); basis }


  @inline def textColor(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'textColor'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextColor(int) setTextColor(int)]]`
   */
  @inline def textColor  (p: Int) =            textColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextColor(int) setTextColor(int)]]`
   */
  @inline def textColor_=(p: Int) = { basis.setTextColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextColor(android.content.res.ColorStateList) setTextColor(android.content.res.ColorStateList)]]`
   */
  @inline def textColor  (p: android.content.res.ColorStateList) =            textColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextColor(android.content.res.ColorStateList) setTextColor(android.content.res.ColorStateList)]]`
   */
  @inline def textColor_=(p: android.content.res.ColorStateList) = { basis.setTextColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTextColors() getTextColors()]]`
   */
  @inline def textColors = basis.getTextColors


  @inline def textKeepState(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'textKeepState'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextKeepState(java.lang.CharSequence) setTextKeepState(java.lang.CharSequence)]]`
   */
  @inline def textKeepState  (p: java.lang.CharSequence) =            textKeepState_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextKeepState(java.lang.CharSequence) setTextKeepState(java.lang.CharSequence)]]`
   */
  @inline def textKeepState_=(p: java.lang.CharSequence) = { basis.setTextKeepState(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTextScaleX() getTextScaleX()]]`
   */
  @inline def textScaleX = basis.getTextScaleX

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextScaleX(float) setTextScaleX(float)]]`
   */
  @inline def textScaleX  (p: Float) =            textScaleX_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextScaleX(float) setTextScaleX(float)]]`
   */
  @inline def textScaleX_=(p: Float) = { basis.setTextScaleX(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTextSize() getTextSize()]]`
   */
  @inline def textSize = basis.getTextSize

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextSize(float) setTextSize(float)]]`
   */
  @inline def textSize  (p: Float) =            textSize_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTextSize(float) setTextSize(float)]]`
   */
  @inline def textSize_=(p: Float) = { basis.setTextSize(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingBottom() getTotalPaddingBottom()]]`
   */
  @inline def totalPaddingBottom = basis.getTotalPaddingBottom


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingLeft() getTotalPaddingLeft()]]`
   */
  @inline def totalPaddingLeft = basis.getTotalPaddingLeft


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingRight() getTotalPaddingRight()]]`
   */
  @inline def totalPaddingRight = basis.getTotalPaddingRight


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingTop() getTotalPaddingTop()]]`
   */
  @inline def totalPaddingTop = basis.getTotalPaddingTop


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTransformationMethod() getTransformationMethod()]]`
   */
  @inline def transformationMethod = basis.getTransformationMethod

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTransformationMethod(android.text.method.TransformationMethod) setTransformationMethod(android.text.method.TransformationMethod)]]`
   */
  @inline def transformationMethod  (p: android.text.method.TransformationMethod) =            transformationMethod_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTransformationMethod(android.text.method.TransformationMethod) setTransformationMethod(android.text.method.TransformationMethod)]]`
   */
  @inline def transformationMethod_=(p: android.text.method.TransformationMethod) = { basis.setTransformationMethod(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getTypeface() getTypeface()]]`
   */
  @inline def typeface = basis.getTypeface

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTypeface(android.graphics.Typeface) setTypeface(android.graphics.Typeface)]]`
   */
  @inline def typeface  (p: android.graphics.Typeface) =            typeface_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setTypeface(android.graphics.Typeface) setTypeface(android.graphics.Typeface)]]`
   */
  @inline def typeface_=(p: android.graphics.Typeface) = { basis.setTypeface(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#getUrls() getUrls()]]`
   */
  @inline def urls = basis.getUrls


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setWidth(int) setWidth(int)]]`
   */
  @inline def width  (p: Int) =            width_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/TextView.html#setWidth(int) setWidth(int)]]`
   */
  @inline def width_=(p: Int) = { basis.setWidth(p); basis }


  @inline def afterTextChanged[U](f: android.text.Editable => U): V = {
    basis.addTextChangedListener(new android.text.TextWatcher {
      def afterTextChanged(p: android.text.Editable): Unit = { f(p) }
      def beforeTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
      def onTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
    })
    basis
  }

  @inline def afterTextChanged[U](f:  => U): V = {
    basis.addTextChangedListener(new android.text.TextWatcher {
      def afterTextChanged(p: android.text.Editable): Unit = { f }
      def beforeTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
      def onTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
    })
    basis
  }

  @inline def beforeTextChanged[U](f: (java.lang.CharSequence, Int, Int, Int) => U): V = {
    basis.addTextChangedListener(new android.text.TextWatcher {
      def afterTextChanged(p: android.text.Editable): Unit = {  }
      def beforeTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = { f(p1, p2, p3, p4) }
      def onTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
    })
    basis
  }

  @inline def beforeTextChanged[U](f:  => U): V = {
    basis.addTextChangedListener(new android.text.TextWatcher {
      def afterTextChanged(p: android.text.Editable): Unit = {  }
      def beforeTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = { f }
      def onTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
    })
    basis
  }

  @inline def onEditorAction(f: (android.widget.TextView, Int, android.view.KeyEvent) => Boolean): V = {
    basis.setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener {
      def onEditorAction(p1: android.widget.TextView, p2: Int, p3: android.view.KeyEvent): Boolean = { f(p1, p2, p3) }
    })
    basis
  }

  @inline def onEditorAction(f:  => Boolean): V = {
    basis.setOnEditorActionListener(new android.widget.TextView.OnEditorActionListener {
      def onEditorAction(p1: android.widget.TextView, p2: Int, p3: android.view.KeyEvent): Boolean = { f }
    })
    basis
  }

  @inline def onTextChanged[U](f: (java.lang.CharSequence, Int, Int, Int) => U): V = {
    basis.addTextChangedListener(new android.text.TextWatcher {
      def afterTextChanged(p: android.text.Editable): Unit = {  }
      def beforeTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
      def onTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = { f(p1, p2, p3, p4) }
    })
    basis
  }

  @inline def onTextChanged[U](f:  => U): V = {
    basis.addTextChangedListener(new android.text.TextWatcher {
      def afterTextChanged(p: android.text.Editable): Unit = {  }
      def beforeTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = {  }
      def onTextChanged(p1: java.lang.CharSequence, p2: Int, p3: Int, p4: Int): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/TextView.html android.widget.TextView]]`.
 */
class STextView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.TextView(context) with TraitTextView[STextView] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object STextView {
  def apply[LP <: ViewGroupLayoutParams[_, STextView]]()(implicit context: android.content.Context, defaultLayoutParam: STextView => LP): STextView = {
    val v = new STextView
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, STextView]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (STextView) => LP): STextView =  {
    val v = new STextView
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, STextView]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (STextView) => LP): STextView = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, STextView]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (STextView) => LP): STextView = {
    val v = new STextView
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/OverScroller.html android.widget.OverScroller]]`.
 */
class RichOverScroller[V <: android.widget.OverScroller](val basis: V) extends TraitOverScroller[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/OverScroller.html android.widget.OverScroller]]`. This contains several property accessors.
 */
trait TraitOverScroller[V <: android.widget.OverScroller] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/OverScroller.html#getCurrX() getCurrX()]]`
   */
  @inline def currX = basis.getCurrX


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/OverScroller.html#getCurrY() getCurrY()]]`
   */
  @inline def currY = basis.getCurrY


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/OverScroller.html#getFinalX() getFinalX()]]`
   */
  @inline def finalX = basis.getFinalX


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/OverScroller.html#getFinalY() getFinalY()]]`
   */
  @inline def finalY = basis.getFinalY


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/OverScroller.html#getStartX() getStartX()]]`
   */
  @inline def startX = basis.getStartX


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/OverScroller.html#getStartY() getStartY()]]`
   */
  @inline def startY = basis.getStartY


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/OverScroller.html android.widget.OverScroller]]`.
 */
class SOverScroller()(implicit context: android.content.Context)
    extends android.widget.OverScroller(context) with TraitOverScroller[SOverScroller] {

  def basis = this

}

object SOverScroller {
  def apply()(implicit context: android.content.Context): SOverScroller = {
    val v = new SOverScroller
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/ViewFlipper.html android.widget.ViewFlipper]]`.
 */
class RichViewFlipper[V <: android.widget.ViewFlipper](val basis: V) extends TraitViewFlipper[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/ViewFlipper.html android.widget.ViewFlipper]]`. This contains several property accessors.
 */
trait TraitViewFlipper[V <: android.widget.ViewFlipper] extends TraitViewAnimator[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewFlipper.html#isAutoStart() isAutoStart()]]`
   */
  @inline def autoStart = basis.isAutoStart

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewFlipper.html#setAutoStart(boolean) setAutoStart(boolean)]]`
   */
  @inline def autoStart  (p: Boolean) =            autoStart_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewFlipper.html#setAutoStart(boolean) setAutoStart(boolean)]]`
   */
  @inline def autoStart_=(p: Boolean) = { basis.setAutoStart(p); basis }


  @inline def flipInterval(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'flipInterval'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewFlipper.html#setFlipInterval(int) setFlipInterval(int)]]`
   */
  @inline def flipInterval  (p: Int) =            flipInterval_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/ViewFlipper.html#setFlipInterval(int) setFlipInterval(int)]]`
   */
  @inline def flipInterval_=(p: Int) = { basis.setFlipInterval(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/ViewFlipper.html android.widget.ViewFlipper]]`.
 */
class SViewFlipper()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.ViewFlipper(context) with TraitViewFlipper[SViewFlipper] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SViewFlipper {
  def apply[LP <: ViewGroupLayoutParams[_, SViewFlipper]]()(implicit context: android.content.Context, defaultLayoutParam: SViewFlipper => LP): SViewFlipper = {
    val v = new SViewFlipper
    v.<<.parent.+=(v)
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/Scroller.html android.widget.Scroller]]`.
 */
class RichScroller[V <: android.widget.Scroller](val basis: V) extends TraitScroller[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/Scroller.html android.widget.Scroller]]`. This contains several property accessors.
 */
trait TraitScroller[V <: android.widget.Scroller] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getCurrX() getCurrX()]]`
   */
  @inline def currX = basis.getCurrX


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getCurrY() getCurrY()]]`
   */
  @inline def currY = basis.getCurrY


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getDuration() getDuration()]]`
   */
  @inline def duration = basis.getDuration


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getFinalX() getFinalX()]]`
   */
  @inline def finalX = basis.getFinalX

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#setFinalX(int) setFinalX(int)]]`
   */
  @inline def finalX  (p: Int) =            finalX_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#setFinalX(int) setFinalX(int)]]`
   */
  @inline def finalX_=(p: Int) = { basis.setFinalX(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getFinalY() getFinalY()]]`
   */
  @inline def finalY = basis.getFinalY

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#setFinalY(int) setFinalY(int)]]`
   */
  @inline def finalY  (p: Int) =            finalY_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#setFinalY(int) setFinalY(int)]]`
   */
  @inline def finalY_=(p: Int) = { basis.setFinalY(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getStartX() getStartX()]]`
   */
  @inline def startX = basis.getStartX


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/Scroller.html#getStartY() getStartY()]]`
   */
  @inline def startY = basis.getStartY


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/Scroller.html android.widget.Scroller]]`.
 */
class SScroller()(implicit context: android.content.Context)
    extends android.widget.Scroller(context) with TraitScroller[SScroller] {

  def basis = this

}

object SScroller {
  def apply()(implicit context: android.content.Context): SScroller = {
    val v = new SScroller
    v
  }

}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html android.widget.SimpleAdapter]]`.
 */
class RichSimpleAdapter[V <: android.widget.SimpleAdapter](val basis: V) extends TraitSimpleAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html android.widget.SimpleAdapter]]`. This contains several property accessors.
 */
trait TraitSimpleAdapter[V <: android.widget.SimpleAdapter] extends TraitBaseAdapter[V] {




  @inline def dropDownViewResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'dropDownViewResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html#setDropDownViewResource(int) setDropDownViewResource(int)]]`
   */
  @inline def dropDownViewResource  (p: Int) =            dropDownViewResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html#setDropDownViewResource(int) setDropDownViewResource(int)]]`
   */
  @inline def dropDownViewResource_=(p: Int) = { basis.setDropDownViewResource(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html#getFilter() getFilter()]]`
   */
  @inline def filter = basis.getFilter


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html#getViewBinder() getViewBinder()]]`
   */
  @inline def viewBinder = basis.getViewBinder

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewBinder(android.widget.SimpleAdapter.ViewBinder) setViewBinder(android.widget.SimpleAdapter.ViewBinder)]]`
   */
  @inline def viewBinder  (p: android.widget.SimpleAdapter.ViewBinder) =            viewBinder_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewBinder(android.widget.SimpleAdapter.ViewBinder) setViewBinder(android.widget.SimpleAdapter.ViewBinder)]]`
   */
  @inline def viewBinder_=(p: android.widget.SimpleAdapter.ViewBinder) = { basis.setViewBinder(p); basis }


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html android.widget.AutoCompleteTextView]]`.
 */
class RichAutoCompleteTextView[V <: android.widget.AutoCompleteTextView](val basis: V) extends TraitAutoCompleteTextView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html android.widget.AutoCompleteTextView]]`. This contains several property accessors.
 */
trait TraitAutoCompleteTextView[V <: android.widget.AutoCompleteTextView] extends TraitEditText[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getAdapter() getAdapter()]]`
   */
  @inline def adapter = basis.getAdapter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setAdapter(T) setAdapter(T)]]`
   */
  @inline def adapter  [T <: android.widget.ListAdapter with android.widget.Filterable](p: T) =            adapter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setAdapter(T) setAdapter(T)]]`
   */
  @inline def adapter_=[T <: android.widget.ListAdapter with android.widget.Filterable](p: T) = { basis.setAdapter(p); basis }


  @inline def completionHint(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'completionHint'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setCompletionHint(java.lang.CharSequence) setCompletionHint(java.lang.CharSequence)]]`
   */
  @inline def completionHint  (p: java.lang.CharSequence) =            completionHint_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setCompletionHint(java.lang.CharSequence) setCompletionHint(java.lang.CharSequence)]]`
   */
  @inline def completionHint_=(p: java.lang.CharSequence) = { basis.setCompletionHint(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getDropDownAnchor() getDropDownAnchor()]]`
   */
  @inline def dropDownAnchor = basis.getDropDownAnchor

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownAnchor(int) setDropDownAnchor(int)]]`
   */
  @inline def dropDownAnchor  (p: Int) =            dropDownAnchor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownAnchor(int) setDropDownAnchor(int)]]`
   */
  @inline def dropDownAnchor_=(p: Int) = { basis.setDropDownAnchor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getDropDownBackground() getDropDownBackground()]]`
   */
  @inline def dropDownBackground = basis.getDropDownBackground


  @inline def dropDownBackgroundDrawable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'dropDownBackgroundDrawable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownBackgroundDrawable(android.graphics.drawable.Drawable) setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def dropDownBackgroundDrawable  (p: android.graphics.drawable.Drawable) =            dropDownBackgroundDrawable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownBackgroundDrawable(android.graphics.drawable.Drawable) setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)]]`
   */
  @inline def dropDownBackgroundDrawable_=(p: android.graphics.drawable.Drawable) = { basis.setDropDownBackgroundDrawable(p); basis }


  @inline def dropDownBackgroundResource(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'dropDownBackgroundResource'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownBackgroundResource(int) setDropDownBackgroundResource(int)]]`
   */
  @inline def dropDownBackgroundResource  (p: Int) =            dropDownBackgroundResource_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownBackgroundResource(int) setDropDownBackgroundResource(int)]]`
   */
  @inline def dropDownBackgroundResource_=(p: Int) = { basis.setDropDownBackgroundResource(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getDropDownHeight() getDropDownHeight()]]`
   */
  @inline def dropDownHeight = basis.getDropDownHeight

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownHeight(int) setDropDownHeight(int)]]`
   */
  @inline def dropDownHeight  (p: Int) =            dropDownHeight_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownHeight(int) setDropDownHeight(int)]]`
   */
  @inline def dropDownHeight_=(p: Int) = { basis.setDropDownHeight(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getDropDownHorizontalOffset() getDropDownHorizontalOffset()]]`
   */
  @inline def dropDownHorizontalOffset = basis.getDropDownHorizontalOffset

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownHorizontalOffset(int) setDropDownHorizontalOffset(int)]]`
   */
  @inline def dropDownHorizontalOffset  (p: Int) =            dropDownHorizontalOffset_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownHorizontalOffset(int) setDropDownHorizontalOffset(int)]]`
   */
  @inline def dropDownHorizontalOffset_=(p: Int) = { basis.setDropDownHorizontalOffset(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getDropDownVerticalOffset() getDropDownVerticalOffset()]]`
   */
  @inline def dropDownVerticalOffset = basis.getDropDownVerticalOffset

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownVerticalOffset(int) setDropDownVerticalOffset(int)]]`
   */
  @inline def dropDownVerticalOffset  (p: Int) =            dropDownVerticalOffset_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownVerticalOffset(int) setDropDownVerticalOffset(int)]]`
   */
  @inline def dropDownVerticalOffset_=(p: Int) = { basis.setDropDownVerticalOffset(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getDropDownWidth() getDropDownWidth()]]`
   */
  @inline def dropDownWidth = basis.getDropDownWidth

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownWidth(int) setDropDownWidth(int)]]`
   */
  @inline def dropDownWidth  (p: Int) =            dropDownWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setDropDownWidth(int) setDropDownWidth(int)]]`
   */
  @inline def dropDownWidth_=(p: Int) = { basis.setDropDownWidth(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getItemClickListener() getItemClickListener()]]`
   */
  @inline def itemClickListener = basis.getItemClickListener


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getItemSelectedListener() getItemSelectedListener()]]`
   */
  @inline def itemSelectedListener = basis.getItemSelectedListener


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getListSelection() getListSelection()]]`
   */
  @inline def listSelection = basis.getListSelection

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setListSelection(int) setListSelection(int)]]`
   */
  @inline def listSelection  (p: Int) =            listSelection_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setListSelection(int) setListSelection(int)]]`
   */
  @inline def listSelection_=(p: Int) = { basis.setListSelection(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getOnItemClickListener() getOnItemClickListener()]]`
   */
  @inline def onItemClickListener = basis.getOnItemClickListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setOnItemClickListener(android.widget.AdapterView.OnItemClickListener) setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)]]`
   */
  @inline def onItemClickListener  (p: android.widget.AdapterView.OnItemClickListener) =            onItemClickListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setOnItemClickListener(android.widget.AdapterView.OnItemClickListener) setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)]]`
   */
  @inline def onItemClickListener_=(p: android.widget.AdapterView.OnItemClickListener) = { basis.setOnItemClickListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getOnItemSelectedListener() getOnItemSelectedListener()]]`
   */
  @inline def onItemSelectedListener = basis.getOnItemSelectedListener

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener) setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)]]`
   */
  @inline def onItemSelectedListener  (p: android.widget.AdapterView.OnItemSelectedListener) =            onItemSelectedListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener) setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)]]`
   */
  @inline def onItemSelectedListener_=(p: android.widget.AdapterView.OnItemSelectedListener) = { basis.setOnItemSelectedListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getThreshold() getThreshold()]]`
   */
  @inline def threshold = basis.getThreshold

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setThreshold(int) setThreshold(int)]]`
   */
  @inline def threshold  (p: Int) =            threshold_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setThreshold(int) setThreshold(int)]]`
   */
  @inline def threshold_=(p: Int) = { basis.setThreshold(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#getValidator() getValidator()]]`
   */
  @inline def validator = basis.getValidator

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setValidator(android.widget.AutoCompleteTextView.Validator) setValidator(android.widget.AutoCompleteTextView.Validator)]]`
   */
  @inline def validator  (p: android.widget.AutoCompleteTextView.Validator) =            validator_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html#setValidator(android.widget.AutoCompleteTextView.Validator) setValidator(android.widget.AutoCompleteTextView.Validator)]]`
   */
  @inline def validator_=(p: android.widget.AutoCompleteTextView.Validator) = { basis.setValidator(p); basis }


  @inline def onItemClick[U](f: (android.widget.AdapterView[_], android.view.View, Int, Long) => U): V = {
    basis.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener {
      def onItemClick(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f(p1, p2, p3, p4) }
    })
    basis
  }

  @inline def onItemClick[U](f:  => U): V = {
    basis.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener {
      def onItemClick(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f }
    })
    basis
  }

  @inline def onItemSelected[U](f: (android.widget.AdapterView[_], android.view.View, Int, Long) => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f(p1, p2, p3, p4) }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = {  }
    })
    basis
  }

  @inline def onItemSelected[U](f:  => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = { f }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = {  }
    })
    basis
  }

  @inline def onNothingSelected[U](f: android.widget.AdapterView[_] => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = {  }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = { f(p) }
    })
    basis
  }

  @inline def onNothingSelected[U](f:  => U): V = {
    basis.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener {
      def onItemSelected(p1: android.widget.AdapterView[_], p2: android.view.View, p3: Int, p4: Long): Unit = {  }
      def onNothingSelected(p: android.widget.AdapterView[_]): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/widget/AutoCompleteTextView.html android.widget.AutoCompleteTextView]]`.
 */
class SAutoCompleteTextView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.widget.AutoCompleteTextView(context) with TraitAutoCompleteTextView[SAutoCompleteTextView] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SAutoCompleteTextView {
  def apply[LP <: ViewGroupLayoutParams[_, SAutoCompleteTextView]]()(implicit context: android.content.Context, defaultLayoutParam: SAutoCompleteTextView => LP): SAutoCompleteTextView = {
    val v = new SAutoCompleteTextView
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SAutoCompleteTextView]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SAutoCompleteTextView) => LP): SAutoCompleteTextView =  {
    val v = new SAutoCompleteTextView
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SAutoCompleteTextView]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SAutoCompleteTextView) => LP): SAutoCompleteTextView = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SAutoCompleteTextView]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SAutoCompleteTextView) => LP): SAutoCompleteTextView = {
    val v = new SAutoCompleteTextView
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/RemoteViews.html android.widget.RemoteViews]]`.
 */
class RichRemoteViews[V <: android.widget.RemoteViews](val basis: V) extends TraitRemoteViews[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/RemoteViews.html android.widget.RemoteViews]]`. This contains several property accessors.
 */
trait TraitRemoteViews[V <: android.widget.RemoteViews] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RemoteViews.html#getLayoutId() getLayoutId()]]`
   */
  @inline def layoutId = basis.getLayoutId


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/RemoteViews.html#getPackage() getPackage()]]`
   */
  @inline def `package` = basis.getPackage


}




/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/widget/BaseAdapter.html android.widget.BaseAdapter]]`.
 */
class RichBaseAdapter[V <: android.widget.BaseAdapter](val basis: V) extends TraitBaseAdapter[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/widget/BaseAdapter.html android.widget.BaseAdapter]]`. This contains several property accessors.
 */
trait TraitBaseAdapter[V <: android.widget.BaseAdapter] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/BaseAdapter.html#getCount() getCount()]]`
   */
  @inline def count = basis.getCount


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/widget/BaseAdapter.html#getViewTypeCount() getViewTypeCount()]]`
   */
  @inline def viewTypeCount = basis.getViewTypeCount


}



class SVerticalLayout(implicit context: Context, parentVGroup: TraitViewGroup[_] = null) extends SLinearLayout {
  orientation = VERTICAL
}

object SVerticalLayout {

  def apply[LP <: ViewGroupLayoutParams[_, SVerticalLayout]]()
        (implicit context: android.content.Context, defaultLayoutParam: SLinearLayout => LP): SVerticalLayout = {
    val v = new SVerticalLayout
    v.<<.parent.+=(v)
    v
  }
}

/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/inputmethodservice/ExtractEditText.html android.inputmethodservice.ExtractEditText]]`.
 */
class RichExtractEditText[V <: android.inputmethodservice.ExtractEditText](val basis: V) extends TraitExtractEditText[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/inputmethodservice/ExtractEditText.html android.inputmethodservice.ExtractEditText]]`. This contains several property accessors.
 */
trait TraitExtractEditText[V <: android.inputmethodservice.ExtractEditText] extends TraitEditText[V] {




}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/inputmethodservice/ExtractEditText.html android.inputmethodservice.ExtractEditText]]`.
 */
class SExtractEditText()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.inputmethodservice.ExtractEditText(context) with TraitExtractEditText[SExtractEditText] {

  def basis = this
  def this(text: CharSequence)(implicit context: Context) = {
    this()
    this.text = text
  }

  def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }

  def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
    this()
    this.text = text
    this.setOnClickListener(onClickListener)
  }
  override val parentViewGroup = parentVGroup

}

object SExtractEditText {
  def apply[LP <: ViewGroupLayoutParams[_, SExtractEditText]]()(implicit context: android.content.Context, defaultLayoutParam: SExtractEditText => LP): SExtractEditText = {
    val v = new SExtractEditText
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SExtractEditText]](txt: CharSequence)
      (implicit context: Context, defaultLayoutParam: (SExtractEditText) => LP): SExtractEditText =  {
    val v = new SExtractEditText
    v text txt
    v.<<.parent.+=(v)
    v
  }

  def apply[LP <: ViewGroupLayoutParams[_, SExtractEditText]](text: CharSequence, onClickListener: (View) => Unit)
      (implicit context: Context, defaultLayoutParam: (SExtractEditText) => LP): SExtractEditText = {
    apply(text, func2ViewOnClickListener(onClickListener))
  }

  def apply[LP <: ViewGroupLayoutParams[_, SExtractEditText]](text: CharSequence, onClickListener: OnClickListener)
      (implicit context: Context, defaultLayoutParam: (SExtractEditText) => LP): SExtractEditText = {
    val v = new SExtractEditText
    v.text = text
    v.setOnClickListener(onClickListener)
    v.<<.parent.+=(v)
    v
  }




}


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html android.inputmethodservice.KeyboardView]]`.
 */
class RichKeyboardView[V <: android.inputmethodservice.KeyboardView](val basis: V) extends TraitKeyboardView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html android.inputmethodservice.KeyboardView]]`. This contains several property accessors.
 */
trait TraitKeyboardView[V <: android.inputmethodservice.KeyboardView] extends TraitView[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#getKeyboard() getKeyboard()]]`
   */
  @inline def keyboard = basis.getKeyboard

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setKeyboard(android.inputmethodservice.Keyboard) setKeyboard(android.inputmethodservice.Keyboard)]]`
   */
  @inline def keyboard  (p: android.inputmethodservice.Keyboard) =            keyboard_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setKeyboard(android.inputmethodservice.Keyboard) setKeyboard(android.inputmethodservice.Keyboard)]]`
   */
  @inline def keyboard_=(p: android.inputmethodservice.Keyboard) = { basis.setKeyboard(p); basis }


  @inline def onKeyboardActionListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'onKeyboardActionListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener) setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener)]]`
   */
  @inline def onKeyboardActionListener  (p: android.inputmethodservice.KeyboardView.OnKeyboardActionListener) =            onKeyboardActionListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener) setOnKeyboardActionListener(android.inputmethodservice.KeyboardView.OnKeyboardActionListener)]]`
   */
  @inline def onKeyboardActionListener_=(p: android.inputmethodservice.KeyboardView.OnKeyboardActionListener) = { basis.setOnKeyboardActionListener(p); basis }


  @inline def popupParent(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'popupParent'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setPopupParent(android.view.View) setPopupParent(android.view.View)]]`
   */
  @inline def popupParent  (p: android.view.View) =            popupParent_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setPopupParent(android.view.View) setPopupParent(android.view.View)]]`
   */
  @inline def popupParent_=(p: android.view.View) = { basis.setPopupParent(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#isPreviewEnabled() isPreviewEnabled()]]`
   */
  @inline def previewEnabled = basis.isPreviewEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setPreviewEnabled(boolean) setPreviewEnabled(boolean)]]`
   */
  @inline def previewEnabled  (p: Boolean) =            previewEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setPreviewEnabled(boolean) setPreviewEnabled(boolean)]]`
   */
  @inline def previewEnabled_=(p: Boolean) = { basis.setPreviewEnabled(p); basis }

  @inline def  enablePreview()             = { basis.setPreviewEnabled(true ); basis }
  @inline def disablePreview()             = { basis.setPreviewEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#isProximityCorrectionEnabled() isProximityCorrectionEnabled()]]`
   */
  @inline def proximityCorrectionEnabled = basis.isProximityCorrectionEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setProximityCorrectionEnabled(boolean) setProximityCorrectionEnabled(boolean)]]`
   */
  @inline def proximityCorrectionEnabled  (p: Boolean) =            proximityCorrectionEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setProximityCorrectionEnabled(boolean) setProximityCorrectionEnabled(boolean)]]`
   */
  @inline def proximityCorrectionEnabled_=(p: Boolean) = { basis.setProximityCorrectionEnabled(p); basis }

  @inline def  enableProximityCorrection()             = { basis.setProximityCorrectionEnabled(true ); basis }
  @inline def disableProximityCorrection()             = { basis.setProximityCorrectionEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#isShifted() isShifted()]]`
   */
  @inline def shifted = basis.isShifted

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setShifted(boolean) setShifted(boolean)]]`
   */
  @inline def shifted  (p: Boolean) =            shifted_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setShifted(boolean) setShifted(boolean)]]`
   */
  @inline def shifted_=(p: Boolean) = { basis.setShifted(p); basis }


  @inline def verticalCorrection(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'verticalCorrection'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setVerticalCorrection(int) setVerticalCorrection(int)]]`
   */
  @inline def verticalCorrection  (p: Int) =            verticalCorrection_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html#setVerticalCorrection(int) setVerticalCorrection(int)]]`
   */
  @inline def verticalCorrection_=(p: Int) = { basis.setVerticalCorrection(p); basis }


  @inline def onKey[U](f: (Int, Array[Int]) => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = { f(p1, p2) }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onKey[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = { f }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onPress[U](f: Int => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = { f(p) }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onPress[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = { f }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onRelease[U](f: Int => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = { f(p) }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onRelease[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = { f }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onText[U](f: java.lang.CharSequence => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = { f(p) }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }

  @inline def onText[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = { f }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }



  @inline def swipeDown[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = { f }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }



  @inline def swipeLeft[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = { f }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = {  }
    })
    basis
  }



  @inline def swipeRight[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = { f }
      def swipeUp(): Unit = {  }
    })
    basis
  }



  @inline def swipeUp[U](f:  => U): V = {
    basis.setOnKeyboardActionListener(new android.inputmethodservice.KeyboardView.OnKeyboardActionListener {
      def onKey(p1: Int, p2: Array[Int]): Unit = {  }
      def onPress(p: Int): Unit = {  }
      def onRelease(p: Int): Unit = {  }
      def onText(p: java.lang.CharSequence): Unit = {  }
      def swipeDown(): Unit = {  }
      def swipeLeft(): Unit = {  }
      def swipeRight(): Unit = {  }
      def swipeUp(): Unit = { f }
    })
    basis
  }
}
/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html android.opengl.GLSurfaceView]]`.
 */
class RichGLSurfaceView[V <: android.opengl.GLSurfaceView](val basis: V) extends TraitGLSurfaceView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html android.opengl.GLSurfaceView]]`. This contains several property accessors.
 */
trait TraitGLSurfaceView[V <: android.opengl.GLSurfaceView] extends TraitSurfaceView[V] {




  @inline def EGLConfigChooser(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'EGLConfigChooser'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(boolean) setEGLConfigChooser(boolean)]]`
   */
  @inline def EGLConfigChooser  (p: Boolean) =            EGLConfigChooser_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(boolean) setEGLConfigChooser(boolean)]]`
   */
  @inline def EGLConfigChooser_=(p: Boolean) = { basis.setEGLConfigChooser(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser) setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)]]`
   */
  @inline def EGLConfigChooser  (p: android.opengl.GLSurfaceView.EGLConfigChooser) =            EGLConfigChooser_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser) setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)]]`
   */
  @inline def EGLConfigChooser_=(p: android.opengl.GLSurfaceView.EGLConfigChooser) = { basis.setEGLConfigChooser(p); basis }


  @inline def EGLContextClientVersion(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'EGLContextClientVersion'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextClientVersion(int) setEGLContextClientVersion(int)]]`
   */
  @inline def EGLContextClientVersion  (p: Int) =            EGLContextClientVersion_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextClientVersion(int) setEGLContextClientVersion(int)]]`
   */
  @inline def EGLContextClientVersion_=(p: Int) = { basis.setEGLContextClientVersion(p); basis }


  @inline def EGLContextFactory(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'EGLContextFactory'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory) setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)]]`
   */
  @inline def EGLContextFactory  (p: android.opengl.GLSurfaceView.EGLContextFactory) =            EGLContextFactory_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory) setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)]]`
   */
  @inline def EGLContextFactory_=(p: android.opengl.GLSurfaceView.EGLContextFactory) = { basis.setEGLContextFactory(p); basis }


  @inline def EGLWindowSurfaceFactory(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'EGLWindowSurfaceFactory'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory) setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)]]`
   */
  @inline def EGLWindowSurfaceFactory  (p: android.opengl.GLSurfaceView.EGLWindowSurfaceFactory) =            EGLWindowSurfaceFactory_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory) setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)]]`
   */
  @inline def EGLWindowSurfaceFactory_=(p: android.opengl.GLSurfaceView.EGLWindowSurfaceFactory) = { basis.setEGLWindowSurfaceFactory(p); basis }


  @inline def GLWrapper(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'GLWrapper'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setGLWrapper(android.opengl.GLSurfaceView.GLWrapper) setGLWrapper(android.opengl.GLSurfaceView.GLWrapper)]]`
   */
  @inline def GLWrapper  (p: android.opengl.GLSurfaceView.GLWrapper) =            GLWrapper_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setGLWrapper(android.opengl.GLSurfaceView.GLWrapper) setGLWrapper(android.opengl.GLSurfaceView.GLWrapper)]]`
   */
  @inline def GLWrapper_=(p: android.opengl.GLSurfaceView.GLWrapper) = { basis.setGLWrapper(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getDebugFlags() getDebugFlags()]]`
   */
  @inline def debugFlags = basis.getDebugFlags

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setDebugFlags(int) setDebugFlags(int)]]`
   */
  @inline def debugFlags  (p: Int) =            debugFlags_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setDebugFlags(int) setDebugFlags(int)]]`
   */
  @inline def debugFlags_=(p: Int) = { basis.setDebugFlags(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getRenderMode() getRenderMode()]]`
   */
  @inline def renderMode = basis.getRenderMode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderMode(int) setRenderMode(int)]]`
   */
  @inline def renderMode  (p: Int) =            renderMode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderMode(int) setRenderMode(int)]]`
   */
  @inline def renderMode_=(p: Int) = { basis.setRenderMode(p); basis }


  @inline def renderer(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'renderer'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderer(android.opengl.GLSurfaceView.Renderer) setRenderer(android.opengl.GLSurfaceView.Renderer)]]`
   */
  @inline def renderer  (p: android.opengl.GLSurfaceView.Renderer) =            renderer_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderer(android.opengl.GLSurfaceView.Renderer) setRenderer(android.opengl.GLSurfaceView.Renderer)]]`
   */
  @inline def renderer_=(p: android.opengl.GLSurfaceView.Renderer) = { basis.setRenderer(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/opengl/GLSurfaceView.html android.opengl.GLSurfaceView]]`.
 */
class SGLSurfaceView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.opengl.GLSurfaceView(context) with TraitGLSurfaceView[SGLSurfaceView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SGLSurfaceView {
  def apply[LP <: ViewGroupLayoutParams[_, SGLSurfaceView]]()(implicit context: android.content.Context, defaultLayoutParam: SGLSurfaceView => LP): SGLSurfaceView = {
    val v = new SGLSurfaceView
    v.<<.parent.+=(v)
    v
  }

}


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html android.appwidget.AppWidgetHostView]]`.
 */
class RichAppWidgetHostView[V <: android.appwidget.AppWidgetHostView](val basis: V) extends TraitAppWidgetHostView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html android.appwidget.AppWidgetHostView]]`. This contains several property accessors.
 */
trait TraitAppWidgetHostView[V <: android.appwidget.AppWidgetHostView] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html#getAppWidgetId() getAppWidgetId()]]`
   */
  @inline def appWidgetId = basis.getAppWidgetId


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html#getAppWidgetInfo() getAppWidgetInfo()]]`
   */
  @inline def appWidgetInfo = basis.getAppWidgetInfo


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html android.appwidget.AppWidgetHostView]]`.
 */
class SAppWidgetHostView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.appwidget.AppWidgetHostView(context) with TraitAppWidgetHostView[SAppWidgetHostView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SAppWidgetHostView {
  def apply[LP <: ViewGroupLayoutParams[_, SAppWidgetHostView]]()(implicit context: android.content.Context, defaultLayoutParam: SAppWidgetHostView => LP): SAppWidgetHostView = {
    val v = new SAppWidgetHostView
    v.<<.parent.+=(v)
    v
  }

}


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html android.gesture.GestureOverlayView]]`.
 */
class RichGestureOverlayView[V <: android.gesture.GestureOverlayView](val basis: V) extends TraitGestureOverlayView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html android.gesture.GestureOverlayView]]`. This contains several property accessors.
 */
trait TraitGestureOverlayView[V <: android.gesture.GestureOverlayView] extends TraitFrameLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getCurrentStroke() getCurrentStroke()]]`
   */
  @inline def currentStroke = basis.getCurrentStroke


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isEventsInterceptionEnabled() isEventsInterceptionEnabled()]]`
   */
  @inline def eventsInterceptionEnabled = basis.isEventsInterceptionEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setEventsInterceptionEnabled(boolean) setEventsInterceptionEnabled(boolean)]]`
   */
  @inline def eventsInterceptionEnabled  (p: Boolean) =            eventsInterceptionEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setEventsInterceptionEnabled(boolean) setEventsInterceptionEnabled(boolean)]]`
   */
  @inline def eventsInterceptionEnabled_=(p: Boolean) = { basis.setEventsInterceptionEnabled(p); basis }

  @inline def  enableEventsInterception()             = { basis.setEventsInterceptionEnabled(true ); basis }
  @inline def disableEventsInterception()             = { basis.setEventsInterceptionEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isFadeEnabled() isFadeEnabled()]]`
   */
  @inline def fadeEnabled = basis.isFadeEnabled

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeEnabled(boolean) setFadeEnabled(boolean)]]`
   */
  @inline def fadeEnabled  (p: Boolean) =            fadeEnabled_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeEnabled(boolean) setFadeEnabled(boolean)]]`
   */
  @inline def fadeEnabled_=(p: Boolean) = { basis.setFadeEnabled(p); basis }

  @inline def  enableFade()             = { basis.setFadeEnabled(true ); basis }
  @inline def disableFade()             = { basis.setFadeEnabled(false); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getFadeOffset() getFadeOffset()]]`
   */
  @inline def fadeOffset = basis.getFadeOffset

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeOffset(long) setFadeOffset(long)]]`
   */
  @inline def fadeOffset  (p: Long) =            fadeOffset_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeOffset(long) setFadeOffset(long)]]`
   */
  @inline def fadeOffset_=(p: Long) = { basis.setFadeOffset(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesture() getGesture()]]`
   */
  @inline def gesture = basis.getGesture

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGesture(android.gesture.Gesture) setGesture(android.gesture.Gesture)]]`
   */
  @inline def gesture  (p: android.gesture.Gesture) =            gesture_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGesture(android.gesture.Gesture) setGesture(android.gesture.Gesture)]]`
   */
  @inline def gesture_=(p: android.gesture.Gesture) = { basis.setGesture(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureColor() getGestureColor()]]`
   */
  @inline def gestureColor = basis.getGestureColor

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureColor(int) setGestureColor(int)]]`
   */
  @inline def gestureColor  (p: Int) =            gestureColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureColor(int) setGestureColor(int)]]`
   */
  @inline def gestureColor_=(p: Int) = { basis.setGestureColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesturePath() getGesturePath()]]`
   */
  @inline def gesturePath = basis.getGesturePath


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeAngleThreshold() getGestureStrokeAngleThreshold()]]`
   */
  @inline def gestureStrokeAngleThreshold = basis.getGestureStrokeAngleThreshold

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeAngleThreshold(float) setGestureStrokeAngleThreshold(float)]]`
   */
  @inline def gestureStrokeAngleThreshold  (p: Float) =            gestureStrokeAngleThreshold_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeAngleThreshold(float) setGestureStrokeAngleThreshold(float)]]`
   */
  @inline def gestureStrokeAngleThreshold_=(p: Float) = { basis.setGestureStrokeAngleThreshold(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeLengthThreshold() getGestureStrokeLengthThreshold()]]`
   */
  @inline def gestureStrokeLengthThreshold = basis.getGestureStrokeLengthThreshold

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeLengthThreshold(float) setGestureStrokeLengthThreshold(float)]]`
   */
  @inline def gestureStrokeLengthThreshold  (p: Float) =            gestureStrokeLengthThreshold_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeLengthThreshold(float) setGestureStrokeLengthThreshold(float)]]`
   */
  @inline def gestureStrokeLengthThreshold_=(p: Float) = { basis.setGestureStrokeLengthThreshold(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeSquarenessTreshold() getGestureStrokeSquarenessTreshold()]]`
   */
  @inline def gestureStrokeSquarenessTreshold = basis.getGestureStrokeSquarenessTreshold

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeSquarenessTreshold(float) setGestureStrokeSquarenessTreshold(float)]]`
   */
  @inline def gestureStrokeSquarenessTreshold  (p: Float) =            gestureStrokeSquarenessTreshold_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeSquarenessTreshold(float) setGestureStrokeSquarenessTreshold(float)]]`
   */
  @inline def gestureStrokeSquarenessTreshold_=(p: Float) = { basis.setGestureStrokeSquarenessTreshold(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeType() getGestureStrokeType()]]`
   */
  @inline def gestureStrokeType = basis.getGestureStrokeType

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeType(int) setGestureStrokeType(int)]]`
   */
  @inline def gestureStrokeType  (p: Int) =            gestureStrokeType_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeType(int) setGestureStrokeType(int)]]`
   */
  @inline def gestureStrokeType_=(p: Int) = { basis.setGestureStrokeType(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeWidth() getGestureStrokeWidth()]]`
   */
  @inline def gestureStrokeWidth = basis.getGestureStrokeWidth

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeWidth(float) setGestureStrokeWidth(float)]]`
   */
  @inline def gestureStrokeWidth  (p: Float) =            gestureStrokeWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeWidth(float) setGestureStrokeWidth(float)]]`
   */
  @inline def gestureStrokeWidth_=(p: Float) = { basis.setGestureStrokeWidth(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isGestureVisible() isGestureVisible()]]`
   */
  @inline def gestureVisible = basis.isGestureVisible

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureVisible(boolean) setGestureVisible(boolean)]]`
   */
  @inline def gestureVisible  (p: Boolean) =            gestureVisible_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureVisible(boolean) setGestureVisible(boolean)]]`
   */
  @inline def gestureVisible_=(p: Boolean) = { basis.setGestureVisible(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getOrientation() getOrientation()]]`
   */
  @inline def orientation = basis.getOrientation

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setOrientation(int) setOrientation(int)]]`
   */
  @inline def orientation  (p: Int) =            orientation_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setOrientation(int) setOrientation(int)]]`
   */
  @inline def orientation_=(p: Int) = { basis.setOrientation(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getUncertainGestureColor() getUncertainGestureColor()]]`
   */
  @inline def uncertainGestureColor = basis.getUncertainGestureColor

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setUncertainGestureColor(int) setUncertainGestureColor(int)]]`
   */
  @inline def uncertainGestureColor  (p: Int) =            uncertainGestureColor_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setUncertainGestureColor(int) setUncertainGestureColor(int)]]`
   */
  @inline def uncertainGestureColor_=(p: Int) = { basis.setUncertainGestureColor(p); basis }


  @inline def onGesture[U](f: (android.gesture.GestureOverlayView, android.view.MotionEvent) => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f(p1, p2) }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
    })
    basis
  }

  @inline def onGesture[U](f:  => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
    })
    basis
  }

  @inline def onGestureCancelled[U](f: (android.gesture.GestureOverlayView, android.view.MotionEvent) => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f(p1, p2) }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
    })
    basis
  }

  @inline def onGestureCancelled[U](f:  => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
    })
    basis
  }

  @inline def onGestureEnded[U](f: (android.gesture.GestureOverlayView, android.view.MotionEvent) => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f(p1, p2) }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
    })
    basis
  }

  @inline def onGestureEnded[U](f:  => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
    })
    basis
  }

  @inline def onGesturePerformed[U](f: (android.gesture.GestureOverlayView, android.gesture.Gesture) => U): V = {
    basis.addOnGesturePerformedListener(new android.gesture.GestureOverlayView.OnGesturePerformedListener {
      def onGesturePerformed(p1: android.gesture.GestureOverlayView, p2: android.gesture.Gesture): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onGesturePerformed[U](f:  => U): V = {
    basis.addOnGesturePerformedListener(new android.gesture.GestureOverlayView.OnGesturePerformedListener {
      def onGesturePerformed(p1: android.gesture.GestureOverlayView, p2: android.gesture.Gesture): Unit = { f }
    })
    basis
  }

  @inline def onGestureStarted[U](f: (android.gesture.GestureOverlayView, android.view.MotionEvent) => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onGestureStarted[U](f:  => U): V = {
    basis.addOnGestureListener(new android.gesture.GestureOverlayView.OnGestureListener {
      def onGesture(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureCancelled(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureEnded(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = {  }
      def onGestureStarted(p1: android.gesture.GestureOverlayView, p2: android.view.MotionEvent): Unit = { f }
    })
    basis
  }

  @inline def onGesturingEnded[U](f: android.gesture.GestureOverlayView => U): V = {
    basis.addOnGesturingListener(new android.gesture.GestureOverlayView.OnGesturingListener {
      def onGesturingEnded(p: android.gesture.GestureOverlayView): Unit = { f(p) }
      def onGesturingStarted(p: android.gesture.GestureOverlayView): Unit = {  }
    })
    basis
  }

  @inline def onGesturingEnded[U](f:  => U): V = {
    basis.addOnGesturingListener(new android.gesture.GestureOverlayView.OnGesturingListener {
      def onGesturingEnded(p: android.gesture.GestureOverlayView): Unit = { f }
      def onGesturingStarted(p: android.gesture.GestureOverlayView): Unit = {  }
    })
    basis
  }

  @inline def onGesturingStarted[U](f: android.gesture.GestureOverlayView => U): V = {
    basis.addOnGesturingListener(new android.gesture.GestureOverlayView.OnGesturingListener {
      def onGesturingEnded(p: android.gesture.GestureOverlayView): Unit = {  }
      def onGesturingStarted(p: android.gesture.GestureOverlayView): Unit = { f(p) }
    })
    basis
  }

  @inline def onGesturingStarted[U](f:  => U): V = {
    basis.addOnGesturingListener(new android.gesture.GestureOverlayView.OnGesturingListener {
      def onGesturingEnded(p: android.gesture.GestureOverlayView): Unit = {  }
      def onGesturingStarted(p: android.gesture.GestureOverlayView): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/gesture/GestureOverlayView.html android.gesture.GestureOverlayView]]`.
 */
class SGestureOverlayView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.gesture.GestureOverlayView(context) with TraitGestureOverlayView[SGestureOverlayView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SGestureOverlayView {
  def apply[LP <: ViewGroupLayoutParams[_, SGestureOverlayView]]()(implicit context: android.content.Context, defaultLayoutParam: SGestureOverlayView => LP): SGestureOverlayView = {
    val v = new SGestureOverlayView
    v.<<.parent.+=(v)
    v
  }

}


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/database/DataSetObserver.html android.database.DataSetObserver]]`.
 */
class RichDataSetObserver[V <: android.database.DataSetObserver](val basis: V) extends TraitDataSetObserver[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/database/DataSetObserver.html android.database.DataSetObserver]]`. This contains several property accessors.
 */
trait TraitDataSetObserver[V <: android.database.DataSetObserver] {

  def basis: V



}


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/webkit/WebView.html android.webkit.WebView]]`.
 */
class RichWebView[V <: android.webkit.WebView](val basis: V) extends TraitWebView[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/webkit/WebView.html android.webkit.WebView]]`. This contains several property accessors.
 */
trait TraitWebView[V <: android.webkit.WebView] extends TraitAbsoluteLayout[V] {




  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getCertificate() getCertificate()]]`
   */
  @inline def certificate = basis.getCertificate

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setCertificate(android.net.http.SslCertificate) setCertificate(android.net.http.SslCertificate)]]`
   */
  @inline def certificate  (p: android.net.http.SslCertificate) =            certificate_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setCertificate(android.net.http.SslCertificate) setCertificate(android.net.http.SslCertificate)]]`
   */
  @inline def certificate_=(p: android.net.http.SslCertificate) = { basis.setCertificate(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getContentHeight() getContentHeight()]]`
   */
  @inline def contentHeight = basis.getContentHeight


  @inline def downloadListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'downloadListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setDownloadListener(android.webkit.DownloadListener) setDownloadListener(android.webkit.DownloadListener)]]`
   */
  @inline def downloadListener  (p: android.webkit.DownloadListener) =            downloadListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setDownloadListener(android.webkit.DownloadListener) setDownloadListener(android.webkit.DownloadListener)]]`
   */
  @inline def downloadListener_=(p: android.webkit.DownloadListener) = { basis.setDownloadListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getFavicon() getFavicon()]]`
   */
  @inline def favicon = basis.getFavicon


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getHitTestResult() getHitTestResult()]]`
   */
  @inline def hitTestResult = basis.getHitTestResult


  @inline def horizontalScrollbarOverlay(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'horizontalScrollbarOverlay'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setHorizontalScrollbarOverlay(boolean) setHorizontalScrollbarOverlay(boolean)]]`
   */
  @inline def horizontalScrollbarOverlay  (p: Boolean) =            horizontalScrollbarOverlay_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setHorizontalScrollbarOverlay(boolean) setHorizontalScrollbarOverlay(boolean)]]`
   */
  @inline def horizontalScrollbarOverlay_=(p: Boolean) = { basis.setHorizontalScrollbarOverlay(p); basis }


  @inline def initialScale(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'initialScale'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setInitialScale(int) setInitialScale(int)]]`
   */
  @inline def initialScale  (p: Int) =            initialScale_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setInitialScale(int) setInitialScale(int)]]`
   */
  @inline def initialScale_=(p: Int) = { basis.setInitialScale(p); basis }


  @inline def mapTrackballToArrowKeys(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'mapTrackballToArrowKeys'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setMapTrackballToArrowKeys(boolean) setMapTrackballToArrowKeys(boolean)]]`
   */
  @inline def mapTrackballToArrowKeys  (p: Boolean) =            mapTrackballToArrowKeys_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setMapTrackballToArrowKeys(boolean) setMapTrackballToArrowKeys(boolean)]]`
   */
  @inline def mapTrackballToArrowKeys_=(p: Boolean) = { basis.setMapTrackballToArrowKeys(p); basis }


  @inline def networkAvailable(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'networkAvailable'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setNetworkAvailable(boolean) setNetworkAvailable(boolean)]]`
   */
  @inline def networkAvailable  (p: Boolean) =            networkAvailable_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setNetworkAvailable(boolean) setNetworkAvailable(boolean)]]`
   */
  @inline def networkAvailable_=(p: Boolean) = { basis.setNetworkAvailable(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getOriginalUrl() getOriginalUrl()]]`
   */
  @inline def originalUrl = basis.getOriginalUrl


  @inline def pictureListener(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'pictureListener'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setPictureListener(android.webkit.WebView.PictureListener) setPictureListener(android.webkit.WebView.PictureListener)]]`
   */
  @inline def pictureListener  (p: android.webkit.WebView.PictureListener) =            pictureListener_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setPictureListener(android.webkit.WebView.PictureListener) setPictureListener(android.webkit.WebView.PictureListener)]]`
   */
  @inline def pictureListener_=(p: android.webkit.WebView.PictureListener) = { basis.setPictureListener(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getProgress() getProgress()]]`
   */
  @inline def progress = basis.getProgress


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getScale() getScale()]]`
   */
  @inline def scale = basis.getScale


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getSettings() getSettings()]]`
   */
  @inline def settings = basis.getSettings


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getTitle() getTitle()]]`
   */
  @inline def title = basis.getTitle


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#getUrl() getUrl()]]`
   */
  @inline def url = basis.getUrl


  @inline def verticalScrollbarOverlay(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'verticalScrollbarOverlay'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setVerticalScrollbarOverlay(boolean) setVerticalScrollbarOverlay(boolean)]]`
   */
  @inline def verticalScrollbarOverlay  (p: Boolean) =            verticalScrollbarOverlay_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setVerticalScrollbarOverlay(boolean) setVerticalScrollbarOverlay(boolean)]]`
   */
  @inline def verticalScrollbarOverlay_=(p: Boolean) = { basis.setVerticalScrollbarOverlay(p); basis }


  @inline def webChromeClient(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'webChromeClient'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setWebChromeClient(android.webkit.WebChromeClient) setWebChromeClient(android.webkit.WebChromeClient)]]`
   */
  @inline def webChromeClient  (p: android.webkit.WebChromeClient) =            webChromeClient_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setWebChromeClient(android.webkit.WebChromeClient) setWebChromeClient(android.webkit.WebChromeClient)]]`
   */
  @inline def webChromeClient_=(p: android.webkit.WebChromeClient) = { basis.setWebChromeClient(p); basis }


  @inline def webViewClient(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for 'webViewClient'")

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setWebViewClient(android.webkit.WebViewClient) setWebViewClient(android.webkit.WebViewClient)]]`
   */
  @inline def webViewClient  (p: android.webkit.WebViewClient) =            webViewClient_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/webkit/WebView.html#setWebViewClient(android.webkit.WebViewClient) setWebViewClient(android.webkit.WebViewClient)]]`
   */
  @inline def webViewClient_=(p: android.webkit.WebViewClient) = { basis.setWebViewClient(p); basis }


  @inline def onDownloadStart[U](f: (java.lang.String, java.lang.String, java.lang.String, java.lang.String, Long) => U): V = {
    basis.setDownloadListener(new android.webkit.DownloadListener {
      def onDownloadStart(p1: java.lang.String, p2: java.lang.String, p3: java.lang.String, p4: java.lang.String, p5: Long): Unit = { f(p1, p2, p3, p4, p5) }
    })
    basis
  }

  @inline def onDownloadStart[U](f:  => U): V = {
    basis.setDownloadListener(new android.webkit.DownloadListener {
      def onDownloadStart(p1: java.lang.String, p2: java.lang.String, p3: java.lang.String, p4: java.lang.String, p5: Long): Unit = { f }
    })
    basis
  }

  @inline def onNewPicture[U](f: (android.webkit.WebView, android.graphics.Picture) => U): V = {
    basis.setPictureListener(new android.webkit.WebView.PictureListener {
      def onNewPicture(p1: android.webkit.WebView, p2: android.graphics.Picture): Unit = { f(p1, p2) }
    })
    basis
  }

  @inline def onNewPicture[U](f:  => U): V = {
    basis.setPictureListener(new android.webkit.WebView.PictureListener {
      def onNewPicture(p1: android.webkit.WebView, p2: android.graphics.Picture): Unit = { f }
    })
    basis
  }
}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/webkit/WebView.html android.webkit.WebView]]`.
 */
class SWebView()(implicit context: android.content.Context, parentVGroup: TraitViewGroup[_] = null)
    extends android.webkit.WebView(context) with TraitWebView[SWebView] {

  def basis = this
  override val parentViewGroup = parentVGroup

}

object SWebView {
  def apply[LP <: ViewGroupLayoutParams[_, SWebView]]()(implicit context: android.content.Context, defaultLayoutParam: SWebView => LP): SWebView = {
    val v = new SWebView
    v.<<.parent.+=(v)
    v
  }

}


/**
 * Automatically generated enriching class of `[[https://developer.android.com/reference/android/graphics/Paint.html android.graphics.Paint]]`.
 */
class RichPaint[V <: android.graphics.Paint](val basis: V) extends TraitPaint[V]

/**
 * Automatically generated helper trait of `[[https://developer.android.com/reference/android/graphics/Paint.html android.graphics.Paint]]`. This contains several property accessors.
 */
trait TraitPaint[V <: android.graphics.Paint] {

  def basis: V



  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getAlpha() getAlpha()]]`
   */
  @inline def alpha = basis.getAlpha

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setAlpha(int) setAlpha(int)]]`
   */
  @inline def alpha  (p: Int) =            alpha_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setAlpha(int) setAlpha(int)]]`
   */
  @inline def alpha_=(p: Int) = { basis.setAlpha(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isAntiAlias() isAntiAlias()]]`
   */
  @inline def antiAlias = basis.isAntiAlias

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setAntiAlias(boolean) setAntiAlias(boolean)]]`
   */
  @inline def antiAlias  (p: Boolean) =            antiAlias_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setAntiAlias(boolean) setAntiAlias(boolean)]]`
   */
  @inline def antiAlias_=(p: Boolean) = { basis.setAntiAlias(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getColor() getColor()]]`
   */
  @inline def color = basis.getColor

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setColor(int) setColor(int)]]`
   */
  @inline def color  (p: Int) =            color_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setColor(int) setColor(int)]]`
   */
  @inline def color_=(p: Int) = { basis.setColor(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getColorFilter() getColorFilter()]]`
   */
  @inline def colorFilter = basis.getColorFilter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setColorFilter(android.graphics.ColorFilter) setColorFilter(android.graphics.ColorFilter)]]`
   */
  @inline def colorFilter  (p: android.graphics.ColorFilter) =            colorFilter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setColorFilter(android.graphics.ColorFilter) setColorFilter(android.graphics.ColorFilter)]]`
   */
  @inline def colorFilter_=(p: android.graphics.ColorFilter) = { basis.setColorFilter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isDither() isDither()]]`
   */
  @inline def dither = basis.isDither

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setDither(boolean) setDither(boolean)]]`
   */
  @inline def dither  (p: Boolean) =            dither_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setDither(boolean) setDither(boolean)]]`
   */
  @inline def dither_=(p: Boolean) = { basis.setDither(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isFakeBoldText() isFakeBoldText()]]`
   */
  @inline def fakeBoldText = basis.isFakeBoldText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setFakeBoldText(boolean) setFakeBoldText(boolean)]]`
   */
  @inline def fakeBoldText  (p: Boolean) =            fakeBoldText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setFakeBoldText(boolean) setFakeBoldText(boolean)]]`
   */
  @inline def fakeBoldText_=(p: Boolean) = { basis.setFakeBoldText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isFilterBitmap() isFilterBitmap()]]`
   */
  @inline def filterBitmap = basis.isFilterBitmap

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setFilterBitmap(boolean) setFilterBitmap(boolean)]]`
   */
  @inline def filterBitmap  (p: Boolean) =            filterBitmap_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setFilterBitmap(boolean) setFilterBitmap(boolean)]]`
   */
  @inline def filterBitmap_=(p: Boolean) = { basis.setFilterBitmap(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getFlags() getFlags()]]`
   */
  @inline def flags = basis.getFlags

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setFlags(int) setFlags(int)]]`
   */
  @inline def flags  (p: Int) =            flags_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setFlags(int) setFlags(int)]]`
   */
  @inline def flags_=(p: Int) = { basis.setFlags(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getFontMetrics() getFontMetrics()]]`
   */
  @inline def fontMetrics = basis.getFontMetrics


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt() getFontMetricsInt()]]`
   */
  @inline def fontMetricsInt = basis.getFontMetricsInt


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getFontSpacing() getFontSpacing()]]`
   */
  @inline def fontSpacing = basis.getFontSpacing


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isLinearText() isLinearText()]]`
   */
  @inline def linearText = basis.isLinearText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setLinearText(boolean) setLinearText(boolean)]]`
   */
  @inline def linearText  (p: Boolean) =            linearText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setLinearText(boolean) setLinearText(boolean)]]`
   */
  @inline def linearText_=(p: Boolean) = { basis.setLinearText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getMaskFilter() getMaskFilter()]]`
   */
  @inline def maskFilter = basis.getMaskFilter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setMaskFilter(android.graphics.MaskFilter) setMaskFilter(android.graphics.MaskFilter)]]`
   */
  @inline def maskFilter  (p: android.graphics.MaskFilter) =            maskFilter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setMaskFilter(android.graphics.MaskFilter) setMaskFilter(android.graphics.MaskFilter)]]`
   */
  @inline def maskFilter_=(p: android.graphics.MaskFilter) = { basis.setMaskFilter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getPathEffect() getPathEffect()]]`
   */
  @inline def pathEffect = basis.getPathEffect

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setPathEffect(android.graphics.PathEffect) setPathEffect(android.graphics.PathEffect)]]`
   */
  @inline def pathEffect  (p: android.graphics.PathEffect) =            pathEffect_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setPathEffect(android.graphics.PathEffect) setPathEffect(android.graphics.PathEffect)]]`
   */
  @inline def pathEffect_=(p: android.graphics.PathEffect) = { basis.setPathEffect(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getRasterizer() getRasterizer()]]`
   */
  @inline def rasterizer = basis.getRasterizer

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setRasterizer(android.graphics.Rasterizer) setRasterizer(android.graphics.Rasterizer)]]`
   */
  @inline def rasterizer  (p: android.graphics.Rasterizer) =            rasterizer_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setRasterizer(android.graphics.Rasterizer) setRasterizer(android.graphics.Rasterizer)]]`
   */
  @inline def rasterizer_=(p: android.graphics.Rasterizer) = { basis.setRasterizer(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getShader() getShader()]]`
   */
  @inline def shader = basis.getShader

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setShader(android.graphics.Shader) setShader(android.graphics.Shader)]]`
   */
  @inline def shader  (p: android.graphics.Shader) =            shader_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setShader(android.graphics.Shader) setShader(android.graphics.Shader)]]`
   */
  @inline def shader_=(p: android.graphics.Shader) = { basis.setShader(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isStrikeThruText() isStrikeThruText()]]`
   */
  @inline def strikeThruText = basis.isStrikeThruText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText(boolean) setStrikeThruText(boolean)]]`
   */
  @inline def strikeThruText  (p: Boolean) =            strikeThruText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText(boolean) setStrikeThruText(boolean)]]`
   */
  @inline def strikeThruText_=(p: Boolean) = { basis.setStrikeThruText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getStrokeCap() getStrokeCap()]]`
   */
  @inline def strokeCap = basis.getStrokeCap

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeCap(android.graphics.Paint.Cap) setStrokeCap(android.graphics.Paint.Cap)]]`
   */
  @inline def strokeCap  (p: android.graphics.Paint.Cap) =            strokeCap_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeCap(android.graphics.Paint.Cap) setStrokeCap(android.graphics.Paint.Cap)]]`
   */
  @inline def strokeCap_=(p: android.graphics.Paint.Cap) = { basis.setStrokeCap(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getStrokeJoin() getStrokeJoin()]]`
   */
  @inline def strokeJoin = basis.getStrokeJoin

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeJoin(android.graphics.Paint.Join) setStrokeJoin(android.graphics.Paint.Join)]]`
   */
  @inline def strokeJoin  (p: android.graphics.Paint.Join) =            strokeJoin_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeJoin(android.graphics.Paint.Join) setStrokeJoin(android.graphics.Paint.Join)]]`
   */
  @inline def strokeJoin_=(p: android.graphics.Paint.Join) = { basis.setStrokeJoin(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getStrokeMiter() getStrokeMiter()]]`
   */
  @inline def strokeMiter = basis.getStrokeMiter

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeMiter(float) setStrokeMiter(float)]]`
   */
  @inline def strokeMiter  (p: Float) =            strokeMiter_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeMiter(float) setStrokeMiter(float)]]`
   */
  @inline def strokeMiter_=(p: Float) = { basis.setStrokeMiter(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getStrokeWidth() getStrokeWidth()]]`
   */
  @inline def strokeWidth = basis.getStrokeWidth

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeWidth(float) setStrokeWidth(float)]]`
   */
  @inline def strokeWidth  (p: Float) =            strokeWidth_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStrokeWidth(float) setStrokeWidth(float)]]`
   */
  @inline def strokeWidth_=(p: Float) = { basis.setStrokeWidth(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getStyle() getStyle()]]`
   */
  @inline def style = basis.getStyle

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStyle(android.graphics.Paint.Style) setStyle(android.graphics.Paint.Style)]]`
   */
  @inline def style  (p: android.graphics.Paint.Style) =            style_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setStyle(android.graphics.Paint.Style) setStyle(android.graphics.Paint.Style)]]`
   */
  @inline def style_=(p: android.graphics.Paint.Style) = { basis.setStyle(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isSubpixelText() isSubpixelText()]]`
   */
  @inline def subpixelText = basis.isSubpixelText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setSubpixelText(boolean) setSubpixelText(boolean)]]`
   */
  @inline def subpixelText  (p: Boolean) =            subpixelText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setSubpixelText(boolean) setSubpixelText(boolean)]]`
   */
  @inline def subpixelText_=(p: Boolean) = { basis.setSubpixelText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getTextAlign() getTextAlign()]]`
   */
  @inline def textAlign = basis.getTextAlign

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextAlign(android.graphics.Paint.Align) setTextAlign(android.graphics.Paint.Align)]]`
   */
  @inline def textAlign  (p: android.graphics.Paint.Align) =            textAlign_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextAlign(android.graphics.Paint.Align) setTextAlign(android.graphics.Paint.Align)]]`
   */
  @inline def textAlign_=(p: android.graphics.Paint.Align) = { basis.setTextAlign(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getTextScaleX() getTextScaleX()]]`
   */
  @inline def textScaleX = basis.getTextScaleX

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextScaleX(float) setTextScaleX(float)]]`
   */
  @inline def textScaleX  (p: Float) =            textScaleX_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextScaleX(float) setTextScaleX(float)]]`
   */
  @inline def textScaleX_=(p: Float) = { basis.setTextScaleX(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getTextSize() getTextSize()]]`
   */
  @inline def textSize = basis.getTextSize

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextSize(float) setTextSize(float)]]`
   */
  @inline def textSize  (p: Float) =            textSize_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextSize(float) setTextSize(float)]]`
   */
  @inline def textSize_=(p: Float) = { basis.setTextSize(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getTextSkewX() getTextSkewX()]]`
   */
  @inline def textSkewX = basis.getTextSkewX

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextSkewX(float) setTextSkewX(float)]]`
   */
  @inline def textSkewX  (p: Float) =            textSkewX_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTextSkewX(float) setTextSkewX(float)]]`
   */
  @inline def textSkewX_=(p: Float) = { basis.setTextSkewX(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getTypeface() getTypeface()]]`
   */
  @inline def typeface = basis.getTypeface

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTypeface(android.graphics.Typeface) setTypeface(android.graphics.Typeface)]]`
   */
  @inline def typeface  (p: android.graphics.Typeface) =            typeface_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setTypeface(android.graphics.Typeface) setTypeface(android.graphics.Typeface)]]`
   */
  @inline def typeface_=(p: android.graphics.Typeface) = { basis.setTypeface(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#isUnderlineText() isUnderlineText()]]`
   */
  @inline def underlineText = basis.isUnderlineText

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText(boolean) setUnderlineText(boolean)]]`
   */
  @inline def underlineText  (p: Boolean) =            underlineText_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText(boolean) setUnderlineText(boolean)]]`
   */
  @inline def underlineText_=(p: Boolean) = { basis.setUnderlineText(p); basis }


  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#getXfermode() getXfermode()]]`
   */
  @inline def xfermode = basis.getXfermode

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setXfermode(android.graphics.Xfermode) setXfermode(android.graphics.Xfermode)]]`
   */
  @inline def xfermode  (p: android.graphics.Xfermode) =            xfermode_=(p)

  /**
   * Shortcut for `[[https://developer.android.com/reference/android/graphics/Paint.html#setXfermode(android.graphics.Xfermode) setXfermode(android.graphics.Xfermode)]]`
   */
  @inline def xfermode_=(p: android.graphics.Xfermode) = { basis.setXfermode(p); basis }


}

/**
 * Automatically generated concrete helper class of `[[https://developer.android.com/reference/android/graphics/Paint.html android.graphics.Paint]]`.
 */
class SPaint()
    extends android.graphics.Paint() with TraitPaint[SPaint] {

  def basis = this

}

object SPaint {
  def apply(): SPaint = {
    val v = new SPaint
    v
  }

  def apply(color: Int): SPaint = {
    val v = new SPaint
    v.color = color
    v
  }



}




trait WidgetImplicits {
  @inline implicit def popupWindow2RichPopupWindow[V <: android.widget.PopupWindow](popupWindow: V) = new RichPopupWindow[V](popupWindow)
  @inline implicit def arrayAdapter2RichArrayAdapter[V <: android.widget.ArrayAdapter[_]](arrayAdapter: V) = new RichArrayAdapter[V](arrayAdapter)
  @inline implicit def absoluteLayout2RichAbsoluteLayout[V <: android.widget.AbsoluteLayout](absoluteLayout: V) = new RichAbsoluteLayout[V](absoluteLayout)
  @inline implicit def spinnerAdapter2RichSpinnerAdapter[V <: android.widget.SpinnerAdapter](spinnerAdapter: V) = new RichSpinnerAdapter[V](spinnerAdapter)
  @inline implicit def imageButton2RichImageButton[V <: android.widget.ImageButton](imageButton: V) = new RichImageButton[V](imageButton)
  @inline implicit def listView2RichListView[V <: android.widget.ListView](listView: V) = new RichListView[V](listView)
  @inline implicit def editText2RichEditText[V <: android.widget.EditText](editText: V) = new RichEditText[V](editText)
  @inline implicit def imageView2RichImageView[V <: android.widget.ImageView](imageView: V) = new RichImageView[V](imageView)
  @inline implicit def analogClock2RichAnalogClock[V <: android.widget.AnalogClock](analogClock: V) = new RichAnalogClock[V](analogClock)
  @inline implicit def multiAutoCompleteTextView2RichMultiAutoCompleteTextView[V <: android.widget.MultiAutoCompleteTextView](multiAutoCompleteTextView: V) = new RichMultiAutoCompleteTextView[V](multiAutoCompleteTextView)
  @inline implicit def datePicker2RichDatePicker[V <: android.widget.DatePicker](datePicker: V) = new RichDatePicker[V](datePicker)
  @inline implicit def absSeekBar2RichAbsSeekBar[V <: android.widget.AbsSeekBar](absSeekBar: V) = new RichAbsSeekBar[V](absSeekBar)
  @inline implicit def tableLayout2RichTableLayout[V <: android.widget.TableLayout](tableLayout: V) = new RichTableLayout[V](tableLayout)
  @inline implicit def simpleCursorTreeAdapter2RichSimpleCursorTreeAdapter[V <: android.widget.SimpleCursorTreeAdapter](simpleCursorTreeAdapter: V) = new RichSimpleCursorTreeAdapter[V](simpleCursorTreeAdapter)
  @inline implicit def cursorAdapter2RichCursorAdapter[V <: android.widget.CursorAdapter](cursorAdapter: V) = new RichCursorAdapter[V](cursorAdapter)
  @inline implicit def resourceCursorTreeAdapter2RichResourceCursorTreeAdapter[V <: android.widget.ResourceCursorTreeAdapter](resourceCursorTreeAdapter: V) = new RichResourceCursorTreeAdapter[V](resourceCursorTreeAdapter)
  @inline implicit def tabHost2RichTabHost[V <: android.widget.TabHost](tabHost: V) = new RichTabHost[V](tabHost)
  @inline implicit def heterogeneousExpandableList2RichHeterogeneousExpandableList[V <: android.widget.HeterogeneousExpandableList](heterogeneousExpandableList: V) = new RichHeterogeneousExpandableList[V](heterogeneousExpandableList)
  @inline implicit def radioGroup2RichRadioGroup[V <: android.widget.RadioGroup](radioGroup: V) = new RichRadioGroup[V](radioGroup)
  @inline implicit def ratingBar2RichRatingBar[V <: android.widget.RatingBar](ratingBar: V) = new RichRatingBar[V](ratingBar)
  @inline implicit def simpleExpandableListAdapter2RichSimpleExpandableListAdapter[V <: android.widget.SimpleExpandableListAdapter](simpleExpandableListAdapter: V) = new RichSimpleExpandableListAdapter[V](simpleExpandableListAdapter)
  @inline implicit def expandableListAdapter2RichExpandableListAdapter[V <: android.widget.ExpandableListAdapter](expandableListAdapter: V) = new RichExpandableListAdapter[V](expandableListAdapter)
  @inline implicit def spinner2RichSpinner[V <: android.widget.Spinner](spinner: V) = new RichSpinner[V](spinner)
  @inline implicit def alphabetIndexer2RichAlphabetIndexer[V <: android.widget.AlphabetIndexer](alphabetIndexer: V) = new RichAlphabetIndexer[V](alphabetIndexer)
  @inline implicit def gridView2RichGridView[V <: android.widget.GridView](gridView: V) = new RichGridView[V](gridView)
  @inline implicit def relativeLayout2RichRelativeLayout[V <: android.widget.RelativeLayout](relativeLayout: V) = new RichRelativeLayout[V](relativeLayout)
  @inline implicit def chronometer2RichChronometer[V <: android.widget.Chronometer](chronometer: V) = new RichChronometer[V](chronometer)
  @inline implicit def filterable2RichFilterable[V <: android.widget.Filterable](filterable: V) = new RichFilterable[V](filterable)
  @inline implicit def checkedTextView2RichCheckedTextView[V <: android.widget.CheckedTextView](checkedTextView: V) = new RichCheckedTextView[V](checkedTextView)
  @inline implicit def sectionIndexer2RichSectionIndexer[V <: android.widget.SectionIndexer](sectionIndexer: V) = new RichSectionIndexer[V](sectionIndexer)
  @inline implicit def twoLineListItem2RichTwoLineListItem[V <: android.widget.TwoLineListItem](twoLineListItem: V) = new RichTwoLineListItem[V](twoLineListItem)
  @inline implicit def headerViewListAdapter2RichHeaderViewListAdapter[V <: android.widget.HeaderViewListAdapter](headerViewListAdapter: V) = new RichHeaderViewListAdapter[V](headerViewListAdapter)
  @inline implicit def imageSwitcher2RichImageSwitcher[V <: android.widget.ImageSwitcher](imageSwitcher: V) = new RichImageSwitcher[V](imageSwitcher)
  @inline implicit def timePicker2RichTimePicker[V <: android.widget.TimePicker](timePicker: V) = new RichTimePicker[V](timePicker)
  @inline implicit def expandableListView2RichExpandableListView[V <: android.widget.ExpandableListView](expandableListView: V) = new RichExpandableListView[V](expandableListView)
  @inline implicit def absListView2RichAbsListView[V <: android.widget.AbsListView](absListView: V) = new RichAbsListView[V](absListView)
  @inline implicit def absSpinner2RichAbsSpinner[V <: android.widget.AbsSpinner](absSpinner: V) = new RichAbsSpinner[V](absSpinner)
  @inline implicit def seekBar2RichSeekBar[V <: android.widget.SeekBar](seekBar: V) = new RichSeekBar[V](seekBar)
  @inline implicit def toast2RichToast[V <: android.widget.Toast](toast: V) = new RichToast[V](toast)
  @inline implicit def listAdapter2RichListAdapter[V <: android.widget.ListAdapter](listAdapter: V) = new RichListAdapter[V](listAdapter)
  @inline implicit def zoomButtonsController2RichZoomButtonsController[V <: android.widget.ZoomButtonsController](zoomButtonsController: V) = new RichZoomButtonsController[V](zoomButtonsController)
  @inline implicit def resourceCursorAdapter2RichResourceCursorAdapter[V <: android.widget.ResourceCursorAdapter](resourceCursorAdapter: V) = new RichResourceCursorAdapter[V](resourceCursorAdapter)
  @inline implicit def viewAnimator2RichViewAnimator[V <: android.widget.ViewAnimator](viewAnimator: V) = new RichViewAnimator[V](viewAnimator)
  @inline implicit def slidingDrawer2RichSlidingDrawer[V <: android.widget.SlidingDrawer](slidingDrawer: V) = new RichSlidingDrawer[V](slidingDrawer)
  @inline implicit def textSwitcher2RichTextSwitcher[V <: android.widget.TextSwitcher](textSwitcher: V) = new RichTextSwitcher[V](textSwitcher)
  @inline implicit def linearLayout2RichLinearLayout[V <: android.widget.LinearLayout](linearLayout: V) = new RichLinearLayout[V](linearLayout)
  @inline implicit def zoomControls2RichZoomControls[V <: android.widget.ZoomControls](zoomControls: V) = new RichZoomControls[V](zoomControls)
  @inline implicit def dialerFilter2RichDialerFilter[V <: android.widget.DialerFilter](dialerFilter: V) = new RichDialerFilter[V](dialerFilter)
  @inline implicit def radioButton2RichRadioButton[V <: android.widget.RadioButton](radioButton: V) = new RichRadioButton[V](radioButton)
  @inline implicit def quickContactBadge2RichQuickContactBadge[V <: android.widget.QuickContactBadge](quickContactBadge: V) = new RichQuickContactBadge[V](quickContactBadge)
  @inline implicit def digitalClock2RichDigitalClock[V <: android.widget.DigitalClock](digitalClock: V) = new RichDigitalClock[V](digitalClock)
  @inline implicit def toggleButton2RichToggleButton[V <: android.widget.ToggleButton](toggleButton: V) = new RichToggleButton[V](toggleButton)
  @inline implicit def button2RichButton[V <: android.widget.Button](button: V) = new RichButton[V](button)
  @inline implicit def checkBox2RichCheckBox[V <: android.widget.CheckBox](checkBox: V) = new RichCheckBox[V](checkBox)
  @inline implicit def mediaController2RichMediaController[V <: android.widget.MediaController](mediaController: V) = new RichMediaController[V](mediaController)
  @inline implicit def tableRow2RichTableRow[V <: android.widget.TableRow](tableRow: V) = new RichTableRow[V](tableRow)
  @inline implicit def tabWidget2RichTabWidget[V <: android.widget.TabWidget](tabWidget: V) = new RichTabWidget[V](tabWidget)
  @inline implicit def videoView2RichVideoView[V <: android.widget.VideoView](videoView: V) = new RichVideoView[V](videoView)
  @inline implicit def adapterView2RichAdapterView[V <: android.widget.AdapterView[_]](adapterView: V) = new RichAdapterView[V](adapterView)
  @inline implicit def checkable2RichCheckable[V <: android.widget.Checkable](checkable: V) = new RichCheckable[V](checkable)
  @inline implicit def horizontalScrollView2RichHorizontalScrollView[V <: android.widget.HorizontalScrollView](horizontalScrollView: V) = new RichHorizontalScrollView[V](horizontalScrollView)
  @inline implicit def progressBar2RichProgressBar[V <: android.widget.ProgressBar](progressBar: V) = new RichProgressBar[V](progressBar)
  @inline implicit def scrollView2RichScrollView[V <: android.widget.ScrollView](scrollView: V) = new RichScrollView[V](scrollView)
  @inline implicit def cursorTreeAdapter2RichCursorTreeAdapter[V <: android.widget.CursorTreeAdapter](cursorTreeAdapter: V) = new RichCursorTreeAdapter[V](cursorTreeAdapter)
  @inline implicit def simpleCursorAdapter2RichSimpleCursorAdapter[V <: android.widget.SimpleCursorAdapter](simpleCursorAdapter: V) = new RichSimpleCursorAdapter[V](simpleCursorAdapter)
  @inline implicit def baseExpandableListAdapter2RichBaseExpandableListAdapter[V <: android.widget.BaseExpandableListAdapter](baseExpandableListAdapter: V) = new RichBaseExpandableListAdapter[V](baseExpandableListAdapter)
  @inline implicit def viewSwitcher2RichViewSwitcher[V <: android.widget.ViewSwitcher](viewSwitcher: V) = new RichViewSwitcher[V](viewSwitcher)
  @inline implicit def zoomButton2RichZoomButton[V <: android.widget.ZoomButton](zoomButton: V) = new RichZoomButton[V](zoomButton)
  @inline implicit def gallery2RichGallery[V <: android.widget.Gallery](gallery: V) = new RichGallery[V](gallery)
  @inline implicit def filterQueryProvider2RichFilterQueryProvider[V <: android.widget.FilterQueryProvider](filterQueryProvider: V) = new RichFilterQueryProvider[V](filterQueryProvider)
  @inline implicit def compoundButton2RichCompoundButton[V <: android.widget.CompoundButton](compoundButton: V) = new RichCompoundButton[V](compoundButton)
  @inline implicit def filter2RichFilter[V <: android.widget.Filter](filter: V) = new RichFilter[V](filter)
  @inline implicit def wrapperListAdapter2RichWrapperListAdapter[V <: android.widget.WrapperListAdapter](wrapperListAdapter: V) = new RichWrapperListAdapter[V](wrapperListAdapter)
  @inline implicit def frameLayout2RichFrameLayout[V <: android.widget.FrameLayout](frameLayout: V) = new RichFrameLayout[V](frameLayout)
  @inline implicit def adapter2RichAdapter[V <: android.widget.Adapter](adapter: V) = new RichAdapter[V](adapter)
  @inline implicit def textView2RichTextView[V <: android.widget.TextView](textView: V) = new RichTextView[V](textView)
  @inline implicit def overScroller2RichOverScroller[V <: android.widget.OverScroller](overScroller: V) = new RichOverScroller[V](overScroller)
  @inline implicit def viewFlipper2RichViewFlipper[V <: android.widget.ViewFlipper](viewFlipper: V) = new RichViewFlipper[V](viewFlipper)
  @inline implicit def scroller2RichScroller[V <: android.widget.Scroller](scroller: V) = new RichScroller[V](scroller)
  @inline implicit def simpleAdapter2RichSimpleAdapter[V <: android.widget.SimpleAdapter](simpleAdapter: V) = new RichSimpleAdapter[V](simpleAdapter)
  @inline implicit def autoCompleteTextView2RichAutoCompleteTextView[V <: android.widget.AutoCompleteTextView](autoCompleteTextView: V) = new RichAutoCompleteTextView[V](autoCompleteTextView)
  @inline implicit def remoteViews2RichRemoteViews[V <: android.widget.RemoteViews](remoteViews: V) = new RichRemoteViews[V](remoteViews)
  @inline implicit def baseAdapter2RichBaseAdapter[V <: android.widget.BaseAdapter](baseAdapter: V) = new RichBaseAdapter[V](baseAdapter)

  @inline implicit def extractEditText2RichExtractEditText[V <: android.inputmethodservice.ExtractEditText](extractEditText: V) = new RichExtractEditText[V](extractEditText)
  @inline implicit def keyboardView2RichKeyboardView[V <: android.inputmethodservice.KeyboardView](keyboardView: V) = new RichKeyboardView[V](keyboardView)
  @inline implicit def gLSurfaceView2RichGLSurfaceView[V <: android.opengl.GLSurfaceView](gLSurfaceView: V) = new RichGLSurfaceView[V](gLSurfaceView)
  @inline implicit def appWidgetHostView2RichAppWidgetHostView[V <: android.appwidget.AppWidgetHostView](appWidgetHostView: V) = new RichAppWidgetHostView[V](appWidgetHostView)
  @inline implicit def gestureOverlayView2RichGestureOverlayView[V <: android.gesture.GestureOverlayView](gestureOverlayView: V) = new RichGestureOverlayView[V](gestureOverlayView)
  @inline implicit def dataSetObserver2RichDataSetObserver[V <: android.database.DataSetObserver](dataSetObserver: V) = new RichDataSetObserver[V](dataSetObserver)
  @inline implicit def webView2RichWebView[V <: android.webkit.WebView](webView: V) = new RichWebView[V](webView)
}
object WidgetImplicits extends WidgetImplicits