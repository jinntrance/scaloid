delimiters "$", "$"

cap(str) ::= <<$str; format="cap"$>>
decap(str) ::= <<$str; format="decap"$>>

name(t) ::= <<$t.name$>>
names(ts) ::= <<$ts:name(); separator=", "$>>

isEmpty ::= [
  "" : true
]

isUnit ::= [
  "Unit" : true
]

// Implicit 

implicitConversions(pkg) ::= <<
$pkg:{ c | $implicitConversion(pkg.(c))$}; separator="\n"$
>>

implicitConversion(base) ::= <<$_implicitConversion(base.name)$>>
_implicitConversion(name) ::= <<
@inline implicit def $decap(name)$2Rich$name$[V <: $genType(base.tpe, true)$]($decap(name)$: V) = new Rich$name$[V]($decap(name)$)
>>


// Class

wrapAllPackageMembers(pkg) ::= <<
$pkg:{ c | $wholeClassDef(pkg.(c))$}; separator="\n\n"$
>>

wholeClassDef(base) ::= <<
$richClassDef(...)$

$if(! base.isAbstract && ! base.isFinal)$
$prefixedClassDef(...)$
$endif$
>>

helperTraitName(base) ::= <<Trait$base.name; format="simple"$>>

extendClause() ::= <<$_extendClause(base.parentType, trim(({$base.name$_mixin})()))$>>
_extendClause(parent, mixin) ::= <%
$if(parent || ! isEmpty.(mixin))$ extends $endif$
$if(parent)$$helperTraitName(parent)$[V]$endif$
$if(parent && ! isEmpty.(mixin))$ with $endif$
$mixin; separator=" with "$
%>

richClassDef(base, mixin) ::= <<$_richClassDef(base.name)$>>
_richClassDef(name) ::= <<

$richClassScalaDoc(base)$
class Rich$name$[V <: $genType(base.tpe, true)$](val basis: V) extends $helperTraitName(base)$[V]

$helperTraitScalaDoc(base)$
trait $helperTraitName(base)$[V <: $genType(base.tpe, true)$]$extendClause()$ {

  $if(! base.parentType)$def basis: V$endif$

  $({$name$_traitBody})()$

  $properties(base)$
  $listeners(base)$
  $intentMethods(base)$
}
>>

withClassPrefix(name) ::= "S$name$"

prefixedClassDef(base) ::= <<$_prefixedClassDef(base, base.name, withClassPrefix(base.name))$>>

_prefixedClassDef(base, name, sClassName, con) ::= <<
$if(base.hasBlankConstructor || ClassBodies.(name) || FullConstructors.(name))$
$prefixedClassScalaDoc(base)$
class $sClassName$$customClassGenerics()$($customClassExplicitArgs()$)$classImplicitArgs()$
    extends $baseClassInstance()$ with $helperTraitName(base)$[$sClassName$$customSimpleClassGenerics()$] {

  def basis = this
  $customClassBodies()$
  $({$name$_concreteBody})()$
}

$companionObjectDef(...)$
$endif$
>>
// companion object

companionObjectDef(base) ::= <<$_companionObjectDef(base.name, withClassPrefix(base.name))$>>
_companionObjectDef(name, sClassName) ::= <<
object $sClassName$ {
  $if(base.hasBlankConstructor)$$constructor(first(base.constructors))$$endif$

  $customFullConstructors()$
}
>>

customConst(kind, sep) ::= <%
$kind:{ key |
  $if(base.isA.(key))$
    $kind.(key); separator=sep$
  $endif$
}; separator=sep$
%>

customConstTypeParams() ::= <<$customConst(ConstTypeParams, ", ")$>>
ConstTypeParams ::= [
  "View" : {LP <: ViewGroupLayoutParams[_, $sClassName$]}
]

customClassGenerics() ::= <<$customConst(GenericsArgs, ", ")$>>
GenericsArgs ::= [
  "ArrayAdapter" : {[V <: android.view.View, T <: AnyRef]}
]

customSimpleClassGenerics() ::= <<$customConst(SimpleGenericsArgs, ", ")$>>
SimpleGenericsArgs ::= [
  "ArrayAdapter" : {[V, T]}
]

customClassExplicitArgs() ::= <<$customConst(ClassExplicitArgs, ", ")$>>
ClassExplicitArgs ::= [
  "ArrayAdapter" : {items: Array[T], textViewResourceId: Int = android.R.layout.simple_spinner_item}
]

customBaseClassArgs() ::= <<$customConst(BaseClassArgs, ", ")$>>
BaseClassArgs ::= [
  "ArrayAdapter" : {context, textViewResourceId, items}
]

customClassImplicitArgs() ::= <<$customConst(ClassImplicitArgs, ", ")$>>
ClassImplicitArgs ::= [
  "View" : {parentVGroup: TraitViewGroup[_] = null}
]

customClassBodies() ::= <<$customConst(CustomClassBodies, "")$>>
CustomClassBodies ::= [
  "View" : {override val parentViewGroup = parentVGroup},
  "TextView" : <<
def this(text: CharSequence)(implicit context: Context) = {
  this()
  this.text = text
}

def this(text: CharSequence, onClickListener: View => Unit)(implicit context: Context) = {
  this()
  this.text = text
  this.setOnClickListener(onClickListener)
}

def this(text: CharSequence, onClickListener: OnClickListener)(implicit context: Context) = {
  this()
  this.text = text
  this.setOnClickListener(onClickListener)
}
>>,
  "ImageView" : <<
def this(imageResource: android.graphics.drawable.Drawable)(implicit context: Context) = {
  this()
  this.imageDrawable = imageResource
}

def this(imageResource: android.graphics.drawable.Drawable, onClickListener: View => Unit)(implicit context: Context) = {
  this()
  this.imageDrawable = imageResource
  this.setOnClickListener(onClickListener)
}

def this(imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)(implicit context: Context) = {
  this()
  this.imageDrawable = imageResource
  this.setOnClickListener(onClickListener)
}
>>
]

customConstImplicitArgs() ::= <<$customConst(ConstImplicitArgs, ", ")$>>
ConstImplicitArgs ::= [
  "View" : {defaultLayoutParam: $sClassName$ => LP}
]

customConstImplicitBodies() ::= <<$customConst(ConstImplicitBodies, "\n")$>>
ConstImplicitBodies ::= [
  "View" : {v.<<.parent.+=(v)}
]

customFullConstructors() ::= <<$customConst(FullConstructors, "\n")$>>
FullConstructors ::= [
  "TextView" : <<
def apply[LP <: ViewGroupLayoutParams[_, $sClassName$]](txt: CharSequence)
    (implicit context: Context, defaultLayoutParam: ($sClassName$) => LP): $sClassName$ =  {
  val v = new $sClassName$
  v text txt
  v.<<.parent.+=(v)
  v
}

def apply[LP <: ViewGroupLayoutParams[_, $sClassName$]](text: CharSequence, onClickListener: (View) => Unit)
    (implicit context: Context, defaultLayoutParam: ($sClassName$) => LP): $sClassName$ = {
  apply(text, func2ViewOnClickListener(onClickListener))
}

def apply[LP <: ViewGroupLayoutParams[_, $sClassName$]](text: CharSequence, onClickListener: OnClickListener)
    (implicit context: Context, defaultLayoutParam: ($sClassName$) => LP): $sClassName$ = {
  val v = new $sClassName$
  v.text = text
  v.setOnClickListener(onClickListener)
  v.<<.parent.+=(v)
  v
}
>>,
   "ImageView" : <<
def apply[LP <: ViewGroupLayoutParams[_, $sClassName$]](imageResource: android.graphics.drawable.Drawable)
    (implicit context: Context, defaultLayoutParam: ($sClassName$) => LP): $sClassName$ = {
  val v = new $sClassName$
  v.imageDrawable = imageResource
  v.<<.parent.+=(v)
  v
}

def apply[LP <: ViewGroupLayoutParams[_, $sClassName$]](imageResource: android.graphics.drawable.Drawable, onClickListener: (View) => Unit)
    (implicit context: Context, defaultLayoutParam: ($sClassName$) => LP): $sClassName$ = {
  apply(imageResource, func2ViewOnClickListener(onClickListener))
}

def apply[LP <: ViewGroupLayoutParams[_, $sClassName$]](imageResource: android.graphics.drawable.Drawable, onClickListener: OnClickListener)
    (implicit context: Context, defaultLayoutParam: ($sClassName$) => LP): $sClassName$ = {
  val v = new $sClassName$
  v.imageDrawable = imageResource
  v.setOnClickListener(onClickListener)
  v.<<.parent.+=(v)
  v
}
>>,
   "Paint" : <<
def apply(color: Int): $sClassName$ = {
  val v = new $sClassName$
  v.color = color
  v
}

>>,
  "ArrayAdapter" : <<
def apply[T <: AnyRef : Manifest](items: T*)(implicit context: Context): $sClassName$[TextView, T] = new $sClassName$[TextView, T](items.toArray)

def apply[T <: AnyRef : Manifest](textViewResourceId: Int, items: T*)(implicit context: Context): $sClassName$[TextView, T] = new $sClassName$[TextView, T](items.toArray, textViewResourceId)

def apply[T <: AnyRef](items: Array[T])(implicit context: Context): $sClassName$[TextView, T] = new $sClassName$[TextView, T](items)

def apply[T <: AnyRef](textViewResourceId: Int, items: Array[T])(implicit context: Context): $sClassName$[TextView, T] = new $sClassName$[TextView, T](items, textViewResourceId)
>>
]

constArgs(args) ::= <%
$args:{ a | $a.name$: $genType(a.tpe)$}; separator=", "$
%>

constExplicitArgs() ::= <<($constArgs(con.explicitArgs)$)>>

classImplicitArgs() ::= <<$_concatArgs(first(base.constructors).implicitArgs, customClassImplicitArgs(), true)$>>

constImplicitArgs() ::= <<$_concatArgs(con.implicitArgs, customConstImplicitArgs(), true)$>>

_concatArgs(args, customArgs, isImplicit = false) ::= <%
$if (first(args).name || !isEmpty.(customArgs))$
($if(isImplicit)$implicit $endif$
  $if (isEmpty.(customArgs))$
    $constArgs(args)$
  $else$
    $strip([constArgs(args), customArgs]); separator=", "$
  $endif$
)
$endif$
%>

constTypeParams() ::= <<$_constTypeParams(con.paramedTypes, strip(customConstTypeParams()))$>>
_constTypeParams(pTypes, customTypes) ::= <%
$if (first(pTypes).name || !isEmpty.(customTypes))$
[
  $if (isEmpty.(customTypes))$
    $pTypes:{t | $paramedType(t, true)$}; separator=", "$
  $else$
    $strip([pTypes:{t | $paramedType(t, true)$}, customTypes]); separator=", "$
  $endif$
]
$endif$
%>

baseClassInstance(con) ::= <%
$base.tpe.name$$typeVar(base.tpe)$
(
  $if(BaseClassArgs.(name))$
    $BaseClassArgs.(name)$
  $else$
    $names(first(base.constructors).args)$
  $endif$
)
%>

constructor(con) ::= <<
def apply$constTypeParams()$$constExplicitArgs()$$constImplicitArgs()$: $sClassName$$typeVar(base.tpe)$ = {
  val v = new $sClassName$$typeVar(base.tpe)$
  $customConstImplicitBodies()$
  v
}
>>

constructors() ::= <<
$base.constructors:constructor(); separator="\n\n"$
>>


// method

typeVar(t, erased = false) ::= <%
$if(first(t.bounds).name)$
  $paramedType(t)$
$elseif(first(t.params).name)$
[
  $if(erased)$
    _
  $else$
    $t.params:genType(); separator=", "$
  $endif$
]
$endif$
%>

genType(t, erased = false) ::= <%
$if( ! first(t.bounds).name)$$t.name$$endif$
$typeVar(t, erased)$
%>

argTypes(types) ::= <%
$if(first(rest(types)))$
($types:genType(); separator=", "$)
$else$
$genType(first(types))$
$endif$
%>

namedArgs(types) ::= <%
$if(first(rest(types)).name)$
$types:{ t | p$i$: $genType(t)$}; separator=", "$
$elseif(first(types).name)$
p: $genType(first(types))$
$endif$
%>

callArgs(types) ::= <%
$if(first(rest(types)).name)$
$types:{ t | p$i$}; separator=", "$
$elseif(first(types).name)$
p
$endif$
%>

paramedType(t, define = false) ::= <%
$t.name$
$if(define || ! t.isVar)$ <: $t.bounds:genType(); separator=" with "$$endif$
%>

paramedTypes(pTypes) ::= <%
$if(first(pTypes).name)$
[$pTypes:{ t | $paramedType(t, true)$}; separator=", "$]
$endif$
%>


// listener

callbackBody(method, isUnit = false) ::= <%
$if(method.hasBody)$
  $if(isUnit)$
    f
  $else$
    f($callArgs(method.argTypes)$)
  $endif$
$endif$
%>

callbackMethod(method, isUnit = false) ::= <<
def $method.name$$paramedTypes(paramedTypes, true)$($namedArgs(method.argTypes)$): $genType(method.retType)$ = { $callbackBody(...)$ }
>>

unitCallbackMethod(method) ::= <<$callbackMethod(method, true)$>>

commonListener(l, args = "") ::= <<
$if(isUnit.(l.retType.name))$@inline def $l.name$[U](f: $args$ => U): V = {
$else$@inline def $l.name$(f: $args$ => $genType(l.retType)$): V = {
$endif$
  basis.$l.setter$(new $l.callbackClassName$ {
>>

fullListener(l) ::= <<
$commonListener(l, argTypes(l.argTypes))$
    $l.callbackMethods:callbackMethod(); separator="\n"$
  })
  basis
}
>>

unitListener(l) ::= <<
$commonListener(l)$
    $l.callbackMethods:unitCallbackMethod(); separator="\n"$
  })
  basis
}
>>

listener(l) ::= <<
$if(first(l.argTypes).name)$$fullListener(l)$$endif$

$unitListener(l)$
>>

listeners(base) ::= <<$base.listeners:listener(); separator="\n\n"$>>

intentMethod(l) ::= <<
@inline def $l.name$[T: ClassTag]$if(!l.zeroArgs)$($namedArgs(l.argTypes)$)$endif$(implicit context: Context): $genType(l.retType)$ = basis.$l.name$(SIntent[T]$if(!l.zeroArgs)$, $callArgs(l.argTypes); separator=", "$$endif$)
>>

intentMethods(base) ::= <<$base.intentMethods:intentMethod(); separator="\n\n"$>>


// property

override(m) ::= <<$if(m.isOverride)$ override$endif$>>

noGetter(name) ::= <<
@inline def $name; format="safe-ident"$(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for '$name$'")
>>

getter(prop) ::= <<
$if(prop.getter)$
$methodScalaDoc(base, prop.getter)$
@inline$override(prop.getter)$ def $prop.name; format="safe-ident"$ = basis.$prop.getter.name$
$elseif( ! prop.nameClashes)$
$noGetter(prop.name)$
$endif$
>>

setter(prop, method) ::= <<
$_setter("  ", {           $prop.name$_=(p)})$
$_setter("_=", {{ basis.$method.name$(p); basis \}})$
>>

_setter(postFix, body) ::= <<
$if( ! method.isAbstract || ! first(method.paramedTypes).name )$
$methodScalaDoc(base, method)$
@inline def ${$prop.name$$postFix$}; format="safe-ident"$$paramedTypes(method.paramedTypes)$($namedArgs(method.argTypes)$) = $body$
$endif$
>>

switch(name, setter) ::= <<
$if(setter.name)$
@inline def  enable$name$()             = { basis.$setter.name$(true ); basis }
@inline def disable$name$()             = { basis.$setter.name$(false); basis }
$endif$
>>

setters(prop) ::= <<
$prop.setters:{ s | $setter(prop, s)$}; separator="\n"$
$if(prop.switch)$
$switch(prop.switch, first(prop.setters))$
$endif$
>>

property(prop) ::= <%$getter(prop)$$setters(prop)$%>

properties(base) ::= <%$base.properties:{ prop | $property(prop)$}$%>


// service

systemServiceHead(base) ::= <<
@inline def $decap(base.name)$(implicit context: Context) =
  context.getSystemService(Context.$base.name; format="manager-to-service"$).asInstanceOf[$base.tpe.name$]

>>


// scaladoc

androidDocBase() ::= <<https://developer.android.com/reference>>

androidClassUrl(cls) ::= <<$androidDocBase()$/$cls.pkg; format="dot-to-slash"$/$cls.name$.html>>

androidReference(cls) ::= <<`[[$androidClassUrl(cls)$ $genType(cls.tpe, true)$]]`>>

methodSignature(method, sep) ::= <<$method.name$($method.argTypes:{ arg |$arg.javaName$}; separator=sep$)>>

androidMethodReference(cls, method) ::= <%
`[[$androidClassUrl(cls)$#$methodSignature(method, ",\%20")$ $methodSignature(method, ", ")$]]`
%>

methodScalaDoc(cls, method) ::= <<
/**
 * Shortcut for $androidMethodReference(cls, method)$
 */
>>

richClassScalaDoc(cls) ::= <<
/**
 * Automatically generated enriching class of $androidReference(cls)$.
 */
>>

helperTraitScalaDoc(cls) ::= <<
/**
 * Automatically generated helper trait of $androidReference(cls)$. This contains several property accessors.
 */
>>

prefixedClassScalaDoc(cls) ::= <<
/**
 * Automatically generated concrete helper class of $androidReference(cls)$.
 */
>>

// etc

license() ::= <<
/* 
 *
 * 
 *
 *
 * Less painful Android development with Scala
 *
 * http://scaloid.org
 *
 *
 *
 *
 *
 *
 * Copyright 2013 Sung-Ho Lee and Scaloid team
 *
 * Sung-Ho Lee and Scaloid team licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
 * This file is automatically generated. Any changes on this file will be OVERWRITTEN!
 * To learn how to contribute, please refer to:
 * https://github.com/pocorall/scaloid/wiki/Inside-Scaloid
 */
>>
